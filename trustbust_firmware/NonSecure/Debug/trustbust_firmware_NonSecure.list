
trustbust_firmware_NonSecure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007c4  08100238  08100238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  081009fc  081009fc  000019fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08100a4c  08100a4c  00001a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08100a50  08100a50  00001a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000009  20040000  08100a54  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  2004000c  08100a5d  0000200c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2004002c  08100a5d  0000202c  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00002009  2**0
                  CONTENTS, READONLY
  9 .debug_info   00004211  00000000  00000000  0000203f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000b79  00000000  00000000  00006250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000408  00000000  00000000  00006dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000002e7  00000000  00000000  000071d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003063f  00000000  00000000  000074bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00004d81  00000000  00000000  00037afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00130638  00000000  00000000  0003c87f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0016ceb7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000e78  00000000  00000000  0016cefc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006a  00000000  00000000  0016dd74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100238 <__do_global_dtors_aux>:
 8100238:	b510      	push	{r4, lr}
 810023a:	4c05      	ldr	r4, [pc, #20]	@ (8100250 <__do_global_dtors_aux+0x18>)
 810023c:	7823      	ldrb	r3, [r4, #0]
 810023e:	b933      	cbnz	r3, 810024e <__do_global_dtors_aux+0x16>
 8100240:	4b04      	ldr	r3, [pc, #16]	@ (8100254 <__do_global_dtors_aux+0x1c>)
 8100242:	b113      	cbz	r3, 810024a <__do_global_dtors_aux+0x12>
 8100244:	4804      	ldr	r0, [pc, #16]	@ (8100258 <__do_global_dtors_aux+0x20>)
 8100246:	f3af 8000 	nop.w
 810024a:	2301      	movs	r3, #1
 810024c:	7023      	strb	r3, [r4, #0]
 810024e:	bd10      	pop	{r4, pc}
 8100250:	2004000c 	.word	0x2004000c
 8100254:	00000000 	.word	0x00000000
 8100258:	081009e4 	.word	0x081009e4

0810025c <frame_dummy>:
 810025c:	b508      	push	{r3, lr}
 810025e:	4b03      	ldr	r3, [pc, #12]	@ (810026c <frame_dummy+0x10>)
 8100260:	b11b      	cbz	r3, 810026a <frame_dummy+0xe>
 8100262:	4903      	ldr	r1, [pc, #12]	@ (8100270 <frame_dummy+0x14>)
 8100264:	4803      	ldr	r0, [pc, #12]	@ (8100274 <frame_dummy+0x18>)
 8100266:	f3af 8000 	nop.w
 810026a:	bd08      	pop	{r3, pc}
 810026c:	00000000 	.word	0x00000000
 8100270:	20040010 	.word	0x20040010
 8100274:	081009e4 	.word	0x081009e4

08100278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100278:	b580      	push	{r7, lr}
 810027a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 810027c:	f000 f86a 	bl	8100354 <HAL_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100280:	bf00      	nop
 8100282:	e7fd      	b.n	8100280 <main+0x8>

08100284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100284:	b480      	push	{r7}
 8100286:	b083      	sub	sp, #12
 8100288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 810028a:	4b0a      	ldr	r3, [pc, #40]	@ (81002b4 <HAL_MspInit+0x30>)
 810028c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8100290:	4a08      	ldr	r2, [pc, #32]	@ (81002b4 <HAL_MspInit+0x30>)
 8100292:	f043 0304 	orr.w	r3, r3, #4
 8100296:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 810029a:	4b06      	ldr	r3, [pc, #24]	@ (81002b4 <HAL_MspInit+0x30>)
 810029c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81002a0:	f003 0304 	and.w	r3, r3, #4
 81002a4:	607b      	str	r3, [r7, #4]
 81002a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81002a8:	bf00      	nop
 81002aa:	370c      	adds	r7, #12
 81002ac:	46bd      	mov	sp, r7
 81002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81002b2:	4770      	bx	lr
 81002b4:	46020c00 	.word	0x46020c00

081002b8 <MemManage_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81002b8:	b480      	push	{r7}
 81002ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81002bc:	bf00      	nop
 81002be:	e7fd      	b.n	81002bc <MemManage_Handler+0x4>

081002c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81002c0:	b480      	push	{r7}
 81002c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81002c4:	bf00      	nop
 81002c6:	e7fd      	b.n	81002c4 <UsageFault_Handler+0x4>

081002c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81002c8:	b480      	push	{r7}
 81002ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81002cc:	bf00      	nop
 81002ce:	46bd      	mov	sp, r7
 81002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81002d4:	4770      	bx	lr

081002d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81002d6:	b480      	push	{r7}
 81002d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81002da:	bf00      	nop
 81002dc:	46bd      	mov	sp, r7
 81002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81002e2:	4770      	bx	lr

081002e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81002e4:	b580      	push	{r7, lr}
 81002e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81002e8:	f000 f8da 	bl	81004a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81002ec:	bf00      	nop
 81002ee:	bd80      	pop	{r7, pc}

081002f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 81002f0:	b480      	push	{r7}
 81002f2:	af00      	add	r7, sp, #0
  /* Nothing done in non-secure */

  /* Non-secure main application shall call SystemCoreClockUpdate() to update */
  /* the SystemCoreClock variable to insure non-secure application relies on  */
  /* the initial clock reference set by secure application.                   */
}
 81002f4:	bf00      	nop
 81002f6:	46bd      	mov	sp, r7
 81002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81002fc:	4770      	bx	lr
	...

08100300 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8100300:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8100338 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8100304:	f7ff fff4 	bl	81002f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8100308:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 810030a:	e003      	b.n	8100314 <LoopCopyDataInit>

0810030c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 810030c:	4b0b      	ldr	r3, [pc, #44]	@ (810033c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 810030e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8100310:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8100312:	3104      	adds	r1, #4

08100314 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8100314:	480a      	ldr	r0, [pc, #40]	@ (8100340 <LoopForever+0xa>)
	ldr	r3, =_edata
 8100316:	4b0b      	ldr	r3, [pc, #44]	@ (8100344 <LoopForever+0xe>)
	adds	r2, r0, r1
 8100318:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 810031a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 810031c:	d3f6      	bcc.n	810030c <CopyDataInit>
	ldr	r2, =_sbss
 810031e:	4a0a      	ldr	r2, [pc, #40]	@ (8100348 <LoopForever+0x12>)
	b	LoopFillZerobss
 8100320:	e002      	b.n	8100328 <LoopFillZerobss>

08100322 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8100322:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8100324:	f842 3b04 	str.w	r3, [r2], #4

08100328 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8100328:	4b08      	ldr	r3, [pc, #32]	@ (810034c <LoopForever+0x16>)
	cmp	r2, r3
 810032a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 810032c:	d3f9      	bcc.n	8100322 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810032e:	f000 fb35 	bl	810099c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8100332:	f7ff ffa1 	bl	8100278 <main>

08100336 <LoopForever>:

LoopForever:
    b LoopForever
 8100336:	e7fe      	b.n	8100336 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8100338:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 810033c:	08100a54 	.word	0x08100a54
	ldr	r0, =_sdata
 8100340:	20040000 	.word	0x20040000
	ldr	r3, =_edata
 8100344:	20040009 	.word	0x20040009
	ldr	r2, =_sbss
 8100348:	2004000c 	.word	0x2004000c
	ldr	r3, = _ebss
 810034c:	2004002c 	.word	0x2004002c

08100350 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8100350:	e7fe      	b.n	8100350 <ADC1_IRQHandler>
	...

08100354 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100354:	b580      	push	{r7, lr}
 8100356:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8100358:	4b12      	ldr	r3, [pc, #72]	@ (81003a4 <HAL_Init+0x50>)
 810035a:	681b      	ldr	r3, [r3, #0]
 810035c:	4a11      	ldr	r2, [pc, #68]	@ (81003a4 <HAL_Init+0x50>)
 810035e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8100362:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100364:	2003      	movs	r0, #3
 8100366:	f000 f93e 	bl	81005e6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 810036a:	f000 fa15 	bl	8100798 <HAL_RCC_GetSysClockFreq>
 810036e:	4602      	mov	r2, r0
 8100370:	4b0d      	ldr	r3, [pc, #52]	@ (81003a8 <HAL_Init+0x54>)
 8100372:	6a1b      	ldr	r3, [r3, #32]
 8100374:	f003 030f 	and.w	r3, r3, #15
 8100378:	490c      	ldr	r1, [pc, #48]	@ (81003ac <HAL_Init+0x58>)
 810037a:	5ccb      	ldrb	r3, [r1, r3]
 810037c:	fa22 f303 	lsr.w	r3, r2, r3
 8100380:	4a0b      	ldr	r2, [pc, #44]	@ (81003b0 <HAL_Init+0x5c>)
 8100382:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8100384:	2004      	movs	r0, #4
 8100386:	f000 f975 	bl	8100674 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810038a:	2000      	movs	r0, #0
 810038c:	f000 f812 	bl	81003b4 <HAL_InitTick>
 8100390:	4603      	mov	r3, r0
 8100392:	2b00      	cmp	r3, #0
 8100394:	d001      	beq.n	810039a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8100396:	2301      	movs	r3, #1
 8100398:	e002      	b.n	81003a0 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810039a:	f7ff ff73 	bl	8100284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810039e:	2300      	movs	r3, #0
}
 81003a0:	4618      	mov	r0, r3
 81003a2:	bd80      	pop	{r7, pc}
 81003a4:	40022000 	.word	0x40022000
 81003a8:	46020c00 	.word	0x46020c00
 81003ac:	081009fc 	.word	0x081009fc
 81003b0:	20040000 	.word	0x20040000

081003b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81003b4:	b580      	push	{r7, lr}
 81003b6:	b084      	sub	sp, #16
 81003b8:	af00      	add	r7, sp, #0
 81003ba:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 81003bc:	2300      	movs	r3, #0
 81003be:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 81003c0:	4b33      	ldr	r3, [pc, #204]	@ (8100490 <HAL_InitTick+0xdc>)
 81003c2:	781b      	ldrb	r3, [r3, #0]
 81003c4:	2b00      	cmp	r3, #0
 81003c6:	d101      	bne.n	81003cc <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 81003c8:	2301      	movs	r3, #1
 81003ca:	e05c      	b.n	8100486 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 81003cc:	4b31      	ldr	r3, [pc, #196]	@ (8100494 <HAL_InitTick+0xe0>)
 81003ce:	681b      	ldr	r3, [r3, #0]
 81003d0:	f003 0304 	and.w	r3, r3, #4
 81003d4:	2b04      	cmp	r3, #4
 81003d6:	d10c      	bne.n	81003f2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 81003d8:	4b2f      	ldr	r3, [pc, #188]	@ (8100498 <HAL_InitTick+0xe4>)
 81003da:	681a      	ldr	r2, [r3, #0]
 81003dc:	4b2c      	ldr	r3, [pc, #176]	@ (8100490 <HAL_InitTick+0xdc>)
 81003de:	781b      	ldrb	r3, [r3, #0]
 81003e0:	4619      	mov	r1, r3
 81003e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 81003e6:	fbb3 f3f1 	udiv	r3, r3, r1
 81003ea:	fbb2 f3f3 	udiv	r3, r2, r3
 81003ee:	60fb      	str	r3, [r7, #12]
 81003f0:	e037      	b.n	8100462 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 81003f2:	f000 f997 	bl	8100724 <HAL_SYSTICK_GetCLKSourceConfig>
 81003f6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 81003f8:	68bb      	ldr	r3, [r7, #8]
 81003fa:	2b02      	cmp	r3, #2
 81003fc:	d023      	beq.n	8100446 <HAL_InitTick+0x92>
 81003fe:	68bb      	ldr	r3, [r7, #8]
 8100400:	2b02      	cmp	r3, #2
 8100402:	d82d      	bhi.n	8100460 <HAL_InitTick+0xac>
 8100404:	68bb      	ldr	r3, [r7, #8]
 8100406:	2b00      	cmp	r3, #0
 8100408:	d003      	beq.n	8100412 <HAL_InitTick+0x5e>
 810040a:	68bb      	ldr	r3, [r7, #8]
 810040c:	2b01      	cmp	r3, #1
 810040e:	d00d      	beq.n	810042c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8100410:	e026      	b.n	8100460 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8100412:	4b21      	ldr	r3, [pc, #132]	@ (8100498 <HAL_InitTick+0xe4>)
 8100414:	681a      	ldr	r2, [r3, #0]
 8100416:	4b1e      	ldr	r3, [pc, #120]	@ (8100490 <HAL_InitTick+0xdc>)
 8100418:	781b      	ldrb	r3, [r3, #0]
 810041a:	4619      	mov	r1, r3
 810041c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8100420:	fbb3 f3f1 	udiv	r3, r3, r1
 8100424:	fbb2 f3f3 	udiv	r3, r2, r3
 8100428:	60fb      	str	r3, [r7, #12]
        break;
 810042a:	e01a      	b.n	8100462 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 810042c:	4b18      	ldr	r3, [pc, #96]	@ (8100490 <HAL_InitTick+0xdc>)
 810042e:	781b      	ldrb	r3, [r3, #0]
 8100430:	461a      	mov	r2, r3
 8100432:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8100436:	fbb3 f3f2 	udiv	r3, r3, r2
 810043a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 810043e:	fbb2 f3f3 	udiv	r3, r2, r3
 8100442:	60fb      	str	r3, [r7, #12]
        break;
 8100444:	e00d      	b.n	8100462 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8100446:	4b12      	ldr	r3, [pc, #72]	@ (8100490 <HAL_InitTick+0xdc>)
 8100448:	781b      	ldrb	r3, [r3, #0]
 810044a:	461a      	mov	r2, r3
 810044c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8100450:	fbb3 f3f2 	udiv	r3, r3, r2
 8100454:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8100458:	fbb2 f3f3 	udiv	r3, r2, r3
 810045c:	60fb      	str	r3, [r7, #12]
        break;
 810045e:	e000      	b.n	8100462 <HAL_InitTick+0xae>
        break;
 8100460:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8100462:	68f8      	ldr	r0, [r7, #12]
 8100464:	f000 f8e4 	bl	8100630 <HAL_SYSTICK_Config>
 8100468:	4603      	mov	r3, r0
 810046a:	2b00      	cmp	r3, #0
 810046c:	d001      	beq.n	8100472 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 810046e:	2301      	movs	r3, #1
 8100470:	e009      	b.n	8100486 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100472:	2200      	movs	r2, #0
 8100474:	6879      	ldr	r1, [r7, #4]
 8100476:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810047a:	f000 f8bf 	bl	81005fc <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 810047e:	4a07      	ldr	r2, [pc, #28]	@ (810049c <HAL_InitTick+0xe8>)
 8100480:	687b      	ldr	r3, [r7, #4]
 8100482:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8100484:	2300      	movs	r3, #0
}
 8100486:	4618      	mov	r0, r3
 8100488:	3710      	adds	r7, #16
 810048a:	46bd      	mov	sp, r7
 810048c:	bd80      	pop	{r7, pc}
 810048e:	bf00      	nop
 8100490:	20040008 	.word	0x20040008
 8100494:	e000e010 	.word	0xe000e010
 8100498:	20040000 	.word	0x20040000
 810049c:	20040004 	.word	0x20040004

081004a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81004a0:	b480      	push	{r7}
 81004a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81004a4:	4b06      	ldr	r3, [pc, #24]	@ (81004c0 <HAL_IncTick+0x20>)
 81004a6:	781b      	ldrb	r3, [r3, #0]
 81004a8:	461a      	mov	r2, r3
 81004aa:	4b06      	ldr	r3, [pc, #24]	@ (81004c4 <HAL_IncTick+0x24>)
 81004ac:	681b      	ldr	r3, [r3, #0]
 81004ae:	4413      	add	r3, r2
 81004b0:	4a04      	ldr	r2, [pc, #16]	@ (81004c4 <HAL_IncTick+0x24>)
 81004b2:	6013      	str	r3, [r2, #0]
}
 81004b4:	bf00      	nop
 81004b6:	46bd      	mov	sp, r7
 81004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004bc:	4770      	bx	lr
 81004be:	bf00      	nop
 81004c0:	20040008 	.word	0x20040008
 81004c4:	20040028 	.word	0x20040028

081004c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81004c8:	b480      	push	{r7}
 81004ca:	b085      	sub	sp, #20
 81004cc:	af00      	add	r7, sp, #0
 81004ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81004d0:	687b      	ldr	r3, [r7, #4]
 81004d2:	f003 0307 	and.w	r3, r3, #7
 81004d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81004d8:	4b0c      	ldr	r3, [pc, #48]	@ (810050c <__NVIC_SetPriorityGrouping+0x44>)
 81004da:	68db      	ldr	r3, [r3, #12]
 81004dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81004de:	68ba      	ldr	r2, [r7, #8]
 81004e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 81004e4:	4013      	ands	r3, r2
 81004e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81004e8:	68fb      	ldr	r3, [r7, #12]
 81004ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81004ec:	68bb      	ldr	r3, [r7, #8]
 81004ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81004f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 81004f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81004f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81004fa:	4a04      	ldr	r2, [pc, #16]	@ (810050c <__NVIC_SetPriorityGrouping+0x44>)
 81004fc:	68bb      	ldr	r3, [r7, #8]
 81004fe:	60d3      	str	r3, [r2, #12]
}
 8100500:	bf00      	nop
 8100502:	3714      	adds	r7, #20
 8100504:	46bd      	mov	sp, r7
 8100506:	f85d 7b04 	ldr.w	r7, [sp], #4
 810050a:	4770      	bx	lr
 810050c:	e000ed00 	.word	0xe000ed00

08100510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100510:	b480      	push	{r7}
 8100512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100514:	4b04      	ldr	r3, [pc, #16]	@ (8100528 <__NVIC_GetPriorityGrouping+0x18>)
 8100516:	68db      	ldr	r3, [r3, #12]
 8100518:	0a1b      	lsrs	r3, r3, #8
 810051a:	f003 0307 	and.w	r3, r3, #7
}
 810051e:	4618      	mov	r0, r3
 8100520:	46bd      	mov	sp, r7
 8100522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100526:	4770      	bx	lr
 8100528:	e000ed00 	.word	0xe000ed00

0810052c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810052c:	b480      	push	{r7}
 810052e:	b083      	sub	sp, #12
 8100530:	af00      	add	r7, sp, #0
 8100532:	4603      	mov	r3, r0
 8100534:	6039      	str	r1, [r7, #0]
 8100536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8100538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 810053c:	2b00      	cmp	r3, #0
 810053e:	db0a      	blt.n	8100556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100540:	683b      	ldr	r3, [r7, #0]
 8100542:	b2da      	uxtb	r2, r3
 8100544:	490c      	ldr	r1, [pc, #48]	@ (8100578 <__NVIC_SetPriority+0x4c>)
 8100546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 810054a:	0112      	lsls	r2, r2, #4
 810054c:	b2d2      	uxtb	r2, r2
 810054e:	440b      	add	r3, r1
 8100550:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100554:	e00a      	b.n	810056c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100556:	683b      	ldr	r3, [r7, #0]
 8100558:	b2da      	uxtb	r2, r3
 810055a:	4908      	ldr	r1, [pc, #32]	@ (810057c <__NVIC_SetPriority+0x50>)
 810055c:	79fb      	ldrb	r3, [r7, #7]
 810055e:	f003 030f 	and.w	r3, r3, #15
 8100562:	3b04      	subs	r3, #4
 8100564:	0112      	lsls	r2, r2, #4
 8100566:	b2d2      	uxtb	r2, r2
 8100568:	440b      	add	r3, r1
 810056a:	761a      	strb	r2, [r3, #24]
}
 810056c:	bf00      	nop
 810056e:	370c      	adds	r7, #12
 8100570:	46bd      	mov	sp, r7
 8100572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100576:	4770      	bx	lr
 8100578:	e000e100 	.word	0xe000e100
 810057c:	e000ed00 	.word	0xe000ed00

08100580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100580:	b480      	push	{r7}
 8100582:	b089      	sub	sp, #36	@ 0x24
 8100584:	af00      	add	r7, sp, #0
 8100586:	60f8      	str	r0, [r7, #12]
 8100588:	60b9      	str	r1, [r7, #8]
 810058a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810058c:	68fb      	ldr	r3, [r7, #12]
 810058e:	f003 0307 	and.w	r3, r3, #7
 8100592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100594:	69fb      	ldr	r3, [r7, #28]
 8100596:	f1c3 0307 	rsb	r3, r3, #7
 810059a:	2b04      	cmp	r3, #4
 810059c:	bf28      	it	cs
 810059e:	2304      	movcs	r3, #4
 81005a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81005a2:	69fb      	ldr	r3, [r7, #28]
 81005a4:	3304      	adds	r3, #4
 81005a6:	2b06      	cmp	r3, #6
 81005a8:	d902      	bls.n	81005b0 <NVIC_EncodePriority+0x30>
 81005aa:	69fb      	ldr	r3, [r7, #28]
 81005ac:	3b03      	subs	r3, #3
 81005ae:	e000      	b.n	81005b2 <NVIC_EncodePriority+0x32>
 81005b0:	2300      	movs	r3, #0
 81005b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81005b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 81005b8:	69bb      	ldr	r3, [r7, #24]
 81005ba:	fa02 f303 	lsl.w	r3, r2, r3
 81005be:	43da      	mvns	r2, r3
 81005c0:	68bb      	ldr	r3, [r7, #8]
 81005c2:	401a      	ands	r2, r3
 81005c4:	697b      	ldr	r3, [r7, #20]
 81005c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81005c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 81005cc:	697b      	ldr	r3, [r7, #20]
 81005ce:	fa01 f303 	lsl.w	r3, r1, r3
 81005d2:	43d9      	mvns	r1, r3
 81005d4:	687b      	ldr	r3, [r7, #4]
 81005d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81005d8:	4313      	orrs	r3, r2
         );
}
 81005da:	4618      	mov	r0, r3
 81005dc:	3724      	adds	r7, #36	@ 0x24
 81005de:	46bd      	mov	sp, r7
 81005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005e4:	4770      	bx	lr

081005e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81005e6:	b580      	push	{r7, lr}
 81005e8:	b082      	sub	sp, #8
 81005ea:	af00      	add	r7, sp, #0
 81005ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81005ee:	6878      	ldr	r0, [r7, #4]
 81005f0:	f7ff ff6a 	bl	81004c8 <__NVIC_SetPriorityGrouping>
}
 81005f4:	bf00      	nop
 81005f6:	3708      	adds	r7, #8
 81005f8:	46bd      	mov	sp, r7
 81005fa:	bd80      	pop	{r7, pc}

081005fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81005fc:	b580      	push	{r7, lr}
 81005fe:	b086      	sub	sp, #24
 8100600:	af00      	add	r7, sp, #0
 8100602:	4603      	mov	r3, r0
 8100604:	60b9      	str	r1, [r7, #8]
 8100606:	607a      	str	r2, [r7, #4]
 8100608:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810060a:	f7ff ff81 	bl	8100510 <__NVIC_GetPriorityGrouping>
 810060e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100610:	687a      	ldr	r2, [r7, #4]
 8100612:	68b9      	ldr	r1, [r7, #8]
 8100614:	6978      	ldr	r0, [r7, #20]
 8100616:	f7ff ffb3 	bl	8100580 <NVIC_EncodePriority>
 810061a:	4602      	mov	r2, r0
 810061c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8100620:	4611      	mov	r1, r2
 8100622:	4618      	mov	r0, r3
 8100624:	f7ff ff82 	bl	810052c <__NVIC_SetPriority>
}
 8100628:	bf00      	nop
 810062a:	3718      	adds	r7, #24
 810062c:	46bd      	mov	sp, r7
 810062e:	bd80      	pop	{r7, pc}

08100630 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100630:	b480      	push	{r7}
 8100632:	b083      	sub	sp, #12
 8100634:	af00      	add	r7, sp, #0
 8100636:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100638:	687b      	ldr	r3, [r7, #4]
 810063a:	3b01      	subs	r3, #1
 810063c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8100640:	d301      	bcc.n	8100646 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8100642:	2301      	movs	r3, #1
 8100644:	e00d      	b.n	8100662 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8100646:	4a0a      	ldr	r2, [pc, #40]	@ (8100670 <HAL_SYSTICK_Config+0x40>)
 8100648:	687b      	ldr	r3, [r7, #4]
 810064a:	3b01      	subs	r3, #1
 810064c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 810064e:	4b08      	ldr	r3, [pc, #32]	@ (8100670 <HAL_SYSTICK_Config+0x40>)
 8100650:	2200      	movs	r2, #0
 8100652:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8100654:	4b06      	ldr	r3, [pc, #24]	@ (8100670 <HAL_SYSTICK_Config+0x40>)
 8100656:	681b      	ldr	r3, [r3, #0]
 8100658:	4a05      	ldr	r2, [pc, #20]	@ (8100670 <HAL_SYSTICK_Config+0x40>)
 810065a:	f043 0303 	orr.w	r3, r3, #3
 810065e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8100660:	2300      	movs	r3, #0
}
 8100662:	4618      	mov	r0, r3
 8100664:	370c      	adds	r7, #12
 8100666:	46bd      	mov	sp, r7
 8100668:	f85d 7b04 	ldr.w	r7, [sp], #4
 810066c:	4770      	bx	lr
 810066e:	bf00      	nop
 8100670:	e000e010 	.word	0xe000e010

08100674 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8100674:	b480      	push	{r7}
 8100676:	b083      	sub	sp, #12
 8100678:	af00      	add	r7, sp, #0
 810067a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 810067c:	687b      	ldr	r3, [r7, #4]
 810067e:	2b04      	cmp	r3, #4
 8100680:	d844      	bhi.n	810070c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8100682:	a201      	add	r2, pc, #4	@ (adr r2, 8100688 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8100684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100688:	081006ab 	.word	0x081006ab
 810068c:	081006c9 	.word	0x081006c9
 8100690:	081006eb 	.word	0x081006eb
 8100694:	0810070d 	.word	0x0810070d
 8100698:	0810069d 	.word	0x0810069d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 810069c:	4b1f      	ldr	r3, [pc, #124]	@ (810071c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 810069e:	681b      	ldr	r3, [r3, #0]
 81006a0:	4a1e      	ldr	r2, [pc, #120]	@ (810071c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 81006a2:	f043 0304 	orr.w	r3, r3, #4
 81006a6:	6013      	str	r3, [r2, #0]
      break;
 81006a8:	e031      	b.n	810070e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 81006aa:	4b1c      	ldr	r3, [pc, #112]	@ (810071c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 81006ac:	681b      	ldr	r3, [r3, #0]
 81006ae:	4a1b      	ldr	r2, [pc, #108]	@ (810071c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 81006b0:	f023 0304 	bic.w	r3, r3, #4
 81006b4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 81006b6:	4b1a      	ldr	r3, [pc, #104]	@ (8100720 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 81006b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006bc:	4a18      	ldr	r2, [pc, #96]	@ (8100720 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 81006be:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 81006c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 81006c6:	e022      	b.n	810070e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 81006c8:	4b14      	ldr	r3, [pc, #80]	@ (810071c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 81006ca:	681b      	ldr	r3, [r3, #0]
 81006cc:	4a13      	ldr	r2, [pc, #76]	@ (810071c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 81006ce:	f023 0304 	bic.w	r3, r3, #4
 81006d2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 81006d4:	4b12      	ldr	r3, [pc, #72]	@ (8100720 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 81006d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006da:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 81006de:	4a10      	ldr	r2, [pc, #64]	@ (8100720 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 81006e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81006e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 81006e8:	e011      	b.n	810070e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 81006ea:	4b0c      	ldr	r3, [pc, #48]	@ (810071c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 81006ec:	681b      	ldr	r3, [r3, #0]
 81006ee:	4a0b      	ldr	r2, [pc, #44]	@ (810071c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 81006f0:	f023 0304 	bic.w	r3, r3, #4
 81006f4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 81006f6:	4b0a      	ldr	r3, [pc, #40]	@ (8100720 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 81006f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006fc:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8100700:	4a07      	ldr	r2, [pc, #28]	@ (8100720 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8100702:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8100706:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 810070a:	e000      	b.n	810070e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 810070c:	bf00      	nop
  }
}
 810070e:	bf00      	nop
 8100710:	370c      	adds	r7, #12
 8100712:	46bd      	mov	sp, r7
 8100714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100718:	4770      	bx	lr
 810071a:	bf00      	nop
 810071c:	e000e010 	.word	0xe000e010
 8100720:	46020c00 	.word	0x46020c00

08100724 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8100724:	b480      	push	{r7}
 8100726:	b083      	sub	sp, #12
 8100728:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 810072a:	4b19      	ldr	r3, [pc, #100]	@ (8100790 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 810072c:	681b      	ldr	r3, [r3, #0]
 810072e:	f003 0304 	and.w	r3, r3, #4
 8100732:	2b00      	cmp	r3, #0
 8100734:	d002      	beq.n	810073c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8100736:	2304      	movs	r3, #4
 8100738:	607b      	str	r3, [r7, #4]
 810073a:	e021      	b.n	8100780 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 810073c:	4b15      	ldr	r3, [pc, #84]	@ (8100794 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 810073e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100742:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8100746:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8100748:	683b      	ldr	r3, [r7, #0]
 810074a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810074e:	d011      	beq.n	8100774 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8100750:	683b      	ldr	r3, [r7, #0]
 8100752:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8100756:	d810      	bhi.n	810077a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8100758:	683b      	ldr	r3, [r7, #0]
 810075a:	2b00      	cmp	r3, #0
 810075c:	d004      	beq.n	8100768 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 810075e:	683b      	ldr	r3, [r7, #0]
 8100760:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8100764:	d003      	beq.n	810076e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8100766:	e008      	b.n	810077a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8100768:	2300      	movs	r3, #0
 810076a:	607b      	str	r3, [r7, #4]
        break;
 810076c:	e008      	b.n	8100780 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 810076e:	2301      	movs	r3, #1
 8100770:	607b      	str	r3, [r7, #4]
        break;
 8100772:	e005      	b.n	8100780 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8100774:	2302      	movs	r3, #2
 8100776:	607b      	str	r3, [r7, #4]
        break;
 8100778:	e002      	b.n	8100780 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 810077a:	2300      	movs	r3, #0
 810077c:	607b      	str	r3, [r7, #4]
        break;
 810077e:	bf00      	nop
    }
  }
  return systick_source;
 8100780:	687b      	ldr	r3, [r7, #4]
}
 8100782:	4618      	mov	r0, r3
 8100784:	370c      	adds	r7, #12
 8100786:	46bd      	mov	sp, r7
 8100788:	f85d 7b04 	ldr.w	r7, [sp], #4
 810078c:	4770      	bx	lr
 810078e:	bf00      	nop
 8100790:	e000e010 	.word	0xe000e010
 8100794:	46020c00 	.word	0x46020c00

08100798 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8100798:	b480      	push	{r7}
 810079a:	b08b      	sub	sp, #44	@ 0x2c
 810079c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 810079e:	2300      	movs	r3, #0
 81007a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 81007a2:	2300      	movs	r3, #0
 81007a4:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 81007a6:	4b78      	ldr	r3, [pc, #480]	@ (8100988 <HAL_RCC_GetSysClockFreq+0x1f0>)
 81007a8:	69db      	ldr	r3, [r3, #28]
 81007aa:	f003 030c 	and.w	r3, r3, #12
 81007ae:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 81007b0:	4b75      	ldr	r3, [pc, #468]	@ (8100988 <HAL_RCC_GetSysClockFreq+0x1f0>)
 81007b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81007b4:	f003 0303 	and.w	r3, r3, #3
 81007b8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 81007ba:	69bb      	ldr	r3, [r7, #24]
 81007bc:	2b00      	cmp	r3, #0
 81007be:	d005      	beq.n	81007cc <HAL_RCC_GetSysClockFreq+0x34>
 81007c0:	69bb      	ldr	r3, [r7, #24]
 81007c2:	2b0c      	cmp	r3, #12
 81007c4:	d121      	bne.n	810080a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 81007c6:	697b      	ldr	r3, [r7, #20]
 81007c8:	2b01      	cmp	r3, #1
 81007ca:	d11e      	bne.n	810080a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 81007cc:	4b6e      	ldr	r3, [pc, #440]	@ (8100988 <HAL_RCC_GetSysClockFreq+0x1f0>)
 81007ce:	689b      	ldr	r3, [r3, #8]
 81007d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81007d4:	2b00      	cmp	r3, #0
 81007d6:	d107      	bne.n	81007e8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 81007d8:	4b6b      	ldr	r3, [pc, #428]	@ (8100988 <HAL_RCC_GetSysClockFreq+0x1f0>)
 81007da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81007de:	0b1b      	lsrs	r3, r3, #12
 81007e0:	f003 030f 	and.w	r3, r3, #15
 81007e4:	627b      	str	r3, [r7, #36]	@ 0x24
 81007e6:	e005      	b.n	81007f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 81007e8:	4b67      	ldr	r3, [pc, #412]	@ (8100988 <HAL_RCC_GetSysClockFreq+0x1f0>)
 81007ea:	689b      	ldr	r3, [r3, #8]
 81007ec:	0f1b      	lsrs	r3, r3, #28
 81007ee:	f003 030f 	and.w	r3, r3, #15
 81007f2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 81007f4:	4a65      	ldr	r2, [pc, #404]	@ (810098c <HAL_RCC_GetSysClockFreq+0x1f4>)
 81007f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81007f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81007fc:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 81007fe:	69bb      	ldr	r3, [r7, #24]
 8100800:	2b00      	cmp	r3, #0
 8100802:	d110      	bne.n	8100826 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8100804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8100806:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8100808:	e00d      	b.n	8100826 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 810080a:	4b5f      	ldr	r3, [pc, #380]	@ (8100988 <HAL_RCC_GetSysClockFreq+0x1f0>)
 810080c:	69db      	ldr	r3, [r3, #28]
 810080e:	f003 030c 	and.w	r3, r3, #12
 8100812:	2b04      	cmp	r3, #4
 8100814:	d102      	bne.n	810081c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8100816:	4b5e      	ldr	r3, [pc, #376]	@ (8100990 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8100818:	623b      	str	r3, [r7, #32]
 810081a:	e004      	b.n	8100826 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 810081c:	69bb      	ldr	r3, [r7, #24]
 810081e:	2b08      	cmp	r3, #8
 8100820:	d101      	bne.n	8100826 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8100822:	4b5b      	ldr	r3, [pc, #364]	@ (8100990 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8100824:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8100826:	69bb      	ldr	r3, [r7, #24]
 8100828:	2b0c      	cmp	r3, #12
 810082a:	f040 80a5 	bne.w	8100978 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 810082e:	4b56      	ldr	r3, [pc, #344]	@ (8100988 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8100830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8100832:	f003 0303 	and.w	r3, r3, #3
 8100836:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8100838:	4b53      	ldr	r3, [pc, #332]	@ (8100988 <HAL_RCC_GetSysClockFreq+0x1f0>)
 810083a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810083c:	0a1b      	lsrs	r3, r3, #8
 810083e:	f003 030f 	and.w	r3, r3, #15
 8100842:	3301      	adds	r3, #1
 8100844:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8100846:	4b50      	ldr	r3, [pc, #320]	@ (8100988 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8100848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810084a:	091b      	lsrs	r3, r3, #4
 810084c:	f003 0301 	and.w	r3, r3, #1
 8100850:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8100852:	4b4d      	ldr	r3, [pc, #308]	@ (8100988 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8100854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8100856:	08db      	lsrs	r3, r3, #3
 8100858:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810085c:	68ba      	ldr	r2, [r7, #8]
 810085e:	fb02 f303 	mul.w	r3, r2, r3
 8100862:	ee07 3a90 	vmov	s15, r3
 8100866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810086a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 810086e:	693b      	ldr	r3, [r7, #16]
 8100870:	2b02      	cmp	r3, #2
 8100872:	d003      	beq.n	810087c <HAL_RCC_GetSysClockFreq+0xe4>
 8100874:	693b      	ldr	r3, [r7, #16]
 8100876:	2b03      	cmp	r3, #3
 8100878:	d022      	beq.n	81008c0 <HAL_RCC_GetSysClockFreq+0x128>
 810087a:	e043      	b.n	8100904 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 810087c:	68fb      	ldr	r3, [r7, #12]
 810087e:	ee07 3a90 	vmov	s15, r3
 8100882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100886:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8100994 <HAL_RCC_GetSysClockFreq+0x1fc>
 810088a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810088e:	4b3e      	ldr	r3, [pc, #248]	@ (8100988 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8100890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8100892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100896:	ee07 3a90 	vmov	s15, r3
 810089a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 810089e:	ed97 6a01 	vldr	s12, [r7, #4]
 81008a2:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8100998 <HAL_RCC_GetSysClockFreq+0x200>
 81008a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 81008aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 81008ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81008b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 81008b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81008ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81008be:	e046      	b.n	810094e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 81008c0:	68fb      	ldr	r3, [r7, #12]
 81008c2:	ee07 3a90 	vmov	s15, r3
 81008c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81008ca:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8100994 <HAL_RCC_GetSysClockFreq+0x1fc>
 81008ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81008d2:	4b2d      	ldr	r3, [pc, #180]	@ (8100988 <HAL_RCC_GetSysClockFreq+0x1f0>)
 81008d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81008d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81008da:	ee07 3a90 	vmov	s15, r3
 81008de:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 81008e2:	ed97 6a01 	vldr	s12, [r7, #4]
 81008e6:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8100998 <HAL_RCC_GetSysClockFreq+0x200>
 81008ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 81008ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 81008f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81008f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 81008fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81008fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100902:	e024      	b.n	810094e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8100904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8100906:	ee07 3a90 	vmov	s15, r3
 810090a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810090e:	68fb      	ldr	r3, [r7, #12]
 8100910:	ee07 3a90 	vmov	s15, r3
 8100914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100918:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810091c:	4b1a      	ldr	r3, [pc, #104]	@ (8100988 <HAL_RCC_GetSysClockFreq+0x1f0>)
 810091e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8100920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100924:	ee07 3a90 	vmov	s15, r3
 8100928:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 810092c:	ed97 6a01 	vldr	s12, [r7, #4]
 8100930:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8100998 <HAL_RCC_GetSysClockFreq+0x200>
 8100934:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8100938:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 810093c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8100940:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8100944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100948:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810094c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 810094e:	4b0e      	ldr	r3, [pc, #56]	@ (8100988 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8100950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8100952:	0e1b      	lsrs	r3, r3, #24
 8100954:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8100958:	3301      	adds	r3, #1
 810095a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 810095c:	683b      	ldr	r3, [r7, #0]
 810095e:	ee07 3a90 	vmov	s15, r3
 8100962:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8100966:	edd7 6a07 	vldr	s13, [r7, #28]
 810096a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810096e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8100972:	ee17 3a90 	vmov	r3, s15
 8100976:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8100978:	6a3b      	ldr	r3, [r7, #32]
}
 810097a:	4618      	mov	r0, r3
 810097c:	372c      	adds	r7, #44	@ 0x2c
 810097e:	46bd      	mov	sp, r7
 8100980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100984:	4770      	bx	lr
 8100986:	bf00      	nop
 8100988:	46020c00 	.word	0x46020c00
 810098c:	08100a0c 	.word	0x08100a0c
 8100990:	00f42400 	.word	0x00f42400
 8100994:	4b742400 	.word	0x4b742400
 8100998:	46000000 	.word	0x46000000

0810099c <__libc_init_array>:
 810099c:	b570      	push	{r4, r5, r6, lr}
 810099e:	4d0d      	ldr	r5, [pc, #52]	@ (81009d4 <__libc_init_array+0x38>)
 81009a0:	2600      	movs	r6, #0
 81009a2:	4c0d      	ldr	r4, [pc, #52]	@ (81009d8 <__libc_init_array+0x3c>)
 81009a4:	1b64      	subs	r4, r4, r5
 81009a6:	10a4      	asrs	r4, r4, #2
 81009a8:	42a6      	cmp	r6, r4
 81009aa:	d109      	bne.n	81009c0 <__libc_init_array+0x24>
 81009ac:	4d0b      	ldr	r5, [pc, #44]	@ (81009dc <__libc_init_array+0x40>)
 81009ae:	2600      	movs	r6, #0
 81009b0:	4c0b      	ldr	r4, [pc, #44]	@ (81009e0 <__libc_init_array+0x44>)
 81009b2:	f000 f817 	bl	81009e4 <_init>
 81009b6:	1b64      	subs	r4, r4, r5
 81009b8:	10a4      	asrs	r4, r4, #2
 81009ba:	42a6      	cmp	r6, r4
 81009bc:	d105      	bne.n	81009ca <__libc_init_array+0x2e>
 81009be:	bd70      	pop	{r4, r5, r6, pc}
 81009c0:	f855 3b04 	ldr.w	r3, [r5], #4
 81009c4:	3601      	adds	r6, #1
 81009c6:	4798      	blx	r3
 81009c8:	e7ee      	b.n	81009a8 <__libc_init_array+0xc>
 81009ca:	f855 3b04 	ldr.w	r3, [r5], #4
 81009ce:	3601      	adds	r6, #1
 81009d0:	4798      	blx	r3
 81009d2:	e7f2      	b.n	81009ba <__libc_init_array+0x1e>
 81009d4:	08100a4c 	.word	0x08100a4c
 81009d8:	08100a4c 	.word	0x08100a4c
 81009dc:	08100a4c 	.word	0x08100a4c
 81009e0:	08100a50 	.word	0x08100a50

081009e4 <_init>:
 81009e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81009e6:	bf00      	nop
 81009e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81009ea:	bc08      	pop	{r3}
 81009ec:	469e      	mov	lr, r3
 81009ee:	4770      	bx	lr

081009f0 <_fini>:
 81009f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81009f2:	bf00      	nop
 81009f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81009f6:	bc08      	pop	{r3}
 81009f8:	469e      	mov	lr, r3
 81009fa:	4770      	bx	lr
