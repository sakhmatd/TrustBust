
trustbust_firmware_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  0c000000  0c000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d78  0c000238  0c000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0c006fb0  0c006fb0  00007fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0c0070b0  0c0070b0  000080b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0c0070b8  0c0070b8  000080b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0c0070bc  0c0070bc  000080bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000111  30000000  0c0070c0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .gnu.sgstubs  00000020  0c0fe000  0c0fe000  0000a000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .bss          000000cc  30000114  30000114  0000a114  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  300001e0  300001e0  0000a114  2**0
                  ALLOC
 10 .ARM.attributes 00000036  00000000  00000000  0000a020  2**0
                  CONTENTS, READONLY
 11 .debug_info   00010acd  00000000  00000000  0000a056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000212f  00000000  00000000  0001ab23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000d28  00000000  00000000  0001cc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000a2d  00000000  00000000  0001d980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000330b6  00000000  00000000  0001e3ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000109d3  00000000  00000000  00051463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013fb07  00000000  00000000  00061e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001a193d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003648  00000000  00000000  001a1980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000067  00000000  00000000  001a4fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c000238 <__do_global_dtors_aux>:
 c000238:	b510      	push	{r4, lr}
 c00023a:	4c05      	ldr	r4, [pc, #20]	@ (c000250 <__do_global_dtors_aux+0x18>)
 c00023c:	7823      	ldrb	r3, [r4, #0]
 c00023e:	b933      	cbnz	r3, c00024e <__do_global_dtors_aux+0x16>
 c000240:	4b04      	ldr	r3, [pc, #16]	@ (c000254 <__do_global_dtors_aux+0x1c>)
 c000242:	b113      	cbz	r3, c00024a <__do_global_dtors_aux+0x12>
 c000244:	4804      	ldr	r0, [pc, #16]	@ (c000258 <__do_global_dtors_aux+0x20>)
 c000246:	f3af 8000 	nop.w
 c00024a:	2301      	movs	r3, #1
 c00024c:	7023      	strb	r3, [r4, #0]
 c00024e:	bd10      	pop	{r4, pc}
 c000250:	30000114 	.word	0x30000114
 c000254:	00000000 	.word	0x00000000
 c000258:	0c006f98 	.word	0x0c006f98

0c00025c <frame_dummy>:
 c00025c:	b508      	push	{r3, lr}
 c00025e:	4b03      	ldr	r3, [pc, #12]	@ (c00026c <frame_dummy+0x10>)
 c000260:	b11b      	cbz	r3, c00026a <frame_dummy+0xe>
 c000262:	4903      	ldr	r1, [pc, #12]	@ (c000270 <frame_dummy+0x14>)
 c000264:	4803      	ldr	r0, [pc, #12]	@ (c000274 <frame_dummy+0x18>)
 c000266:	f3af 8000 	nop.w
 c00026a:	bd08      	pop	{r3, pc}
 c00026c:	00000000 	.word	0x00000000
 c000270:	30000118 	.word	0x30000118
 c000274:	0c006f98 	.word	0x0c006f98

0c000278 <__gnu_cmse_nonsecure_call>:
 c000278:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c00027c:	4627      	mov	r7, r4
 c00027e:	46a0      	mov	r8, r4
 c000280:	46a1      	mov	r9, r4
 c000282:	46a2      	mov	sl, r4
 c000284:	46a3      	mov	fp, r4
 c000286:	46a4      	mov	ip, r4
 c000288:	ed2d 8b10 	vpush	{d8-d15}
 c00028c:	f04f 0500 	mov.w	r5, #0
 c000290:	ec45 5b18 	vmov	d8, r5, r5
 c000294:	ec45 5a19 	vmov	s18, s19, r5, r5
 c000298:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c00029c:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c0002a0:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c0002a4:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c0002a8:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c0002ac:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c0002b0:	eef1 5a10 	vmrs	r5, fpscr
 c0002b4:	f64f 7660 	movw	r6, #65376	@ 0xff60
 c0002b8:	f6c0 76ff 	movt	r6, #4095	@ 0xfff
 c0002bc:	4035      	ands	r5, r6
 c0002be:	eee1 5a10 	vmsr	fpscr, r5
 c0002c2:	f384 8800 	msr	CPSR_f, r4
 c0002c6:	4625      	mov	r5, r4
 c0002c8:	4626      	mov	r6, r4
 c0002ca:	47a4      	blxns	r4
 c0002cc:	ecbd 8b10 	vpop	{d8-d15}
 c0002d0:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c0002d4 <__aeabi_uldivmod>:
 c0002d4:	b953      	cbnz	r3, c0002ec <__aeabi_uldivmod+0x18>
 c0002d6:	b94a      	cbnz	r2, c0002ec <__aeabi_uldivmod+0x18>
 c0002d8:	2900      	cmp	r1, #0
 c0002da:	bf08      	it	eq
 c0002dc:	2800      	cmpeq	r0, #0
 c0002de:	bf1c      	itt	ne
 c0002e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 c0002e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 c0002e8:	f000 b9b0 	b.w	c00064c <__aeabi_idiv0>
 c0002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 c0002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 c0002f4:	f000 f806 	bl	c000304 <__udivmoddi4>
 c0002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 c0002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c000300:	b004      	add	sp, #16
 c000302:	4770      	bx	lr

0c000304 <__udivmoddi4>:
 c000304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c000308:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 c00030a:	4688      	mov	r8, r1
 c00030c:	4604      	mov	r4, r0
 c00030e:	468e      	mov	lr, r1
 c000310:	2b00      	cmp	r3, #0
 c000312:	d14a      	bne.n	c0003aa <__udivmoddi4+0xa6>
 c000314:	428a      	cmp	r2, r1
 c000316:	4617      	mov	r7, r2
 c000318:	d95f      	bls.n	c0003da <__udivmoddi4+0xd6>
 c00031a:	fab2 f682 	clz	r6, r2
 c00031e:	b14e      	cbz	r6, c000334 <__udivmoddi4+0x30>
 c000320:	f1c6 0320 	rsb	r3, r6, #32
 c000324:	fa01 fe06 	lsl.w	lr, r1, r6
 c000328:	40b7      	lsls	r7, r6
 c00032a:	40b4      	lsls	r4, r6
 c00032c:	fa20 f303 	lsr.w	r3, r0, r3
 c000330:	ea43 0e0e 	orr.w	lr, r3, lr
 c000334:	ea4f 4817 	mov.w	r8, r7, lsr #16
 c000338:	fa1f fc87 	uxth.w	ip, r7
 c00033c:	0c23      	lsrs	r3, r4, #16
 c00033e:	fbbe f1f8 	udiv	r1, lr, r8
 c000342:	fb08 ee11 	mls	lr, r8, r1, lr
 c000346:	fb01 f20c 	mul.w	r2, r1, ip
 c00034a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 c00034e:	429a      	cmp	r2, r3
 c000350:	d907      	bls.n	c000362 <__udivmoddi4+0x5e>
 c000352:	18fb      	adds	r3, r7, r3
 c000354:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 c000358:	d202      	bcs.n	c000360 <__udivmoddi4+0x5c>
 c00035a:	429a      	cmp	r2, r3
 c00035c:	f200 8154 	bhi.w	c000608 <__udivmoddi4+0x304>
 c000360:	4601      	mov	r1, r0
 c000362:	1a9b      	subs	r3, r3, r2
 c000364:	b2a2      	uxth	r2, r4
 c000366:	fbb3 f0f8 	udiv	r0, r3, r8
 c00036a:	fb08 3310 	mls	r3, r8, r0, r3
 c00036e:	fb00 fc0c 	mul.w	ip, r0, ip
 c000372:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 c000376:	4594      	cmp	ip, r2
 c000378:	d90b      	bls.n	c000392 <__udivmoddi4+0x8e>
 c00037a:	18ba      	adds	r2, r7, r2
 c00037c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 c000380:	bf2c      	ite	cs
 c000382:	2401      	movcs	r4, #1
 c000384:	2400      	movcc	r4, #0
 c000386:	4594      	cmp	ip, r2
 c000388:	d902      	bls.n	c000390 <__udivmoddi4+0x8c>
 c00038a:	2c00      	cmp	r4, #0
 c00038c:	f000 813f 	beq.w	c00060e <__udivmoddi4+0x30a>
 c000390:	4618      	mov	r0, r3
 c000392:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 c000396:	eba2 020c 	sub.w	r2, r2, ip
 c00039a:	2100      	movs	r1, #0
 c00039c:	b11d      	cbz	r5, c0003a6 <__udivmoddi4+0xa2>
 c00039e:	40f2      	lsrs	r2, r6
 c0003a0:	2300      	movs	r3, #0
 c0003a2:	e9c5 2300 	strd	r2, r3, [r5]
 c0003a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c0003aa:	428b      	cmp	r3, r1
 c0003ac:	d905      	bls.n	c0003ba <__udivmoddi4+0xb6>
 c0003ae:	b10d      	cbz	r5, c0003b4 <__udivmoddi4+0xb0>
 c0003b0:	e9c5 0100 	strd	r0, r1, [r5]
 c0003b4:	2100      	movs	r1, #0
 c0003b6:	4608      	mov	r0, r1
 c0003b8:	e7f5      	b.n	c0003a6 <__udivmoddi4+0xa2>
 c0003ba:	fab3 f183 	clz	r1, r3
 c0003be:	2900      	cmp	r1, #0
 c0003c0:	d14e      	bne.n	c000460 <__udivmoddi4+0x15c>
 c0003c2:	4543      	cmp	r3, r8
 c0003c4:	f0c0 8112 	bcc.w	c0005ec <__udivmoddi4+0x2e8>
 c0003c8:	4282      	cmp	r2, r0
 c0003ca:	f240 810f 	bls.w	c0005ec <__udivmoddi4+0x2e8>
 c0003ce:	4608      	mov	r0, r1
 c0003d0:	2d00      	cmp	r5, #0
 c0003d2:	d0e8      	beq.n	c0003a6 <__udivmoddi4+0xa2>
 c0003d4:	e9c5 4e00 	strd	r4, lr, [r5]
 c0003d8:	e7e5      	b.n	c0003a6 <__udivmoddi4+0xa2>
 c0003da:	2a00      	cmp	r2, #0
 c0003dc:	f000 80ac 	beq.w	c000538 <__udivmoddi4+0x234>
 c0003e0:	fab2 f682 	clz	r6, r2
 c0003e4:	2e00      	cmp	r6, #0
 c0003e6:	f040 80bb 	bne.w	c000560 <__udivmoddi4+0x25c>
 c0003ea:	1a8b      	subs	r3, r1, r2
 c0003ec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 c0003f0:	b2bc      	uxth	r4, r7
 c0003f2:	2101      	movs	r1, #1
 c0003f4:	0c02      	lsrs	r2, r0, #16
 c0003f6:	b280      	uxth	r0, r0
 c0003f8:	fbb3 fcfe 	udiv	ip, r3, lr
 c0003fc:	fb0e 331c 	mls	r3, lr, ip, r3
 c000400:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 c000404:	fb04 f20c 	mul.w	r2, r4, ip
 c000408:	429a      	cmp	r2, r3
 c00040a:	d90e      	bls.n	c00042a <__udivmoddi4+0x126>
 c00040c:	18fb      	adds	r3, r7, r3
 c00040e:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 c000412:	bf2c      	ite	cs
 c000414:	f04f 0901 	movcs.w	r9, #1
 c000418:	f04f 0900 	movcc.w	r9, #0
 c00041c:	429a      	cmp	r2, r3
 c00041e:	d903      	bls.n	c000428 <__udivmoddi4+0x124>
 c000420:	f1b9 0f00 	cmp.w	r9, #0
 c000424:	f000 80ec 	beq.w	c000600 <__udivmoddi4+0x2fc>
 c000428:	46c4      	mov	ip, r8
 c00042a:	1a9b      	subs	r3, r3, r2
 c00042c:	fbb3 f8fe 	udiv	r8, r3, lr
 c000430:	fb0e 3318 	mls	r3, lr, r8, r3
 c000434:	fb04 f408 	mul.w	r4, r4, r8
 c000438:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 c00043c:	4294      	cmp	r4, r2
 c00043e:	d90b      	bls.n	c000458 <__udivmoddi4+0x154>
 c000440:	18ba      	adds	r2, r7, r2
 c000442:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 c000446:	bf2c      	ite	cs
 c000448:	2001      	movcs	r0, #1
 c00044a:	2000      	movcc	r0, #0
 c00044c:	4294      	cmp	r4, r2
 c00044e:	d902      	bls.n	c000456 <__udivmoddi4+0x152>
 c000450:	2800      	cmp	r0, #0
 c000452:	f000 80d1 	beq.w	c0005f8 <__udivmoddi4+0x2f4>
 c000456:	4698      	mov	r8, r3
 c000458:	1b12      	subs	r2, r2, r4
 c00045a:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 c00045e:	e79d      	b.n	c00039c <__udivmoddi4+0x98>
 c000460:	f1c1 0620 	rsb	r6, r1, #32
 c000464:	408b      	lsls	r3, r1
 c000466:	fa08 f401 	lsl.w	r4, r8, r1
 c00046a:	fa00 f901 	lsl.w	r9, r0, r1
 c00046e:	fa22 f706 	lsr.w	r7, r2, r6
 c000472:	fa28 f806 	lsr.w	r8, r8, r6
 c000476:	408a      	lsls	r2, r1
 c000478:	431f      	orrs	r7, r3
 c00047a:	fa20 f306 	lsr.w	r3, r0, r6
 c00047e:	0c38      	lsrs	r0, r7, #16
 c000480:	4323      	orrs	r3, r4
 c000482:	fa1f fc87 	uxth.w	ip, r7
 c000486:	0c1c      	lsrs	r4, r3, #16
 c000488:	fbb8 fef0 	udiv	lr, r8, r0
 c00048c:	fb00 881e 	mls	r8, r0, lr, r8
 c000490:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 c000494:	fb0e f80c 	mul.w	r8, lr, ip
 c000498:	45a0      	cmp	r8, r4
 c00049a:	d90e      	bls.n	c0004ba <__udivmoddi4+0x1b6>
 c00049c:	193c      	adds	r4, r7, r4
 c00049e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 c0004a2:	bf2c      	ite	cs
 c0004a4:	f04f 0b01 	movcs.w	fp, #1
 c0004a8:	f04f 0b00 	movcc.w	fp, #0
 c0004ac:	45a0      	cmp	r8, r4
 c0004ae:	d903      	bls.n	c0004b8 <__udivmoddi4+0x1b4>
 c0004b0:	f1bb 0f00 	cmp.w	fp, #0
 c0004b4:	f000 80b8 	beq.w	c000628 <__udivmoddi4+0x324>
 c0004b8:	46d6      	mov	lr, sl
 c0004ba:	eba4 0408 	sub.w	r4, r4, r8
 c0004be:	fa1f f883 	uxth.w	r8, r3
 c0004c2:	fbb4 f3f0 	udiv	r3, r4, r0
 c0004c6:	fb00 4413 	mls	r4, r0, r3, r4
 c0004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 c0004ce:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 c0004d2:	45a4      	cmp	ip, r4
 c0004d4:	d90e      	bls.n	c0004f4 <__udivmoddi4+0x1f0>
 c0004d6:	193c      	adds	r4, r7, r4
 c0004d8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 c0004dc:	bf2c      	ite	cs
 c0004de:	f04f 0801 	movcs.w	r8, #1
 c0004e2:	f04f 0800 	movcc.w	r8, #0
 c0004e6:	45a4      	cmp	ip, r4
 c0004e8:	d903      	bls.n	c0004f2 <__udivmoddi4+0x1ee>
 c0004ea:	f1b8 0f00 	cmp.w	r8, #0
 c0004ee:	f000 809f 	beq.w	c000630 <__udivmoddi4+0x32c>
 c0004f2:	4603      	mov	r3, r0
 c0004f4:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 c0004f8:	eba4 040c 	sub.w	r4, r4, ip
 c0004fc:	fba0 ec02 	umull	lr, ip, r0, r2
 c000500:	4564      	cmp	r4, ip
 c000502:	4673      	mov	r3, lr
 c000504:	46e0      	mov	r8, ip
 c000506:	d302      	bcc.n	c00050e <__udivmoddi4+0x20a>
 c000508:	d107      	bne.n	c00051a <__udivmoddi4+0x216>
 c00050a:	45f1      	cmp	r9, lr
 c00050c:	d205      	bcs.n	c00051a <__udivmoddi4+0x216>
 c00050e:	ebbe 0302 	subs.w	r3, lr, r2
 c000512:	eb6c 0c07 	sbc.w	ip, ip, r7
 c000516:	3801      	subs	r0, #1
 c000518:	46e0      	mov	r8, ip
 c00051a:	b15d      	cbz	r5, c000534 <__udivmoddi4+0x230>
 c00051c:	ebb9 0203 	subs.w	r2, r9, r3
 c000520:	eb64 0408 	sbc.w	r4, r4, r8
 c000524:	fa04 f606 	lsl.w	r6, r4, r6
 c000528:	fa22 f301 	lsr.w	r3, r2, r1
 c00052c:	40cc      	lsrs	r4, r1
 c00052e:	431e      	orrs	r6, r3
 c000530:	e9c5 6400 	strd	r6, r4, [r5]
 c000534:	2100      	movs	r1, #0
 c000536:	e736      	b.n	c0003a6 <__udivmoddi4+0xa2>
 c000538:	fbb1 fcf2 	udiv	ip, r1, r2
 c00053c:	0c01      	lsrs	r1, r0, #16
 c00053e:	4614      	mov	r4, r2
 c000540:	b280      	uxth	r0, r0
 c000542:	4696      	mov	lr, r2
 c000544:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 c000548:	2620      	movs	r6, #32
 c00054a:	4690      	mov	r8, r2
 c00054c:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 c000550:	4610      	mov	r0, r2
 c000552:	fbb1 f1f2 	udiv	r1, r1, r2
 c000556:	eba3 0308 	sub.w	r3, r3, r8
 c00055a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 c00055e:	e74b      	b.n	c0003f8 <__udivmoddi4+0xf4>
 c000560:	40b7      	lsls	r7, r6
 c000562:	f1c6 0320 	rsb	r3, r6, #32
 c000566:	fa01 f206 	lsl.w	r2, r1, r6
 c00056a:	fa21 f803 	lsr.w	r8, r1, r3
 c00056e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 c000572:	fa20 f303 	lsr.w	r3, r0, r3
 c000576:	b2bc      	uxth	r4, r7
 c000578:	40b0      	lsls	r0, r6
 c00057a:	4313      	orrs	r3, r2
 c00057c:	0c02      	lsrs	r2, r0, #16
 c00057e:	0c19      	lsrs	r1, r3, #16
 c000580:	b280      	uxth	r0, r0
 c000582:	fbb8 f9fe 	udiv	r9, r8, lr
 c000586:	fb0e 8819 	mls	r8, lr, r9, r8
 c00058a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 c00058e:	fb09 f804 	mul.w	r8, r9, r4
 c000592:	4588      	cmp	r8, r1
 c000594:	d951      	bls.n	c00063a <__udivmoddi4+0x336>
 c000596:	1879      	adds	r1, r7, r1
 c000598:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
 c00059c:	bf2c      	ite	cs
 c00059e:	f04f 0a01 	movcs.w	sl, #1
 c0005a2:	f04f 0a00 	movcc.w	sl, #0
 c0005a6:	4588      	cmp	r8, r1
 c0005a8:	d902      	bls.n	c0005b0 <__udivmoddi4+0x2ac>
 c0005aa:	f1ba 0f00 	cmp.w	sl, #0
 c0005ae:	d031      	beq.n	c000614 <__udivmoddi4+0x310>
 c0005b0:	eba1 0108 	sub.w	r1, r1, r8
 c0005b4:	fbb1 f9fe 	udiv	r9, r1, lr
 c0005b8:	fb09 f804 	mul.w	r8, r9, r4
 c0005bc:	fb0e 1119 	mls	r1, lr, r9, r1
 c0005c0:	b29b      	uxth	r3, r3
 c0005c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 c0005c6:	4543      	cmp	r3, r8
 c0005c8:	d235      	bcs.n	c000636 <__udivmoddi4+0x332>
 c0005ca:	18fb      	adds	r3, r7, r3
 c0005cc:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 c0005d0:	bf2c      	ite	cs
 c0005d2:	f04f 0a01 	movcs.w	sl, #1
 c0005d6:	f04f 0a00 	movcc.w	sl, #0
 c0005da:	4543      	cmp	r3, r8
 c0005dc:	d2bb      	bcs.n	c000556 <__udivmoddi4+0x252>
 c0005de:	f1ba 0f00 	cmp.w	sl, #0
 c0005e2:	d1b8      	bne.n	c000556 <__udivmoddi4+0x252>
 c0005e4:	f1a9 0102 	sub.w	r1, r9, #2
 c0005e8:	443b      	add	r3, r7
 c0005ea:	e7b4      	b.n	c000556 <__udivmoddi4+0x252>
 c0005ec:	1a84      	subs	r4, r0, r2
 c0005ee:	eb68 0203 	sbc.w	r2, r8, r3
 c0005f2:	2001      	movs	r0, #1
 c0005f4:	4696      	mov	lr, r2
 c0005f6:	e6eb      	b.n	c0003d0 <__udivmoddi4+0xcc>
 c0005f8:	443a      	add	r2, r7
 c0005fa:	f1a8 0802 	sub.w	r8, r8, #2
 c0005fe:	e72b      	b.n	c000458 <__udivmoddi4+0x154>
 c000600:	f1ac 0c02 	sub.w	ip, ip, #2
 c000604:	443b      	add	r3, r7
 c000606:	e710      	b.n	c00042a <__udivmoddi4+0x126>
 c000608:	3902      	subs	r1, #2
 c00060a:	443b      	add	r3, r7
 c00060c:	e6a9      	b.n	c000362 <__udivmoddi4+0x5e>
 c00060e:	443a      	add	r2, r7
 c000610:	3802      	subs	r0, #2
 c000612:	e6be      	b.n	c000392 <__udivmoddi4+0x8e>
 c000614:	eba7 0808 	sub.w	r8, r7, r8
 c000618:	f1a9 0c02 	sub.w	ip, r9, #2
 c00061c:	4441      	add	r1, r8
 c00061e:	fbb1 f9fe 	udiv	r9, r1, lr
 c000622:	fb09 f804 	mul.w	r8, r9, r4
 c000626:	e7c9      	b.n	c0005bc <__udivmoddi4+0x2b8>
 c000628:	f1ae 0e02 	sub.w	lr, lr, #2
 c00062c:	443c      	add	r4, r7
 c00062e:	e744      	b.n	c0004ba <__udivmoddi4+0x1b6>
 c000630:	3b02      	subs	r3, #2
 c000632:	443c      	add	r4, r7
 c000634:	e75e      	b.n	c0004f4 <__udivmoddi4+0x1f0>
 c000636:	4649      	mov	r1, r9
 c000638:	e78d      	b.n	c000556 <__udivmoddi4+0x252>
 c00063a:	eba1 0108 	sub.w	r1, r1, r8
 c00063e:	46cc      	mov	ip, r9
 c000640:	fbb1 f9fe 	udiv	r9, r1, lr
 c000644:	fb09 f804 	mul.w	r8, r9, r4
 c000648:	e7b8      	b.n	c0005bc <__udivmoddi4+0x2b8>
 c00064a:	bf00      	nop

0c00064c <__aeabi_idiv0>:
 c00064c:	4770      	bx	lr
 c00064e:	bf00      	nop

0c000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c000650:	b580      	push	{r7, lr}
 c000652:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c000654:	f000 ff0a 	bl	c00146c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 c000658:	f000 f8ae 	bl	c0007b8 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 c00065c:	f000 f850 	bl	c000700 <SystemClock_Config>
  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c000660:	f000 f8b6 	bl	c0007d0 <MX_GTZC_S_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c000664:	f000 fb14 	bl	c000c90 <MX_GPIO_Init>
  MX_ICACHE_Init();
 c000668:	f000 fabe 	bl	c000be8 <MX_ICACHE_Init>
  MX_USART3_UART_Init();
 c00066c:	f000 fac4 	bl	c000bf8 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /*************** Setup and jump to non-secure *******************************/

  NonSecure_Init();
 c000670:	f000 f802 	bl	c000678 <NonSecure_Init>

  /* Non-secure software does not return, this code is not executed */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 c000674:	bf00      	nop
 c000676:	e7fd      	b.n	c000674 <main+0x24>

0c000678 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c000678:	b590      	push	{r4, r7, lr}
 c00067a:	b083      	sub	sp, #12
 c00067c:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c00067e:	4b1e      	ldr	r3, [pc, #120]	@ (c0006f8 <NonSecure_Init+0x80>)
 c000680:	f04f 6201 	mov.w	r2, #135266304	@ 0x8100000
 c000684:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c000686:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 c00068a:	681b      	ldr	r3, [r3, #0]
 c00068c:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c00068e:	683b      	ldr	r3, [r7, #0]
 c000690:	f383 8888 	msr	MSP_NS, r3
}
 c000694:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c000696:	4b19      	ldr	r3, [pc, #100]	@ (c0006fc <NonSecure_Init+0x84>)
 c000698:	681b      	ldr	r3, [r3, #0]
 c00069a:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c00069c:	687b      	ldr	r3, [r7, #4]
 c00069e:	461c      	mov	r4, r3
 c0006a0:	0864      	lsrs	r4, r4, #1
 c0006a2:	0064      	lsls	r4, r4, #1
 c0006a4:	4620      	mov	r0, r4
 c0006a6:	4621      	mov	r1, r4
 c0006a8:	4622      	mov	r2, r4
 c0006aa:	4623      	mov	r3, r4
 c0006ac:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c0006b0:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c0006b4:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c0006b8:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c0006bc:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c0006c0:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c0006c4:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c0006c8:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c0006cc:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c0006d0:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c0006d4:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c0006d8:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c0006dc:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c0006e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c0006e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c0006e8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c0006ec:	f7ff fdc4 	bl	c000278 <__gnu_cmse_nonsecure_call>
}
 c0006f0:	bf00      	nop
 c0006f2:	370c      	adds	r7, #12
 c0006f4:	46bd      	mov	sp, r7
 c0006f6:	bd90      	pop	{r4, r7, pc}
 c0006f8:	e002ed00 	.word	0xe002ed00
 c0006fc:	08100004 	.word	0x08100004

0c000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 c000700:	b580      	push	{r7, lr}
 c000702:	b09e      	sub	sp, #120	@ 0x78
 c000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 c000706:	f107 0318 	add.w	r3, r7, #24
 c00070a:	2260      	movs	r2, #96	@ 0x60
 c00070c:	2100      	movs	r1, #0
 c00070e:	4618      	mov	r0, r3
 c000710:	f006 fc16 	bl	c006f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 c000714:	463b      	mov	r3, r7
 c000716:	2200      	movs	r2, #0
 c000718:	601a      	str	r2, [r3, #0]
 c00071a:	605a      	str	r2, [r3, #4]
 c00071c:	609a      	str	r2, [r3, #8]
 c00071e:	60da      	str	r2, [r3, #12]
 c000720:	611a      	str	r2, [r3, #16]
 c000722:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 c000724:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 c000728:	f001 fdb8 	bl	c00229c <HAL_PWREx_ControlVoltageScaling>
 c00072c:	4603      	mov	r3, r0
 c00072e:	2b00      	cmp	r3, #0
 c000730:	d001      	beq.n	c000736 <SystemClock_Config+0x36>
  {
    Error_Handler();
 c000732:	f000 fb9b 	bl	c000e6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 c000736:	2310      	movs	r3, #16
 c000738:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 c00073a:	2301      	movs	r3, #1
 c00073c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 c00073e:	2310      	movs	r3, #16
 c000740:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 c000742:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 c000746:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 c000748:	2302      	movs	r3, #2
 c00074a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 c00074c:	2301      	movs	r3, #1
 c00074e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 c000750:	2300      	movs	r3, #0
 c000752:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 c000754:	2301      	movs	r3, #1
 c000756:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 c000758:	2350      	movs	r3, #80	@ 0x50
 c00075a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 c00075c:	2302      	movs	r3, #2
 c00075e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 c000760:	2302      	movs	r3, #2
 c000762:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 c000764:	2302      	movs	r3, #2
 c000766:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 c000768:	2300      	movs	r3, #0
 c00076a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 c00076c:	2300      	movs	r3, #0
 c00076e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c000770:	f107 0318 	add.w	r3, r7, #24
 c000774:	4618      	mov	r0, r3
 c000776:	f001 fe6d 	bl	c002454 <HAL_RCC_OscConfig>
 c00077a:	4603      	mov	r3, r0
 c00077c:	2b00      	cmp	r3, #0
 c00077e:	d001      	beq.n	c000784 <SystemClock_Config+0x84>
  {
    Error_Handler();
 c000780:	f000 fb74 	bl	c000e6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 c000784:	231f      	movs	r3, #31
 c000786:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 c000788:	2303      	movs	r3, #3
 c00078a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 c00078c:	2300      	movs	r3, #0
 c00078e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 c000790:	2300      	movs	r3, #0
 c000792:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 c000794:	2300      	movs	r3, #0
 c000796:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 c000798:	2300      	movs	r3, #0
 c00079a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 c00079c:	463b      	mov	r3, r7
 c00079e:	2104      	movs	r1, #4
 c0007a0:	4618      	mov	r0, r3
 c0007a2:	f002 fd33 	bl	c00320c <HAL_RCC_ClockConfig>
 c0007a6:	4603      	mov	r3, r0
 c0007a8:	2b00      	cmp	r3, #0
 c0007aa:	d001      	beq.n	c0007b0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 c0007ac:	f000 fb5e 	bl	c000e6c <Error_Handler>
  }
}
 c0007b0:	bf00      	nop
 c0007b2:	3778      	adds	r7, #120	@ 0x78
 c0007b4:	46bd      	mov	sp, r7
 c0007b6:	bd80      	pop	{r7, pc}

0c0007b8 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 c0007b8:	b580      	push	{r7, lr}
 c0007ba:	af00      	add	r7, sp, #0

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 c0007bc:	2002      	movs	r0, #2
 c0007be:	f001 fdf9 	bl	c0023b4 <HAL_PWREx_ConfigSupply>
 c0007c2:	4603      	mov	r3, r0
 c0007c4:	2b00      	cmp	r3, #0
 c0007c6:	d001      	beq.n	c0007cc <SystemPower_Config+0x14>
  {
    Error_Handler();
 c0007c8:	f000 fb50 	bl	c000e6c <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 c0007cc:	bf00      	nop
 c0007ce:	bd80      	pop	{r7, pc}

0c0007d0 <MX_GTZC_S_Init>:
  * @brief GTZC_S Initialization Function
  * @param None
  * @retval None
  */
static void MX_GTZC_S_Init(void)
{
 c0007d0:	b580      	push	{r7, lr}
 c0007d2:	b0c4      	sub	sp, #272	@ 0x110
 c0007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_Area_Desc = {0};
 c0007d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0007da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0007de:	4618      	mov	r0, r3
 c0007e0:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 c0007e4:	461a      	mov	r2, r3
 c0007e6:	2100      	movs	r1, #0
 c0007e8:	f006 fbaa 	bl	c006f40 <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_USART3, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c0007ec:	f240 3101 	movw	r1, #769	@ 0x301
 c0007f0:	200a      	movs	r0, #10
 c0007f2:	f001 fb19 	bl	c001e28 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c0007f6:	4603      	mov	r3, r0
 c0007f8:	2b00      	cmp	r3, #0
 c0007fa:	d001      	beq.n	c000800 <MX_GTZC_S_Init+0x30>
  {
    Error_Handler();
 c0007fc:	f000 fb36 	bl	c000e6c <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_OCTOSPIM, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c000800:	f240 3101 	movw	r1, #769	@ 0x301
 c000804:	4804      	ldr	r0, [pc, #16]	@ (c000818 <MX_GTZC_S_Init+0x48>)
 c000806:	f001 fb0f 	bl	c001e28 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c00080a:	4603      	mov	r3, r0
 c00080c:	2b00      	cmp	r3, #0
 c00080e:	d005      	beq.n	c00081c <MX_GTZC_S_Init+0x4c>
  {
    Error_Handler();
 c000810:	f000 fb2c 	bl	c000e6c <Error_Handler>
 c000814:	e002      	b.n	c00081c <MX_GTZC_S_Init+0x4c>
 c000816:	bf00      	nop
 c000818:	20000010 	.word	0x20000010
  }
  MPCBB_Area_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c00081c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000820:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000824:	2200      	movs	r2, #0
 c000826:	601a      	str	r2, [r3, #0]
  MPCBB_Area_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c000828:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00082c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000830:	2200      	movs	r2, #0
 c000832:	605a      	str	r2, [r3, #4]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c000834:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000838:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00083c:	2200      	movs	r2, #0
 c00083e:	609a      	str	r2, [r3, #8]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c000840:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000844:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000848:	2200      	movs	r2, #0
 c00084a:	60da      	str	r2, [r3, #12]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c00084c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000850:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000854:	2200      	movs	r2, #0
 c000856:	611a      	str	r2, [r3, #16]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c000858:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00085c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000860:	2200      	movs	r2, #0
 c000862:	615a      	str	r2, [r3, #20]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c000864:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000868:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00086c:	2200      	movs	r2, #0
 c00086e:	619a      	str	r2, [r3, #24]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c000870:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000874:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000878:	2200      	movs	r2, #0
 c00087a:	61da      	str	r2, [r3, #28]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c00087c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000880:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000884:	2200      	movs	r2, #0
 c000886:	621a      	str	r2, [r3, #32]
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c000888:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00088c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000890:	2200      	movs	r2, #0
 c000892:	625a      	str	r2, [r3, #36]	@ 0x24
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0x00000000;
 c000894:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000898:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00089c:	2200      	movs	r2, #0
 c00089e:	629a      	str	r2, [r3, #40]	@ 0x28
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0x00000000;
 c0008a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0008a4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0008a8:	2200      	movs	r2, #0
 c0008aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0x00000000;
 c0008ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0008b0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0008b4:	2200      	movs	r2, #0
 c0008b6:	631a      	str	r2, [r3, #48]	@ 0x30
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0x00000000;
 c0008b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0008bc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0008c0:	2200      	movs	r2, #0
 c0008c2:	635a      	str	r2, [r3, #52]	@ 0x34
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c0008c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0008c8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0008cc:	2200      	movs	r2, #0
 c0008ce:	639a      	str	r2, [r3, #56]	@ 0x38
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c0008d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0008d4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0008d8:	2200      	movs	r2, #0
 c0008da:	63da      	str	r2, [r3, #60]	@ 0x3c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c0008dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0008e0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0008e4:	2200      	movs	r2, #0
 c0008e6:	641a      	str	r2, [r3, #64]	@ 0x40
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c0008e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0008ec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0008f0:	2200      	movs	r2, #0
 c0008f2:	645a      	str	r2, [r3, #68]	@ 0x44
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c0008f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0008f8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0008fc:	2200      	movs	r2, #0
 c0008fe:	649a      	str	r2, [r3, #72]	@ 0x48
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c000900:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000904:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000908:	2200      	movs	r2, #0
 c00090a:	64da      	str	r2, [r3, #76]	@ 0x4c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c00090c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000910:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000914:	2200      	movs	r2, #0
 c000916:	651a      	str	r2, [r3, #80]	@ 0x50
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c000918:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00091c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000920:	2200      	movs	r2, #0
 c000922:	655a      	str	r2, [r3, #84]	@ 0x54
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
 c000924:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000928:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00092c:	2200      	movs	r2, #0
 c00092e:	659a      	str	r2, [r3, #88]	@ 0x58
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c000930:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000934:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000938:	2200      	movs	r2, #0
 c00093a:	65da      	str	r2, [r3, #92]	@ 0x5c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c00093c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000940:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000944:	2200      	movs	r2, #0
 c000946:	661a      	str	r2, [r3, #96]	@ 0x60
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
 c000948:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00094c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000950:	2200      	movs	r2, #0
 c000952:	665a      	str	r2, [r3, #100]	@ 0x64
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[24] =   0x00000000;
 c000954:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000958:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00095c:	2200      	movs	r2, #0
 c00095e:	669a      	str	r2, [r3, #104]	@ 0x68
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[25] =   0x00000000;
 c000960:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000964:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000968:	2200      	movs	r2, #0
 c00096a:	66da      	str	r2, [r3, #108]	@ 0x6c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[26] =   0x00000000;
 c00096c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000970:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000974:	2200      	movs	r2, #0
 c000976:	671a      	str	r2, [r3, #112]	@ 0x70
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[27] =   0x00000000;
 c000978:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c00097c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000980:	2200      	movs	r2, #0
 c000982:	675a      	str	r2, [r3, #116]	@ 0x74
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[28] =   0x00000000;
 c000984:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000988:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c00098c:	2200      	movs	r2, #0
 c00098e:	679a      	str	r2, [r3, #120]	@ 0x78
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[29] =   0x00000000;
 c000990:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000994:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000998:	2200      	movs	r2, #0
 c00099a:	67da      	str	r2, [r3, #124]	@ 0x7c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[30] =   0x00000000;
 c00099c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0009a0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0009a4:	2200      	movs	r2, #0
 c0009a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  MPCBB_Area_Desc.AttributeConfig.MPCBB_SecConfig_array[31] =   0x00000000;
 c0009aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0009ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0009b2:	2200      	movs	r2, #0
 c0009b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[0] =   0xFFFFFFFF;
 c0009b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0009bc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0009c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c0009c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[1] =   0xFFFFFFFF;
 c0009c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0009cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0009d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c0009d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[2] =   0xFFFFFFFF;
 c0009d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0009dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0009e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c0009e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[3] =   0xFFFFFFFF;
 c0009e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0009ec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c0009f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c0009f4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[4] =   0xFFFFFFFF;
 c0009f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c0009fc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000a00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000a04:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[5] =   0xFFFFFFFF;
 c000a08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000a0c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000a10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000a14:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[6] =   0xFFFFFFFF;
 c000a18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000a1c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000a20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000a24:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[7] =   0xFFFFFFFF;
 c000a28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000a2c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000a30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000a34:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[8] =   0xFFFFFFFF;
 c000a38:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000a3c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000a40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000a44:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[9] =   0xFFFFFFFF;
 c000a48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000a4c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000a50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000a54:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[10] =   0xFFFFFFFF;
 c000a58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000a5c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000a60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000a64:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[11] =   0xFFFFFFFF;
 c000a68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000a6c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000a70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000a74:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[12] =   0xFFFFFFFF;
 c000a78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000a7c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000a80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000a84:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[13] =   0xFFFFFFFF;
 c000a88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000a8c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000a90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000a94:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[14] =   0xFFFFFFFF;
 c000a98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000a9c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000aa0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000aa4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[15] =   0xFFFFFFFF;
 c000aa8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000aac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000ab0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000ab4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[16] =   0xFFFFFFFF;
 c000ab8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000abc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000ac0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000ac4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[17] =   0xFFFFFFFF;
 c000ac8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000acc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000ad0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000ad4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[18] =   0xFFFFFFFF;
 c000ad8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000adc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000ae0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000ae4:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[19] =   0xFFFFFFFF;
 c000ae8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000aec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000af0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000af4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[20] =   0xFFFFFFFF;
 c000af8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000afc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000b00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000b04:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[21] =   0xFFFFFFFF;
 c000b08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000b0c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000b10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000b14:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[22] =   0xFFFFFFFF;
 c000b18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000b1c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000b20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000b24:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[23] =   0xFFFFFFFF;
 c000b28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000b2c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000b30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000b34:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[24] =   0xFFFFFFFF;
 c000b38:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000b3c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000b40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000b44:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[25] =   0xFFFFFFFF;
 c000b48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000b4c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000b50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000b54:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[26] =   0xFFFFFFFF;
 c000b58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000b5c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000b60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000b64:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[27] =   0xFFFFFFFF;
 c000b68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000b6c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000b70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000b74:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[28] =   0xFFFFFFFF;
 c000b78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000b7c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000b80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000b84:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[29] =   0xFFFFFFFF;
 c000b88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000b8c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000b90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000b94:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[30] =   0xFFFFFFFF;
 c000b98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000b9c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000ba0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000ba4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  MPCBB_Area_Desc.AttributeConfig.MPCBB_PrivConfig_array[31] =   0xFFFFFFFF;
 c000ba8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000bac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000bb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c000bb4:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
  MPCBB_Area_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c000bb8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 c000bbc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 c000bc0:	2200      	movs	r2, #0
 c000bc2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM3_BASE, &MPCBB_Area_Desc) != HAL_OK)
 c000bc6:	1d3b      	adds	r3, r7, #4
 c000bc8:	4619      	mov	r1, r3
 c000bca:	4806      	ldr	r0, [pc, #24]	@ (c000be4 <MX_GTZC_S_Init+0x414>)
 c000bcc:	f001 fa8e 	bl	c0020ec <HAL_GTZC_MPCBB_ConfigMem>
 c000bd0:	4603      	mov	r3, r0
 c000bd2:	2b00      	cmp	r3, #0
 c000bd4:	d001      	beq.n	c000bda <MX_GTZC_S_Init+0x40a>
  {
    Error_Handler();
 c000bd6:	f000 f949 	bl	c000e6c <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */

  /* USER CODE END GTZC_S_Init 2 */

}
 c000bda:	bf00      	nop
 c000bdc:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 c000be0:	46bd      	mov	sp, r7
 c000be2:	bd80      	pop	{r7, pc}
 c000be4:	30040000 	.word	0x30040000

0c000be8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 c000be8:	b480      	push	{r7}
 c000bea:	af00      	add	r7, sp, #0
  /* USER CODE END ICACHE_Init 1 */
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 c000bec:	bf00      	nop
 c000bee:	46bd      	mov	sp, r7
 c000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000bf4:	4770      	bx	lr
	...

0c000bf8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 c000bf8:	b580      	push	{r7, lr}
 c000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 c000bfc:	4b22      	ldr	r3, [pc, #136]	@ (c000c88 <MX_USART3_UART_Init+0x90>)
 c000bfe:	4a23      	ldr	r2, [pc, #140]	@ (c000c8c <MX_USART3_UART_Init+0x94>)
 c000c00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 c000c02:	4b21      	ldr	r3, [pc, #132]	@ (c000c88 <MX_USART3_UART_Init+0x90>)
 c000c04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 c000c08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 c000c0a:	4b1f      	ldr	r3, [pc, #124]	@ (c000c88 <MX_USART3_UART_Init+0x90>)
 c000c0c:	2200      	movs	r2, #0
 c000c0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 c000c10:	4b1d      	ldr	r3, [pc, #116]	@ (c000c88 <MX_USART3_UART_Init+0x90>)
 c000c12:	2200      	movs	r2, #0
 c000c14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 c000c16:	4b1c      	ldr	r3, [pc, #112]	@ (c000c88 <MX_USART3_UART_Init+0x90>)
 c000c18:	2200      	movs	r2, #0
 c000c1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 c000c1c:	4b1a      	ldr	r3, [pc, #104]	@ (c000c88 <MX_USART3_UART_Init+0x90>)
 c000c1e:	220c      	movs	r2, #12
 c000c20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 c000c22:	4b19      	ldr	r3, [pc, #100]	@ (c000c88 <MX_USART3_UART_Init+0x90>)
 c000c24:	2200      	movs	r2, #0
 c000c26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 c000c28:	4b17      	ldr	r3, [pc, #92]	@ (c000c88 <MX_USART3_UART_Init+0x90>)
 c000c2a:	2200      	movs	r2, #0
 c000c2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 c000c2e:	4b16      	ldr	r3, [pc, #88]	@ (c000c88 <MX_USART3_UART_Init+0x90>)
 c000c30:	2200      	movs	r2, #0
 c000c32:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 c000c34:	4b14      	ldr	r3, [pc, #80]	@ (c000c88 <MX_USART3_UART_Init+0x90>)
 c000c36:	2200      	movs	r2, #0
 c000c38:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 c000c3a:	4b13      	ldr	r3, [pc, #76]	@ (c000c88 <MX_USART3_UART_Init+0x90>)
 c000c3c:	2200      	movs	r2, #0
 c000c3e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 c000c40:	4811      	ldr	r0, [pc, #68]	@ (c000c88 <MX_USART3_UART_Init+0x90>)
 c000c42:	f005 fb93 	bl	c00636c <HAL_UART_Init>
 c000c46:	4603      	mov	r3, r0
 c000c48:	2b00      	cmp	r3, #0
 c000c4a:	d001      	beq.n	c000c50 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 c000c4c:	f000 f90e 	bl	c000e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 c000c50:	2100      	movs	r1, #0
 c000c52:	480d      	ldr	r0, [pc, #52]	@ (c000c88 <MX_USART3_UART_Init+0x90>)
 c000c54:	f006 f8aa 	bl	c006dac <HAL_UARTEx_SetTxFifoThreshold>
 c000c58:	4603      	mov	r3, r0
 c000c5a:	2b00      	cmp	r3, #0
 c000c5c:	d001      	beq.n	c000c62 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 c000c5e:	f000 f905 	bl	c000e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 c000c62:	2100      	movs	r1, #0
 c000c64:	4808      	ldr	r0, [pc, #32]	@ (c000c88 <MX_USART3_UART_Init+0x90>)
 c000c66:	f006 f8df 	bl	c006e28 <HAL_UARTEx_SetRxFifoThreshold>
 c000c6a:	4603      	mov	r3, r0
 c000c6c:	2b00      	cmp	r3, #0
 c000c6e:	d001      	beq.n	c000c74 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 c000c70:	f000 f8fc 	bl	c000e6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 c000c74:	4804      	ldr	r0, [pc, #16]	@ (c000c88 <MX_USART3_UART_Init+0x90>)
 c000c76:	f006 f860 	bl	c006d3a <HAL_UARTEx_DisableFifoMode>
 c000c7a:	4603      	mov	r3, r0
 c000c7c:	2b00      	cmp	r3, #0
 c000c7e:	d001      	beq.n	c000c84 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 c000c80:	f000 f8f4 	bl	c000e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 c000c84:	bf00      	nop
 c000c86:	bd80      	pop	{r7, pc}
 c000c88:	30000130 	.word	0x30000130
 c000c8c:	50004800 	.word	0x50004800

0c000c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 c000c90:	b580      	push	{r7, lr}
 c000c92:	b088      	sub	sp, #32
 c000c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c000c96:	f107 030c 	add.w	r3, r7, #12
 c000c9a:	2200      	movs	r2, #0
 c000c9c:	601a      	str	r2, [r3, #0]
 c000c9e:	605a      	str	r2, [r3, #4]
 c000ca0:	609a      	str	r2, [r3, #8]
 c000ca2:	60da      	str	r2, [r3, #12]
 c000ca4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c000ca6:	4b27      	ldr	r3, [pc, #156]	@ (c000d44 <MX_GPIO_Init+0xb4>)
 c000ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c000cac:	4a25      	ldr	r2, [pc, #148]	@ (c000d44 <MX_GPIO_Init+0xb4>)
 c000cae:	f043 0304 	orr.w	r3, r3, #4
 c000cb2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c000cb6:	4b23      	ldr	r3, [pc, #140]	@ (c000d44 <MX_GPIO_Init+0xb4>)
 c000cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c000cbc:	f003 0304 	and.w	r3, r3, #4
 c000cc0:	60bb      	str	r3, [r7, #8]
 c000cc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 c000cc4:	4b1f      	ldr	r3, [pc, #124]	@ (c000d44 <MX_GPIO_Init+0xb4>)
 c000cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c000cca:	4a1e      	ldr	r2, [pc, #120]	@ (c000d44 <MX_GPIO_Init+0xb4>)
 c000ccc:	f043 0308 	orr.w	r3, r3, #8
 c000cd0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c000cd4:	4b1b      	ldr	r3, [pc, #108]	@ (c000d44 <MX_GPIO_Init+0xb4>)
 c000cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c000cda:	f003 0308 	and.w	r3, r3, #8
 c000cde:	607b      	str	r3, [r7, #4]
 c000ce0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCRYPT_GPIO_Port, ENCRYPT_Pin, GPIO_PIN_RESET);
 c000ce2:	2200      	movs	r2, #0
 c000ce4:	2102      	movs	r1, #2
 c000ce6:	4818      	ldr	r0, [pc, #96]	@ (c000d48 <MX_GPIO_Init+0xb8>)
 c000ce8:	f001 f854 	bl	c001d94 <HAL_GPIO_WritePin>

  /*Configure the EXTI line attribute */
  HAL_EXTI_ConfigLineAttributes(EXTI_LINE_13, EXTI_LINE_SEC);
 c000cec:	f240 1101 	movw	r1, #257	@ 0x101
 c000cf0:	4816      	ldr	r0, [pc, #88]	@ (c000d4c <MX_GPIO_Init+0xbc>)
 c000cf2:	f000 fe15 	bl	c001920 <HAL_EXTI_ConfigLineAttributes>

  /*Configure GPIO pin : NEXT_BTN_Pin */
  GPIO_InitStruct.Pin = NEXT_BTN_Pin;
 c000cf6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 c000cfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 c000cfc:	4b14      	ldr	r3, [pc, #80]	@ (c000d50 <MX_GPIO_Init+0xc0>)
 c000cfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c000d00:	2300      	movs	r3, #0
 c000d02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NEXT_BTN_GPIO_Port, &GPIO_InitStruct);
 c000d04:	f107 030c 	add.w	r3, r7, #12
 c000d08:	4619      	mov	r1, r3
 c000d0a:	480f      	ldr	r0, [pc, #60]	@ (c000d48 <MX_GPIO_Init+0xb8>)
 c000d0c:	f000 fe6a 	bl	c0019e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCRYPT_Pin */
  GPIO_InitStruct.Pin = ENCRYPT_Pin;
 c000d10:	2302      	movs	r3, #2
 c000d12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c000d14:	2301      	movs	r3, #1
 c000d16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c000d18:	2300      	movs	r3, #0
 c000d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 c000d1c:	2302      	movs	r3, #2
 c000d1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENCRYPT_GPIO_Port, &GPIO_InitStruct);
 c000d20:	f107 030c 	add.w	r3, r7, #12
 c000d24:	4619      	mov	r1, r3
 c000d26:	4808      	ldr	r0, [pc, #32]	@ (c000d48 <MX_GPIO_Init+0xb8>)
 c000d28:	f000 fe5c 	bl	c0019e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 c000d2c:	2200      	movs	r2, #0
 c000d2e:	2100      	movs	r1, #0
 c000d30:	2018      	movs	r0, #24
 c000d32:	f000 fd19 	bl	c001768 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 c000d36:	2018      	movs	r0, #24
 c000d38:	f000 fd30 	bl	c00179c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 c000d3c:	bf00      	nop
 c000d3e:	3720      	adds	r7, #32
 c000d40:	46bd      	mov	sp, r7
 c000d42:	bd80      	pop	{r7, pc}
 c000d44:	56020c00 	.word	0x56020c00
 c000d48:	52020800 	.word	0x52020800
 c000d4c:	0600000d 	.word	0x0600000d
 c000d50:	10110000 	.word	0x10110000

0c000d54 <SubKeys>:

/* USER CODE BEGIN 4 */
uint8_t SubKeys(uint8_t plain, uint8_t key)
{
 c000d54:	b480      	push	{r7}
 c000d56:	b085      	sub	sp, #20
 c000d58:	af00      	add	r7, sp, #0
 c000d5a:	4603      	mov	r3, r0
 c000d5c:	460a      	mov	r2, r1
 c000d5e:	71fb      	strb	r3, [r7, #7]
 c000d60:	4613      	mov	r3, r2
 c000d62:	71bb      	strb	r3, [r7, #6]
	uint8_t ret = 0;
 c000d64:	2300      	movs	r3, #0
 c000d66:	73fb      	strb	r3, [r7, #15]
	ret = s_box[plain ^ key];
 c000d68:	79fa      	ldrb	r2, [r7, #7]
 c000d6a:	79bb      	ldrb	r3, [r7, #6]
 c000d6c:	4053      	eors	r3, r2
 c000d6e:	b2db      	uxtb	r3, r3
 c000d70:	461a      	mov	r2, r3
 c000d72:	4b05      	ldr	r3, [pc, #20]	@ (c000d88 <SubKeys+0x34>)
 c000d74:	5c9b      	ldrb	r3, [r3, r2]
 c000d76:	73fb      	strb	r3, [r7, #15]
	return ret;
 c000d78:	7bfb      	ldrb	r3, [r7, #15]
}
 c000d7a:	4618      	mov	r0, r3
 c000d7c:	3714      	adds	r7, #20
 c000d7e:	46bd      	mov	sp, r7
 c000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000d84:	4770      	bx	lr
 c000d86:	bf00      	nop
 c000d88:	30000008 	.word	0x30000008

0c000d8c <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 c000d8c:	b590      	push	{r4, r7, lr}
 c000d8e:	b087      	sub	sp, #28
 c000d90:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 c000d92:	2300      	movs	r3, #0
 c000d94:	75fb      	strb	r3, [r7, #23]
		for (i = 0; i < TXT_SIZE; i++)
			plaintext[i] += 1;
	}
	*/

	if (TimingDelay != 0U)
 c000d96:	4b20      	ldr	r3, [pc, #128]	@ (c000e18 <HAL_SYSTICK_Callback+0x8c>)
 c000d98:	681b      	ldr	r3, [r3, #0]
 c000d9a:	2b00      	cmp	r3, #0
 c000d9c:	d005      	beq.n	c000daa <HAL_SYSTICK_Callback+0x1e>
	{
		TimingDelay--;
 c000d9e:	4b1e      	ldr	r3, [pc, #120]	@ (c000e18 <HAL_SYSTICK_Callback+0x8c>)
 c000da0:	681b      	ldr	r3, [r3, #0]
 c000da2:	3b01      	subs	r3, #1
 c000da4:	4a1c      	ldr	r2, [pc, #112]	@ (c000e18 <HAL_SYSTICK_Callback+0x8c>)
 c000da6:	6013      	str	r3, [r2, #0]
		TimingDelay = ENC_DELAY;

		/* Ready pin off */
		HAL_GPIO_WritePin(ENCRYPT_GPIO_Port, ENCRYPT_Pin, GPIO_PIN_RESET);
  }
}
 c000da8:	e032      	b.n	c000e10 <HAL_SYSTICK_Callback+0x84>
		uint8_t enc_data[TXT_SIZE + 1] = {0};
 c000daa:	1d3b      	adds	r3, r7, #4
 c000dac:	2200      	movs	r2, #0
 c000dae:	601a      	str	r2, [r3, #0]
 c000db0:	605a      	str	r2, [r3, #4]
 c000db2:	609a      	str	r2, [r3, #8]
 c000db4:	60da      	str	r2, [r3, #12]
 c000db6:	741a      	strb	r2, [r3, #16]
		uint8_t plain = 0;
 c000db8:	2300      	movs	r3, #0
 c000dba:	70fb      	strb	r3, [r7, #3]
		HAL_UART_Receive(&huart3, &plain, sizeof(uint8_t), 10000);
 c000dbc:	1cf9      	adds	r1, r7, #3
 c000dbe:	f242 7310 	movw	r3, #10000	@ 0x2710
 c000dc2:	2201      	movs	r2, #1
 c000dc4:	4815      	ldr	r0, [pc, #84]	@ (c000e1c <HAL_SYSTICK_Callback+0x90>)
 c000dc6:	f005 fb21 	bl	c00640c <HAL_UART_Receive>
		HAL_GPIO_WritePin(ENCRYPT_GPIO_Port, ENCRYPT_Pin, GPIO_PIN_SET);
 c000dca:	2201      	movs	r2, #1
 c000dcc:	2102      	movs	r1, #2
 c000dce:	4814      	ldr	r0, [pc, #80]	@ (c000e20 <HAL_SYSTICK_Callback+0x94>)
 c000dd0:	f000 ffe0 	bl	c001d94 <HAL_GPIO_WritePin>
		for (; i < TXT_SIZE; i++) {
 c000dd4:	e011      	b.n	c000dfa <HAL_SYSTICK_Callback+0x6e>
			enc_data[i] = SubKeys(plain, aes_key);
 c000dd6:	78fb      	ldrb	r3, [r7, #3]
 c000dd8:	4a12      	ldr	r2, [pc, #72]	@ (c000e24 <HAL_SYSTICK_Callback+0x98>)
 c000dda:	7812      	ldrb	r2, [r2, #0]
 c000ddc:	7dfc      	ldrb	r4, [r7, #23]
 c000dde:	4611      	mov	r1, r2
 c000de0:	4618      	mov	r0, r3
 c000de2:	f7ff ffb7 	bl	c000d54 <SubKeys>
 c000de6:	4603      	mov	r3, r0
 c000de8:	461a      	mov	r2, r3
 c000dea:	f104 0318 	add.w	r3, r4, #24
 c000dee:	443b      	add	r3, r7
 c000df0:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (; i < TXT_SIZE; i++) {
 c000df4:	7dfb      	ldrb	r3, [r7, #23]
 c000df6:	3301      	adds	r3, #1
 c000df8:	75fb      	strb	r3, [r7, #23]
 c000dfa:	7dfb      	ldrb	r3, [r7, #23]
 c000dfc:	2b0f      	cmp	r3, #15
 c000dfe:	d9ea      	bls.n	c000dd6 <HAL_SYSTICK_Callback+0x4a>
		TimingDelay = ENC_DELAY;
 c000e00:	4b05      	ldr	r3, [pc, #20]	@ (c000e18 <HAL_SYSTICK_Callback+0x8c>)
 c000e02:	2264      	movs	r2, #100	@ 0x64
 c000e04:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(ENCRYPT_GPIO_Port, ENCRYPT_Pin, GPIO_PIN_RESET);
 c000e06:	2200      	movs	r2, #0
 c000e08:	2102      	movs	r1, #2
 c000e0a:	4805      	ldr	r0, [pc, #20]	@ (c000e20 <HAL_SYSTICK_Callback+0x94>)
 c000e0c:	f000 ffc2 	bl	c001d94 <HAL_GPIO_WritePin>
}
 c000e10:	bf00      	nop
 c000e12:	371c      	adds	r7, #28
 c000e14:	46bd      	mov	sp, r7
 c000e16:	bd90      	pop	{r4, r7, pc}
 c000e18:	30000000 	.word	0x30000000
 c000e1c:	30000130 	.word	0x30000130
 c000e20:	52020800 	.word	0x52020800
 c000e24:	30000004 	.word	0x30000004

0c000e28 <HAL_GPIO_EXTI_Rising_Callback>:

/* Increase plaintext whenever a button is pressed */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 c000e28:	b480      	push	{r7}
 c000e2a:	b085      	sub	sp, #20
 c000e2c:	af00      	add	r7, sp, #0
 c000e2e:	4603      	mov	r3, r0
 c000e30:	80fb      	strh	r3, [r7, #6]
	/* Increase plaintext when button pressed */
	if (GPIO_Pin == NEXT_BTN_Pin) {
 c000e32:	88fb      	ldrh	r3, [r7, #6]
 c000e34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c000e38:	d110      	bne.n	c000e5c <HAL_GPIO_EXTI_Rising_Callback+0x34>
		//plaintext++;
		for (uint8_t i = 0; i < TXT_SIZE; i++)
 c000e3a:	2300      	movs	r3, #0
 c000e3c:	73fb      	strb	r3, [r7, #15]
 c000e3e:	e00a      	b.n	c000e56 <HAL_GPIO_EXTI_Rising_Callback+0x2e>
			plaintext[i] += 1;
 c000e40:	7bfb      	ldrb	r3, [r7, #15]
 c000e42:	4a09      	ldr	r2, [pc, #36]	@ (c000e68 <HAL_GPIO_EXTI_Rising_Callback+0x40>)
 c000e44:	5cd2      	ldrb	r2, [r2, r3]
 c000e46:	7bfb      	ldrb	r3, [r7, #15]
 c000e48:	3201      	adds	r2, #1
 c000e4a:	b2d1      	uxtb	r1, r2
 c000e4c:	4a06      	ldr	r2, [pc, #24]	@ (c000e68 <HAL_GPIO_EXTI_Rising_Callback+0x40>)
 c000e4e:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < TXT_SIZE; i++)
 c000e50:	7bfb      	ldrb	r3, [r7, #15]
 c000e52:	3301      	adds	r3, #1
 c000e54:	73fb      	strb	r3, [r7, #15]
 c000e56:	7bfb      	ldrb	r3, [r7, #15]
 c000e58:	2b0f      	cmp	r3, #15
 c000e5a:	d9f1      	bls.n	c000e40 <HAL_GPIO_EXTI_Rising_Callback+0x18>
	}
}
 c000e5c:	bf00      	nop
 c000e5e:	3714      	adds	r7, #20
 c000e60:	46bd      	mov	sp, r7
 c000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000e66:	4770      	bx	lr
 c000e68:	300001c4 	.word	0x300001c4

0c000e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c000e6c:	b480      	push	{r7}
 c000e6e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 c000e70:	b672      	cpsid	i
}
 c000e72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 c000e74:	bf00      	nop
 c000e76:	e7fd      	b.n	c000e74 <Error_Handler+0x8>

0c000e78 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
 c000e78:	b2c0      	uxtb	r0, r0
 c000e7a:	b480      	push	{r7}
 c000e7c:	b083      	sub	sp, #12
 c000e7e:	af00      	add	r7, sp, #0
 c000e80:	4603      	mov	r3, r0
 c000e82:	6039      	str	r1, [r7, #0]
 c000e84:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c000e86:	683b      	ldr	r3, [r7, #0]
 c000e88:	2b00      	cmp	r3, #0
 c000e8a:	d00d      	beq.n	c000ea8 <__acle_se_SECURE_RegisterCallback+0x30>
  {
    switch(CallbackId)
 c000e8c:	79fb      	ldrb	r3, [r7, #7]
 c000e8e:	2b00      	cmp	r3, #0
 c000e90:	d002      	beq.n	c000e98 <__acle_se_SECURE_RegisterCallback+0x20>
 c000e92:	2b01      	cmp	r3, #1
 c000e94:	d004      	beq.n	c000ea0 <__acle_se_SECURE_RegisterCallback+0x28>
      case GTZC_ERROR_CB_ID:             /* GTZC Interrupt occurred */
        pSecureErrorCallback = func;
        break;
      default:
        /* unknown */
        break;
 c000e96:	e007      	b.n	c000ea8 <__acle_se_SECURE_RegisterCallback+0x30>
        pSecureFaultCallback = func;
 c000e98:	4a20      	ldr	r2, [pc, #128]	@ (c000f1c <__acle_se_SECURE_RegisterCallback+0xa4>)
 c000e9a:	683b      	ldr	r3, [r7, #0]
 c000e9c:	6013      	str	r3, [r2, #0]
        break;
 c000e9e:	e003      	b.n	c000ea8 <__acle_se_SECURE_RegisterCallback+0x30>
        pSecureErrorCallback = func;
 c000ea0:	4a1f      	ldr	r2, [pc, #124]	@ (c000f20 <__acle_se_SECURE_RegisterCallback+0xa8>)
 c000ea2:	683b      	ldr	r3, [r7, #0]
 c000ea4:	6013      	str	r3, [r2, #0]
        break;
 c000ea6:	bf00      	nop
    }
  }
}
 c000ea8:	bf00      	nop
 c000eaa:	370c      	adds	r7, #12
 c000eac:	46bd      	mov	sp, r7
 c000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000eb2:	4670      	mov	r0, lr
 c000eb4:	4671      	mov	r1, lr
 c000eb6:	4672      	mov	r2, lr
 c000eb8:	4673      	mov	r3, lr
 c000eba:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c000ebe:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c000ec2:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c000ec6:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c000eca:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c000ece:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c000ed2:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c000ed6:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c000eda:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c000ede:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c000ee2:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c000ee6:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c000eea:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c000eee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c000ef2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c000ef6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c000efa:	f38e 8c00 	msr	CPSR_fs, lr
 c000efe:	b410      	push	{r4}
 c000f00:	eef1 ca10 	vmrs	ip, fpscr
 c000f04:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c000f08:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c000f0c:	ea0c 0c04 	and.w	ip, ip, r4
 c000f10:	eee1 ca10 	vmsr	fpscr, ip
 c000f14:	bc10      	pop	{r4}
 c000f16:	46f4      	mov	ip, lr
 c000f18:	4774      	bxns	lr
 c000f1a:	bf00      	nop
 c000f1c:	300001d4 	.word	0x300001d4
 c000f20:	300001d8 	.word	0x300001d8

0c000f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c000f24:	b480      	push	{r7}
 c000f26:	b083      	sub	sp, #12
 c000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 c000f2a:	4b12      	ldr	r3, [pc, #72]	@ (c000f74 <HAL_MspInit+0x50>)
 c000f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c000f30:	4a10      	ldr	r2, [pc, #64]	@ (c000f74 <HAL_MspInit+0x50>)
 c000f32:	f043 0304 	orr.w	r3, r3, #4
 c000f36:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c000f3a:	4b0e      	ldr	r3, [pc, #56]	@ (c000f74 <HAL_MspInit+0x50>)
 c000f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c000f40:	f003 0304 	and.w	r3, r3, #4
 c000f44:	607b      	str	r3, [r7, #4]
 c000f46:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GTZC1_CLK_ENABLE();
 c000f48:	4b0a      	ldr	r3, [pc, #40]	@ (c000f74 <HAL_MspInit+0x50>)
 c000f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c000f4e:	4a09      	ldr	r2, [pc, #36]	@ (c000f74 <HAL_MspInit+0x50>)
 c000f50:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 c000f54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 c000f58:	4b06      	ldr	r3, [pc, #24]	@ (c000f74 <HAL_MspInit+0x50>)
 c000f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c000f5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 c000f62:	603b      	str	r3, [r7, #0]
 c000f64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c000f66:	bf00      	nop
 c000f68:	370c      	adds	r7, #12
 c000f6a:	46bd      	mov	sp, r7
 c000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000f70:	4770      	bx	lr
 c000f72:	bf00      	nop
 c000f74:	56020c00 	.word	0x56020c00

0c000f78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 c000f78:	b580      	push	{r7, lr}
 c000f7a:	b0bc      	sub	sp, #240	@ 0xf0
 c000f7c:	af00      	add	r7, sp, #0
 c000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c000f80:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 c000f84:	2200      	movs	r2, #0
 c000f86:	601a      	str	r2, [r3, #0]
 c000f88:	605a      	str	r2, [r3, #4]
 c000f8a:	609a      	str	r2, [r3, #8]
 c000f8c:	60da      	str	r2, [r3, #12]
 c000f8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c000f90:	f107 0310 	add.w	r3, r7, #16
 c000f94:	22c8      	movs	r2, #200	@ 0xc8
 c000f96:	2100      	movs	r1, #0
 c000f98:	4618      	mov	r0, r3
 c000f9a:	f005 ffd1 	bl	c006f40 <memset>
  if(huart->Instance==USART3)
 c000f9e:	687b      	ldr	r3, [r7, #4]
 c000fa0:	681b      	ldr	r3, [r3, #0]
 c000fa2:	4a26      	ldr	r2, [pc, #152]	@ (c00103c <HAL_UART_MspInit+0xc4>)
 c000fa4:	4293      	cmp	r3, r2
 c000fa6:	d145      	bne.n	c001034 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 c000fa8:	f04f 0204 	mov.w	r2, #4
 c000fac:	f04f 0300 	mov.w	r3, #0
 c000fb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 c000fb4:	2300      	movs	r3, #0
 c000fb6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c000fb8:	f107 0310 	add.w	r3, r7, #16
 c000fbc:	4618      	mov	r0, r3
 c000fbe:	f002 fcf5 	bl	c0039ac <HAL_RCCEx_PeriphCLKConfig>
 c000fc2:	4603      	mov	r3, r0
 c000fc4:	2b00      	cmp	r3, #0
 c000fc6:	d001      	beq.n	c000fcc <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 c000fc8:	f7ff ff50 	bl	c000e6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 c000fcc:	4b1c      	ldr	r3, [pc, #112]	@ (c001040 <HAL_UART_MspInit+0xc8>)
 c000fce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 c000fd2:	4a1b      	ldr	r2, [pc, #108]	@ (c001040 <HAL_UART_MspInit+0xc8>)
 c000fd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 c000fd8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 c000fdc:	4b18      	ldr	r3, [pc, #96]	@ (c001040 <HAL_UART_MspInit+0xc8>)
 c000fde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 c000fe2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 c000fe6:	60fb      	str	r3, [r7, #12]
 c000fe8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 c000fea:	4b15      	ldr	r3, [pc, #84]	@ (c001040 <HAL_UART_MspInit+0xc8>)
 c000fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c000ff0:	4a13      	ldr	r2, [pc, #76]	@ (c001040 <HAL_UART_MspInit+0xc8>)
 c000ff2:	f043 0308 	orr.w	r3, r3, #8
 c000ff6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 c000ffa:	4b11      	ldr	r3, [pc, #68]	@ (c001040 <HAL_UART_MspInit+0xc8>)
 c000ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c001000:	f003 0308 	and.w	r3, r3, #8
 c001004:	60bb      	str	r3, [r7, #8]
 c001006:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 c001008:	f44f 7340 	mov.w	r3, #768	@ 0x300
 c00100c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c001010:	2302      	movs	r3, #2
 c001012:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c001016:	2300      	movs	r3, #0
 c001018:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c00101c:	2300      	movs	r3, #0
 c00101e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 c001022:	2307      	movs	r3, #7
 c001024:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 c001028:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 c00102c:	4619      	mov	r1, r3
 c00102e:	4805      	ldr	r0, [pc, #20]	@ (c001044 <HAL_UART_MspInit+0xcc>)
 c001030:	f000 fcd8 	bl	c0019e4 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 c001034:	bf00      	nop
 c001036:	37f0      	adds	r7, #240	@ 0xf0
 c001038:	46bd      	mov	sp, r7
 c00103a:	bd80      	pop	{r7, pc}
 c00103c:	50004800 	.word	0x50004800
 c001040:	56020c00 	.word	0x56020c00
 c001044:	52020c00 	.word	0x52020c00

0c001048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c001048:	b480      	push	{r7}
 c00104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 c00104c:	bf00      	nop
 c00104e:	e7fd      	b.n	c00104c <NMI_Handler+0x4>

0c001050 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c001050:	b480      	push	{r7}
 c001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c001054:	bf00      	nop
 c001056:	e7fd      	b.n	c001054 <HardFault_Handler+0x4>

0c001058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c001058:	b480      	push	{r7}
 c00105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c00105c:	bf00      	nop
 c00105e:	e7fd      	b.n	c00105c <MemManage_Handler+0x4>

0c001060 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c001060:	b480      	push	{r7}
 c001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c001064:	bf00      	nop
 c001066:	e7fd      	b.n	c001064 <BusFault_Handler+0x4>

0c001068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c001068:	b480      	push	{r7}
 c00106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c00106c:	bf00      	nop
 c00106e:	e7fd      	b.n	c00106c <UsageFault_Handler+0x4>

0c001070 <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c001070:	b480      	push	{r7}
 c001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c001074:	bf00      	nop
 c001076:	e7fd      	b.n	c001074 <SecureFault_Handler+0x4>

0c001078 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c001078:	b480      	push	{r7}
 c00107a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c00107c:	bf00      	nop
 c00107e:	46bd      	mov	sp, r7
 c001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001084:	4770      	bx	lr

0c001086 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c001086:	b480      	push	{r7}
 c001088:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c00108a:	bf00      	nop
 c00108c:	46bd      	mov	sp, r7
 c00108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001092:	4770      	bx	lr

0c001094 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c001094:	b480      	push	{r7}
 c001096:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c001098:	bf00      	nop
 c00109a:	46bd      	mov	sp, r7
 c00109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0010a0:	4770      	bx	lr

0c0010a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c0010a2:	b580      	push	{r7, lr}
 c0010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c0010a6:	f000 fa87 	bl	c0015b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();
 c0010aa:	f7ff fe6f 	bl	c000d8c <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 c0010ae:	bf00      	nop
 c0010b0:	bd80      	pop	{r7, pc}

0c0010b2 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 c0010b2:	b580      	push	{r7, lr}
 c0010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 c0010b6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 c0010ba:	f000 fe83 	bl	c001dc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 c0010be:	bf00      	nop
 c0010c0:	bd80      	pop	{r7, pc}
	...

0c0010c4 <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c0010c4:	b480      	push	{r7}
 c0010c6:	af00      	add	r7, sp, #0
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c0010c8:	4b13      	ldr	r3, [pc, #76]	@ (c001118 <TZ_SAU_Setup+0x54>)
 c0010ca:	2202      	movs	r2, #2
 c0010cc:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c0010ce:	4b13      	ldr	r3, [pc, #76]	@ (c00111c <TZ_SAU_Setup+0x58>)
 c0010d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c0010d4:	4a11      	ldr	r2, [pc, #68]	@ (c00111c <TZ_SAU_Setup+0x58>)
 c0010d6:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 c0010da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c0010de:	4b10      	ldr	r3, [pc, #64]	@ (c001120 <TZ_SAU_Setup+0x5c>)
 c0010e0:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c0010e2:	f023 53e0 	bic.w	r3, r3, #469762048	@ 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c0010e6:	4a0e      	ldr	r2, [pc, #56]	@ (c001120 <TZ_SAU_Setup+0x5c>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c0010e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c0010ec:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c0010ee:	4b0d      	ldr	r3, [pc, #52]	@ (c001124 <TZ_SAU_Setup+0x60>)
 c0010f0:	2200      	movs	r2, #0
 c0010f2:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c0010f6:	4b0b      	ldr	r3, [pc, #44]	@ (c001124 <TZ_SAU_Setup+0x60>)
 c0010f8:	2200      	movs	r2, #0
 c0010fa:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c0010fe:	4b09      	ldr	r3, [pc, #36]	@ (c001124 <TZ_SAU_Setup+0x60>)
 c001100:	2200      	movs	r2, #0
 c001102:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c001106:	4b07      	ldr	r3, [pc, #28]	@ (c001124 <TZ_SAU_Setup+0x60>)
 c001108:	2200      	movs	r2, #0
 c00110a:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c
  #endif

}
 c00110e:	bf00      	nop
 c001110:	46bd      	mov	sp, r7
 c001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001116:	4770      	bx	lr
 c001118:	e000edd0 	.word	0xe000edd0
 c00111c:	e000ed00 	.word	0xe000ed00
 c001120:	e000ef30 	.word	0xe000ef30
 c001124:	e000e100 	.word	0xe000e100

0c001128 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 c001128:	b580      	push	{r7, lr}
 c00112a:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c00112c:	f7ff ffca 	bl	c0010c4 <TZ_SAU_Setup>

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));     /* set CP10 and CP11 Full Access */
 c001130:	4b1a      	ldr	r3, [pc, #104]	@ (c00119c <SystemInit+0x74>)
 c001132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c001136:	4a19      	ldr	r2, [pc, #100]	@ (c00119c <SystemInit+0x74>)
 c001138:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 c00113c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c001140:	4b17      	ldr	r3, [pc, #92]	@ (c0011a0 <SystemInit+0x78>)
 c001142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c001146:	4a16      	ldr	r2, [pc, #88]	@ (c0011a0 <SystemInit+0x78>)
 c001148:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 c00114c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 c001150:	4b14      	ldr	r3, [pc, #80]	@ (c0011a4 <SystemInit+0x7c>)
 c001152:	2201      	movs	r2, #1
 c001154:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 c001156:	4b13      	ldr	r3, [pc, #76]	@ (c0011a4 <SystemInit+0x7c>)
 c001158:	2200      	movs	r2, #0
 c00115a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 c00115c:	4b11      	ldr	r3, [pc, #68]	@ (c0011a4 <SystemInit+0x7c>)
 c00115e:	2200      	movs	r2, #0
 c001160:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 c001162:	4b10      	ldr	r3, [pc, #64]	@ (c0011a4 <SystemInit+0x7c>)
 c001164:	2200      	movs	r2, #0
 c001166:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 c001168:	4b0e      	ldr	r3, [pc, #56]	@ (c0011a4 <SystemInit+0x7c>)
 c00116a:	681b      	ldr	r3, [r3, #0]
 c00116c:	4a0d      	ldr	r2, [pc, #52]	@ (c0011a4 <SystemInit+0x7c>)
 c00116e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 c001172:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 c001176:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 c001178:	4b0a      	ldr	r3, [pc, #40]	@ (c0011a4 <SystemInit+0x7c>)
 c00117a:	2200      	movs	r2, #0
 c00117c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 c00117e:	4b09      	ldr	r3, [pc, #36]	@ (c0011a4 <SystemInit+0x7c>)
 c001180:	681b      	ldr	r3, [r3, #0]
 c001182:	4a08      	ldr	r2, [pc, #32]	@ (c0011a4 <SystemInit+0x7c>)
 c001184:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 c001188:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 c00118a:	4b06      	ldr	r3, [pc, #24]	@ (c0011a4 <SystemInit+0x7c>)
 c00118c:	2200      	movs	r2, #0
 c00118e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 c001190:	4b02      	ldr	r3, [pc, #8]	@ (c00119c <SystemInit+0x74>)
 c001192:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 c001196:	609a      	str	r2, [r3, #8]
#endif
}
 c001198:	bf00      	nop
 c00119a:	bd80      	pop	{r7, pc}
 c00119c:	e000ed00 	.word	0xe000ed00
 c0011a0:	e002ed00 	.word	0xe002ed00
 c0011a4:	56020c00 	.word	0x56020c00

0c0011a8 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c0011a8:	b480      	push	{r7}
 c0011aa:	b089      	sub	sp, #36	@ 0x24
 c0011ac:	af00      	add	r7, sp, #0
  uint32_t pllr, pllsource, pllm , tmp, pllfracen, msirange;
  float_t fracn1, pllvco;

  /* Get MSI Range frequency--------------------------------------------------*/
  if(READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 c0011ae:	4b73      	ldr	r3, [pc, #460]	@ (c00137c <SystemCoreClockUpdate+0x1d4>)
 c0011b0:	689b      	ldr	r3, [r3, #8]
 c0011b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c0011b6:	2b00      	cmp	r3, #0
 c0011b8:	d107      	bne.n	c0011ca <SystemCoreClockUpdate+0x22>
  {
    /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 c0011ba:	4b70      	ldr	r3, [pc, #448]	@ (c00137c <SystemCoreClockUpdate+0x1d4>)
 c0011bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c0011c0:	0b1b      	lsrs	r3, r3, #12
 c0011c2:	f003 030f 	and.w	r3, r3, #15
 c0011c6:	61fb      	str	r3, [r7, #28]
 c0011c8:	e005      	b.n	c0011d6 <SystemCoreClockUpdate+0x2e>
  }
  else
  {
    /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 c0011ca:	4b6c      	ldr	r3, [pc, #432]	@ (c00137c <SystemCoreClockUpdate+0x1d4>)
 c0011cc:	689b      	ldr	r3, [r3, #8]
 c0011ce:	0f1b      	lsrs	r3, r3, #28
 c0011d0:	f003 030f 	and.w	r3, r3, #15
 c0011d4:	61fb      	str	r3, [r7, #28]
  }

  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c0011d6:	4a6a      	ldr	r2, [pc, #424]	@ (c001380 <SystemCoreClockUpdate+0x1d8>)
 c0011d8:	69fb      	ldr	r3, [r7, #28]
 c0011da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0011de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 c0011e0:	4b66      	ldr	r3, [pc, #408]	@ (c00137c <SystemCoreClockUpdate+0x1d4>)
 c0011e2:	69db      	ldr	r3, [r3, #28]
 c0011e4:	f003 030c 	and.w	r3, r3, #12
 c0011e8:	2b0c      	cmp	r3, #12
 c0011ea:	f200 80ae 	bhi.w	c00134a <SystemCoreClockUpdate+0x1a2>
 c0011ee:	a201      	add	r2, pc, #4	@ (adr r2, c0011f4 <SystemCoreClockUpdate+0x4c>)
 c0011f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c0011f4:	0c001229 	.word	0x0c001229
 c0011f8:	0c00134b 	.word	0x0c00134b
 c0011fc:	0c00134b 	.word	0x0c00134b
 c001200:	0c00134b 	.word	0x0c00134b
 c001204:	0c001231 	.word	0x0c001231
 c001208:	0c00134b 	.word	0x0c00134b
 c00120c:	0c00134b 	.word	0x0c00134b
 c001210:	0c00134b 	.word	0x0c00134b
 c001214:	0c001239 	.word	0x0c001239
 c001218:	0c00134b 	.word	0x0c00134b
 c00121c:	0c00134b 	.word	0x0c00134b
 c001220:	0c00134b 	.word	0x0c00134b
 c001224:	0c001241 	.word	0x0c001241
  {
  case 0x00:  /* MSI used as system clock source */
    SystemCoreClock = msirange;
 c001228:	4a56      	ldr	r2, [pc, #344]	@ (c001384 <SystemCoreClockUpdate+0x1dc>)
 c00122a:	69fb      	ldr	r3, [r7, #28]
 c00122c:	6013      	str	r3, [r2, #0]
    break;
 c00122e:	e090      	b.n	c001352 <SystemCoreClockUpdate+0x1aa>

  case 0x04:  /* HSI used as system clock source */
    SystemCoreClock = HSI_VALUE;
 c001230:	4b54      	ldr	r3, [pc, #336]	@ (c001384 <SystemCoreClockUpdate+0x1dc>)
 c001232:	4a55      	ldr	r2, [pc, #340]	@ (c001388 <SystemCoreClockUpdate+0x1e0>)
 c001234:	601a      	str	r2, [r3, #0]
    break;
 c001236:	e08c      	b.n	c001352 <SystemCoreClockUpdate+0x1aa>

  case 0x08:  /* HSE used as system clock source */
    SystemCoreClock = HSE_VALUE;
 c001238:	4b52      	ldr	r3, [pc, #328]	@ (c001384 <SystemCoreClockUpdate+0x1dc>)
 c00123a:	4a53      	ldr	r2, [pc, #332]	@ (c001388 <SystemCoreClockUpdate+0x1e0>)
 c00123c:	601a      	str	r2, [r3, #0]
    break;
 c00123e:	e088      	b.n	c001352 <SystemCoreClockUpdate+0x1aa>

  case 0x0C:  /* PLL used as system clock source */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 c001240:	4b4e      	ldr	r3, [pc, #312]	@ (c00137c <SystemCoreClockUpdate+0x1d4>)
 c001242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c001244:	f003 0303 	and.w	r3, r3, #3
 c001248:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M)>> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 c00124a:	4b4c      	ldr	r3, [pc, #304]	@ (c00137c <SystemCoreClockUpdate+0x1d4>)
 c00124c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00124e:	0a1b      	lsrs	r3, r3, #8
 c001250:	f003 030f 	and.w	r3, r3, #15
 c001254:	3301      	adds	r3, #1
 c001256:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN)>>RCC_PLL1CFGR_PLL1FRACEN_Pos);
 c001258:	4b48      	ldr	r3, [pc, #288]	@ (c00137c <SystemCoreClockUpdate+0x1d4>)
 c00125a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00125c:	091b      	lsrs	r3, r3, #4
 c00125e:	f003 0301 	and.w	r3, r3, #1
 c001262:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN)>> RCC_PLL1FRACR_PLL1FRACN_Pos));
 c001264:	4b45      	ldr	r3, [pc, #276]	@ (c00137c <SystemCoreClockUpdate+0x1d4>)
 c001266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c001268:	08db      	lsrs	r3, r3, #3
 c00126a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 c00126e:	68fa      	ldr	r2, [r7, #12]
 c001270:	fb02 f303 	mul.w	r3, r2, r3
 c001274:	ee07 3a90 	vmov	s15, r3
 c001278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c00127c:	edc7 7a02 	vstr	s15, [r7, #8]

      switch (pllsource)
 c001280:	697b      	ldr	r3, [r7, #20]
 c001282:	2b03      	cmp	r3, #3
 c001284:	d019      	beq.n	c0012ba <SystemCoreClockUpdate+0x112>
 c001286:	697b      	ldr	r3, [r7, #20]
 c001288:	2b03      	cmp	r3, #3
 c00128a:	d822      	bhi.n	c0012d2 <SystemCoreClockUpdate+0x12a>
 c00128c:	697b      	ldr	r3, [r7, #20]
 c00128e:	2b00      	cmp	r3, #0
 c001290:	d003      	beq.n	c00129a <SystemCoreClockUpdate+0xf2>
 c001292:	697b      	ldr	r3, [r7, #20]
 c001294:	2b02      	cmp	r3, #2
 c001296:	d004      	beq.n	c0012a2 <SystemCoreClockUpdate+0xfa>
 c001298:	e01b      	b.n	c0012d2 <SystemCoreClockUpdate+0x12a>
      {
      case 0x00:  /* No clock sent to PLL*/
        pllvco = (float_t)0U;
 c00129a:	f04f 0300 	mov.w	r3, #0
 c00129e:	61bb      	str	r3, [r7, #24]
        break;
 c0012a0:	e026      	b.n	c0012f0 <SystemCoreClockUpdate+0x148>

      case 0x02:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm);
 c0012a2:	693b      	ldr	r3, [r7, #16]
 c0012a4:	ee07 3a90 	vmov	s15, r3
 c0012a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c0012ac:	eddf 6a37 	vldr	s13, [pc, #220]	@ c00138c <SystemCoreClockUpdate+0x1e4>
 c0012b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c0012b4:	edc7 7a06 	vstr	s15, [r7, #24]
        break;
 c0012b8:	e01a      	b.n	c0012f0 <SystemCoreClockUpdate+0x148>

      case 0x03:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm);
 c0012ba:	693b      	ldr	r3, [r7, #16]
 c0012bc:	ee07 3a90 	vmov	s15, r3
 c0012c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c0012c4:	eddf 6a31 	vldr	s13, [pc, #196]	@ c00138c <SystemCoreClockUpdate+0x1e4>
 c0012c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c0012cc:	edc7 7a06 	vstr	s15, [r7, #24]
        break;
 c0012d0:	e00e      	b.n	c0012f0 <SystemCoreClockUpdate+0x148>

      default:    /* MSI used as PLL clock source */
        pllvco = ((float_t)msirange / (float_t)pllm);
 c0012d2:	69fb      	ldr	r3, [r7, #28]
 c0012d4:	ee07 3a90 	vmov	s15, r3
 c0012d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c0012dc:	693b      	ldr	r3, [r7, #16]
 c0012de:	ee07 3a90 	vmov	s15, r3
 c0012e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c0012e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c0012ea:	edc7 7a06 	vstr	s15, [r7, #24]
        break;
 c0012ee:	bf00      	nop
      }

      pllvco = pllvco * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + (fracn1/(float_t)0x2000) + (float_t)1U);
 c0012f0:	4b22      	ldr	r3, [pc, #136]	@ (c00137c <SystemCoreClockUpdate+0x1d4>)
 c0012f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c0012f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c0012f8:	ee07 3a90 	vmov	s15, r3
 c0012fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c001300:	edd7 6a02 	vldr	s13, [r7, #8]
 c001304:	ed9f 6a22 	vldr	s12, [pc, #136]	@ c001390 <SystemCoreClockUpdate+0x1e8>
 c001308:	eec6 7a86 	vdiv.f32	s15, s13, s12
 c00130c:	ee77 7a27 	vadd.f32	s15, s14, s15
 c001310:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c001314:	ee77 7a87 	vadd.f32	s15, s15, s14
 c001318:	ed97 7a06 	vldr	s14, [r7, #24]
 c00131c:	ee67 7a27 	vmul.f32	s15, s14, s15
 c001320:	edc7 7a06 	vstr	s15, [r7, #24]
      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U );
 c001324:	4b15      	ldr	r3, [pc, #84]	@ (c00137c <SystemCoreClockUpdate+0x1d4>)
 c001326:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c001328:	0e1b      	lsrs	r3, r3, #24
 c00132a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c00132e:	3301      	adds	r3, #1
 c001330:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (uint32_t)((uint32_t)pllvco/pllr);
 c001332:	edd7 7a06 	vldr	s15, [r7, #24]
 c001336:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c00133a:	ee17 2a90 	vmov	r2, s15
 c00133e:	687b      	ldr	r3, [r7, #4]
 c001340:	fbb2 f3f3 	udiv	r3, r2, r3
 c001344:	4a0f      	ldr	r2, [pc, #60]	@ (c001384 <SystemCoreClockUpdate+0x1dc>)
 c001346:	6013      	str	r3, [r2, #0]
      break;
 c001348:	e003      	b.n	c001352 <SystemCoreClockUpdate+0x1aa>

  default:
    SystemCoreClock = msirange;
 c00134a:	4a0e      	ldr	r2, [pc, #56]	@ (c001384 <SystemCoreClockUpdate+0x1dc>)
 c00134c:	69fb      	ldr	r3, [r7, #28]
 c00134e:	6013      	str	r3, [r2, #0]
    break;
 c001350:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos)];
 c001352:	4b0a      	ldr	r3, [pc, #40]	@ (c00137c <SystemCoreClockUpdate+0x1d4>)
 c001354:	6a1b      	ldr	r3, [r3, #32]
 c001356:	f003 030f 	and.w	r3, r3, #15
 c00135a:	4a0e      	ldr	r2, [pc, #56]	@ (c001394 <SystemCoreClockUpdate+0x1ec>)
 c00135c:	5cd3      	ldrb	r3, [r2, r3]
 c00135e:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c001360:	4b08      	ldr	r3, [pc, #32]	@ (c001384 <SystemCoreClockUpdate+0x1dc>)
 c001362:	681a      	ldr	r2, [r3, #0]
 c001364:	683b      	ldr	r3, [r7, #0]
 c001366:	fa22 f303 	lsr.w	r3, r2, r3
 c00136a:	4a06      	ldr	r2, [pc, #24]	@ (c001384 <SystemCoreClockUpdate+0x1dc>)
 c00136c:	6013      	str	r3, [r2, #0]
}
 c00136e:	bf00      	nop
 c001370:	3724      	adds	r7, #36	@ 0x24
 c001372:	46bd      	mov	sp, r7
 c001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001378:	4770      	bx	lr
 c00137a:	bf00      	nop
 c00137c:	56020c00 	.word	0x56020c00
 c001380:	0c006fc8 	.word	0x0c006fc8
 c001384:	30000108 	.word	0x30000108
 c001388:	00f42400 	.word	0x00f42400
 c00138c:	4b742400 	.word	0x4b742400
 c001390:	46000000 	.word	0x46000000
 c001394:	0c006fb0 	.word	0x0c006fb0

0c001398 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c001398:	b580      	push	{r7, lr}
 c00139a:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c00139c:	f7ff ff04 	bl	c0011a8 <SystemCoreClockUpdate>

  return SystemCoreClock;
 c0013a0:	4b1c      	ldr	r3, [pc, #112]	@ (c001414 <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c0013a2:	681b      	ldr	r3, [r3, #0]
}
 c0013a4:	4618      	mov	r0, r3
 c0013a6:	46bd      	mov	sp, r7
 c0013a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0013ac:	4671      	mov	r1, lr
 c0013ae:	4672      	mov	r2, lr
 c0013b0:	4673      	mov	r3, lr
 c0013b2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c0013b6:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c0013ba:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c0013be:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c0013c2:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c0013c6:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c0013ca:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c0013ce:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c0013d2:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c0013d6:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c0013da:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c0013de:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c0013e2:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c0013e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c0013ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c0013ee:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c0013f2:	f38e 8c00 	msr	CPSR_fs, lr
 c0013f6:	b410      	push	{r4}
 c0013f8:	eef1 ca10 	vmrs	ip, fpscr
 c0013fc:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c001400:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c001404:	ea0c 0c04 	and.w	ip, ip, r4
 c001408:	eee1 ca10 	vmsr	fpscr, ip
 c00140c:	bc10      	pop	{r4}
 c00140e:	46f4      	mov	ip, lr
 c001410:	4774      	bxns	lr
 c001412:	bf00      	nop
 c001414:	30000108 	.word	0x30000108

0c001418 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c001418:	f8df d034 	ldr.w	sp, [pc, #52]	@ c001450 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 c00141c:	f7ff fe84 	bl	c001128 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c001420:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c001422:	e003      	b.n	c00142c <LoopCopyDataInit>

0c001424 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c001424:	4b0b      	ldr	r3, [pc, #44]	@ (c001454 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c001426:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c001428:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c00142a:	3104      	adds	r1, #4

0c00142c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c00142c:	480a      	ldr	r0, [pc, #40]	@ (c001458 <LoopForever+0xa>)
	ldr	r3, =_edata
 c00142e:	4b0b      	ldr	r3, [pc, #44]	@ (c00145c <LoopForever+0xe>)
	adds	r2, r0, r1
 c001430:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c001432:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c001434:	d3f6      	bcc.n	c001424 <CopyDataInit>
	ldr	r2, =_sbss
 c001436:	4a0a      	ldr	r2, [pc, #40]	@ (c001460 <LoopForever+0x12>)
	b	LoopFillZerobss
 c001438:	e002      	b.n	c001440 <LoopFillZerobss>

0c00143a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c00143a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c00143c:	f842 3b04 	str.w	r3, [r2], #4

0c001440 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c001440:	4b08      	ldr	r3, [pc, #32]	@ (c001464 <LoopForever+0x16>)
	cmp	r2, r3
 c001442:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c001444:	d3f9      	bcc.n	c00143a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 c001446:	f005 fd83 	bl	c006f50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c00144a:	f7ff f901 	bl	c000650 <main>

0c00144e <LoopForever>:

LoopForever:
    b LoopForever
 c00144e:	e7fe      	b.n	c00144e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c001450:	30040000 	.word	0x30040000
	ldr	r3, =_sidata
 c001454:	0c0070c0 	.word	0x0c0070c0
	ldr	r0, =_sdata
 c001458:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c00145c:	30000111 	.word	0x30000111
	ldr	r2, =_sbss
 c001460:	30000114 	.word	0x30000114
	ldr	r3, = _ebss
 c001464:	300001e0 	.word	0x300001e0

0c001468 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c001468:	e7fe      	b.n	c001468 <ADC1_IRQHandler>
	...

0c00146c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c00146c:	b580      	push	{r7, lr}
 c00146e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 c001470:	4b12      	ldr	r3, [pc, #72]	@ (c0014bc <HAL_Init+0x50>)
 c001472:	681b      	ldr	r3, [r3, #0]
 c001474:	4a11      	ldr	r2, [pc, #68]	@ (c0014bc <HAL_Init+0x50>)
 c001476:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 c00147a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 c00147c:	2003      	movs	r0, #3
 c00147e:	f000 f968 	bl	c001752 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 c001482:	f002 f8b5 	bl	c0035f0 <HAL_RCC_GetSysClockFreq>
 c001486:	4602      	mov	r2, r0
 c001488:	4b0d      	ldr	r3, [pc, #52]	@ (c0014c0 <HAL_Init+0x54>)
 c00148a:	6a1b      	ldr	r3, [r3, #32]
 c00148c:	f003 030f 	and.w	r3, r3, #15
 c001490:	490c      	ldr	r1, [pc, #48]	@ (c0014c4 <HAL_Init+0x58>)
 c001492:	5ccb      	ldrb	r3, [r1, r3]
 c001494:	fa22 f303 	lsr.w	r3, r2, r3
 c001498:	4a0b      	ldr	r2, [pc, #44]	@ (c0014c8 <HAL_Init+0x5c>)
 c00149a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 c00149c:	2004      	movs	r0, #4
 c00149e:	f000 f9ad 	bl	c0017fc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c0014a2:	2000      	movs	r0, #0
 c0014a4:	f000 f812 	bl	c0014cc <HAL_InitTick>
 c0014a8:	4603      	mov	r3, r0
 c0014aa:	2b00      	cmp	r3, #0
 c0014ac:	d001      	beq.n	c0014b2 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 c0014ae:	2301      	movs	r3, #1
 c0014b0:	e002      	b.n	c0014b8 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 c0014b2:	f7ff fd37 	bl	c000f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 c0014b6:	2300      	movs	r3, #0
}
 c0014b8:	4618      	mov	r0, r3
 c0014ba:	bd80      	pop	{r7, pc}
 c0014bc:	50022000 	.word	0x50022000
 c0014c0:	56020c00 	.word	0x56020c00
 c0014c4:	0c006fb0 	.word	0x0c006fb0
 c0014c8:	30000108 	.word	0x30000108

0c0014cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c0014cc:	b580      	push	{r7, lr}
 c0014ce:	b084      	sub	sp, #16
 c0014d0:	af00      	add	r7, sp, #0
 c0014d2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 c0014d4:	2300      	movs	r3, #0
 c0014d6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 c0014d8:	4b33      	ldr	r3, [pc, #204]	@ (c0015a8 <HAL_InitTick+0xdc>)
 c0014da:	781b      	ldrb	r3, [r3, #0]
 c0014dc:	2b00      	cmp	r3, #0
 c0014de:	d101      	bne.n	c0014e4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 c0014e0:	2301      	movs	r3, #1
 c0014e2:	e05c      	b.n	c00159e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 c0014e4:	4b31      	ldr	r3, [pc, #196]	@ (c0015ac <HAL_InitTick+0xe0>)
 c0014e6:	681b      	ldr	r3, [r3, #0]
 c0014e8:	f003 0304 	and.w	r3, r3, #4
 c0014ec:	2b04      	cmp	r3, #4
 c0014ee:	d10c      	bne.n	c00150a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 c0014f0:	4b2f      	ldr	r3, [pc, #188]	@ (c0015b0 <HAL_InitTick+0xe4>)
 c0014f2:	681a      	ldr	r2, [r3, #0]
 c0014f4:	4b2c      	ldr	r3, [pc, #176]	@ (c0015a8 <HAL_InitTick+0xdc>)
 c0014f6:	781b      	ldrb	r3, [r3, #0]
 c0014f8:	4619      	mov	r1, r3
 c0014fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 c0014fe:	fbb3 f3f1 	udiv	r3, r3, r1
 c001502:	fbb2 f3f3 	udiv	r3, r2, r3
 c001506:	60fb      	str	r3, [r7, #12]
 c001508:	e037      	b.n	c00157a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 c00150a:	f000 f9cf 	bl	c0018ac <HAL_SYSTICK_GetCLKSourceConfig>
 c00150e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 c001510:	68bb      	ldr	r3, [r7, #8]
 c001512:	2b02      	cmp	r3, #2
 c001514:	d023      	beq.n	c00155e <HAL_InitTick+0x92>
 c001516:	68bb      	ldr	r3, [r7, #8]
 c001518:	2b02      	cmp	r3, #2
 c00151a:	d82d      	bhi.n	c001578 <HAL_InitTick+0xac>
 c00151c:	68bb      	ldr	r3, [r7, #8]
 c00151e:	2b00      	cmp	r3, #0
 c001520:	d003      	beq.n	c00152a <HAL_InitTick+0x5e>
 c001522:	68bb      	ldr	r3, [r7, #8]
 c001524:	2b01      	cmp	r3, #1
 c001526:	d00d      	beq.n	c001544 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 c001528:	e026      	b.n	c001578 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 c00152a:	4b21      	ldr	r3, [pc, #132]	@ (c0015b0 <HAL_InitTick+0xe4>)
 c00152c:	681a      	ldr	r2, [r3, #0]
 c00152e:	4b1e      	ldr	r3, [pc, #120]	@ (c0015a8 <HAL_InitTick+0xdc>)
 c001530:	781b      	ldrb	r3, [r3, #0]
 c001532:	4619      	mov	r1, r3
 c001534:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 c001538:	fbb3 f3f1 	udiv	r3, r3, r1
 c00153c:	fbb2 f3f3 	udiv	r3, r2, r3
 c001540:	60fb      	str	r3, [r7, #12]
        break;
 c001542:	e01a      	b.n	c00157a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 c001544:	4b18      	ldr	r3, [pc, #96]	@ (c0015a8 <HAL_InitTick+0xdc>)
 c001546:	781b      	ldrb	r3, [r3, #0]
 c001548:	461a      	mov	r2, r3
 c00154a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 c00154e:	fbb3 f3f2 	udiv	r3, r3, r2
 c001552:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 c001556:	fbb2 f3f3 	udiv	r3, r2, r3
 c00155a:	60fb      	str	r3, [r7, #12]
        break;
 c00155c:	e00d      	b.n	c00157a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 c00155e:	4b12      	ldr	r3, [pc, #72]	@ (c0015a8 <HAL_InitTick+0xdc>)
 c001560:	781b      	ldrb	r3, [r3, #0]
 c001562:	461a      	mov	r2, r3
 c001564:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 c001568:	fbb3 f3f2 	udiv	r3, r3, r2
 c00156c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 c001570:	fbb2 f3f3 	udiv	r3, r2, r3
 c001574:	60fb      	str	r3, [r7, #12]
        break;
 c001576:	e000      	b.n	c00157a <HAL_InitTick+0xae>
        break;
 c001578:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 c00157a:	68f8      	ldr	r0, [r7, #12]
 c00157c:	f000 f91c 	bl	c0017b8 <HAL_SYSTICK_Config>
 c001580:	4603      	mov	r3, r0
 c001582:	2b00      	cmp	r3, #0
 c001584:	d001      	beq.n	c00158a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 c001586:	2301      	movs	r3, #1
 c001588:	e009      	b.n	c00159e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c00158a:	2200      	movs	r2, #0
 c00158c:	6879      	ldr	r1, [r7, #4]
 c00158e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 c001592:	f000 f8e9 	bl	c001768 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 c001596:	4a07      	ldr	r2, [pc, #28]	@ (c0015b4 <HAL_InitTick+0xe8>)
 c001598:	687b      	ldr	r3, [r7, #4]
 c00159a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 c00159c:	2300      	movs	r3, #0
}
 c00159e:	4618      	mov	r0, r3
 c0015a0:	3710      	adds	r7, #16
 c0015a2:	46bd      	mov	sp, r7
 c0015a4:	bd80      	pop	{r7, pc}
 c0015a6:	bf00      	nop
 c0015a8:	30000110 	.word	0x30000110
 c0015ac:	e000e010 	.word	0xe000e010
 c0015b0:	30000108 	.word	0x30000108
 c0015b4:	3000010c 	.word	0x3000010c

0c0015b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c0015b8:	b480      	push	{r7}
 c0015ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c0015bc:	4b06      	ldr	r3, [pc, #24]	@ (c0015d8 <HAL_IncTick+0x20>)
 c0015be:	781b      	ldrb	r3, [r3, #0]
 c0015c0:	461a      	mov	r2, r3
 c0015c2:	4b06      	ldr	r3, [pc, #24]	@ (c0015dc <HAL_IncTick+0x24>)
 c0015c4:	681b      	ldr	r3, [r3, #0]
 c0015c6:	4413      	add	r3, r2
 c0015c8:	4a04      	ldr	r2, [pc, #16]	@ (c0015dc <HAL_IncTick+0x24>)
 c0015ca:	6013      	str	r3, [r2, #0]
}
 c0015cc:	bf00      	nop
 c0015ce:	46bd      	mov	sp, r7
 c0015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0015d4:	4770      	bx	lr
 c0015d6:	bf00      	nop
 c0015d8:	30000110 	.word	0x30000110
 c0015dc:	300001dc 	.word	0x300001dc

0c0015e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 c0015e0:	b480      	push	{r7}
 c0015e2:	af00      	add	r7, sp, #0
  return uwTick;
 c0015e4:	4b03      	ldr	r3, [pc, #12]	@ (c0015f4 <HAL_GetTick+0x14>)
 c0015e6:	681b      	ldr	r3, [r3, #0]
}
 c0015e8:	4618      	mov	r0, r3
 c0015ea:	46bd      	mov	sp, r7
 c0015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0015f0:	4770      	bx	lr
 c0015f2:	bf00      	nop
 c0015f4:	300001dc 	.word	0x300001dc

0c0015f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c0015f8:	b480      	push	{r7}
 c0015fa:	b085      	sub	sp, #20
 c0015fc:	af00      	add	r7, sp, #0
 c0015fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c001600:	687b      	ldr	r3, [r7, #4]
 c001602:	f003 0307 	and.w	r3, r3, #7
 c001606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c001608:	4b0c      	ldr	r3, [pc, #48]	@ (c00163c <__NVIC_SetPriorityGrouping+0x44>)
 c00160a:	68db      	ldr	r3, [r3, #12]
 c00160c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c00160e:	68ba      	ldr	r2, [r7, #8]
 c001610:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 c001614:	4013      	ands	r3, r2
 c001616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c001618:	68fb      	ldr	r3, [r7, #12]
 c00161a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c00161c:	68bb      	ldr	r3, [r7, #8]
 c00161e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c001620:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 c001624:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 c001628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c00162a:	4a04      	ldr	r2, [pc, #16]	@ (c00163c <__NVIC_SetPriorityGrouping+0x44>)
 c00162c:	68bb      	ldr	r3, [r7, #8]
 c00162e:	60d3      	str	r3, [r2, #12]
}
 c001630:	bf00      	nop
 c001632:	3714      	adds	r7, #20
 c001634:	46bd      	mov	sp, r7
 c001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00163a:	4770      	bx	lr
 c00163c:	e000ed00 	.word	0xe000ed00

0c001640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c001640:	b480      	push	{r7}
 c001642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c001644:	4b04      	ldr	r3, [pc, #16]	@ (c001658 <__NVIC_GetPriorityGrouping+0x18>)
 c001646:	68db      	ldr	r3, [r3, #12]
 c001648:	0a1b      	lsrs	r3, r3, #8
 c00164a:	f003 0307 	and.w	r3, r3, #7
}
 c00164e:	4618      	mov	r0, r3
 c001650:	46bd      	mov	sp, r7
 c001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001656:	4770      	bx	lr
 c001658:	e000ed00 	.word	0xe000ed00

0c00165c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c00165c:	b480      	push	{r7}
 c00165e:	b083      	sub	sp, #12
 c001660:	af00      	add	r7, sp, #0
 c001662:	4603      	mov	r3, r0
 c001664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c00166a:	2b00      	cmp	r3, #0
 c00166c:	db0b      	blt.n	c001686 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c00166e:	79fb      	ldrb	r3, [r7, #7]
 c001670:	f003 021f 	and.w	r2, r3, #31
 c001674:	4907      	ldr	r1, [pc, #28]	@ (c001694 <__NVIC_EnableIRQ+0x38>)
 c001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c00167a:	095b      	lsrs	r3, r3, #5
 c00167c:	2001      	movs	r0, #1
 c00167e:	fa00 f202 	lsl.w	r2, r0, r2
 c001682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 c001686:	bf00      	nop
 c001688:	370c      	adds	r7, #12
 c00168a:	46bd      	mov	sp, r7
 c00168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001690:	4770      	bx	lr
 c001692:	bf00      	nop
 c001694:	e000e100 	.word	0xe000e100

0c001698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c001698:	b480      	push	{r7}
 c00169a:	b083      	sub	sp, #12
 c00169c:	af00      	add	r7, sp, #0
 c00169e:	4603      	mov	r3, r0
 c0016a0:	6039      	str	r1, [r7, #0]
 c0016a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c0016a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0016a8:	2b00      	cmp	r3, #0
 c0016aa:	db0a      	blt.n	c0016c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c0016ac:	683b      	ldr	r3, [r7, #0]
 c0016ae:	b2da      	uxtb	r2, r3
 c0016b0:	490c      	ldr	r1, [pc, #48]	@ (c0016e4 <__NVIC_SetPriority+0x4c>)
 c0016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0016b6:	0112      	lsls	r2, r2, #4
 c0016b8:	b2d2      	uxtb	r2, r2
 c0016ba:	440b      	add	r3, r1
 c0016bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c0016c0:	e00a      	b.n	c0016d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c0016c2:	683b      	ldr	r3, [r7, #0]
 c0016c4:	b2da      	uxtb	r2, r3
 c0016c6:	4908      	ldr	r1, [pc, #32]	@ (c0016e8 <__NVIC_SetPriority+0x50>)
 c0016c8:	79fb      	ldrb	r3, [r7, #7]
 c0016ca:	f003 030f 	and.w	r3, r3, #15
 c0016ce:	3b04      	subs	r3, #4
 c0016d0:	0112      	lsls	r2, r2, #4
 c0016d2:	b2d2      	uxtb	r2, r2
 c0016d4:	440b      	add	r3, r1
 c0016d6:	761a      	strb	r2, [r3, #24]
}
 c0016d8:	bf00      	nop
 c0016da:	370c      	adds	r7, #12
 c0016dc:	46bd      	mov	sp, r7
 c0016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0016e2:	4770      	bx	lr
 c0016e4:	e000e100 	.word	0xe000e100
 c0016e8:	e000ed00 	.word	0xe000ed00

0c0016ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c0016ec:	b480      	push	{r7}
 c0016ee:	b089      	sub	sp, #36	@ 0x24
 c0016f0:	af00      	add	r7, sp, #0
 c0016f2:	60f8      	str	r0, [r7, #12]
 c0016f4:	60b9      	str	r1, [r7, #8]
 c0016f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c0016f8:	68fb      	ldr	r3, [r7, #12]
 c0016fa:	f003 0307 	and.w	r3, r3, #7
 c0016fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c001700:	69fb      	ldr	r3, [r7, #28]
 c001702:	f1c3 0307 	rsb	r3, r3, #7
 c001706:	2b04      	cmp	r3, #4
 c001708:	bf28      	it	cs
 c00170a:	2304      	movcs	r3, #4
 c00170c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c00170e:	69fb      	ldr	r3, [r7, #28]
 c001710:	3304      	adds	r3, #4
 c001712:	2b06      	cmp	r3, #6
 c001714:	d902      	bls.n	c00171c <NVIC_EncodePriority+0x30>
 c001716:	69fb      	ldr	r3, [r7, #28]
 c001718:	3b03      	subs	r3, #3
 c00171a:	e000      	b.n	c00171e <NVIC_EncodePriority+0x32>
 c00171c:	2300      	movs	r3, #0
 c00171e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c001720:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 c001724:	69bb      	ldr	r3, [r7, #24]
 c001726:	fa02 f303 	lsl.w	r3, r2, r3
 c00172a:	43da      	mvns	r2, r3
 c00172c:	68bb      	ldr	r3, [r7, #8]
 c00172e:	401a      	ands	r2, r3
 c001730:	697b      	ldr	r3, [r7, #20]
 c001732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c001734:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 c001738:	697b      	ldr	r3, [r7, #20]
 c00173a:	fa01 f303 	lsl.w	r3, r1, r3
 c00173e:	43d9      	mvns	r1, r3
 c001740:	687b      	ldr	r3, [r7, #4]
 c001742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c001744:	4313      	orrs	r3, r2
         );
}
 c001746:	4618      	mov	r0, r3
 c001748:	3724      	adds	r7, #36	@ 0x24
 c00174a:	46bd      	mov	sp, r7
 c00174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001750:	4770      	bx	lr

0c001752 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c001752:	b580      	push	{r7, lr}
 c001754:	b082      	sub	sp, #8
 c001756:	af00      	add	r7, sp, #0
 c001758:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c00175a:	6878      	ldr	r0, [r7, #4]
 c00175c:	f7ff ff4c 	bl	c0015f8 <__NVIC_SetPriorityGrouping>
}
 c001760:	bf00      	nop
 c001762:	3708      	adds	r7, #8
 c001764:	46bd      	mov	sp, r7
 c001766:	bd80      	pop	{r7, pc}

0c001768 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c001768:	b580      	push	{r7, lr}
 c00176a:	b086      	sub	sp, #24
 c00176c:	af00      	add	r7, sp, #0
 c00176e:	4603      	mov	r3, r0
 c001770:	60b9      	str	r1, [r7, #8]
 c001772:	607a      	str	r2, [r7, #4]
 c001774:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c001776:	f7ff ff63 	bl	c001640 <__NVIC_GetPriorityGrouping>
 c00177a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c00177c:	687a      	ldr	r2, [r7, #4]
 c00177e:	68b9      	ldr	r1, [r7, #8]
 c001780:	6978      	ldr	r0, [r7, #20]
 c001782:	f7ff ffb3 	bl	c0016ec <NVIC_EncodePriority>
 c001786:	4602      	mov	r2, r0
 c001788:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c00178c:	4611      	mov	r1, r2
 c00178e:	4618      	mov	r0, r3
 c001790:	f7ff ff82 	bl	c001698 <__NVIC_SetPriority>
}
 c001794:	bf00      	nop
 c001796:	3718      	adds	r7, #24
 c001798:	46bd      	mov	sp, r7
 c00179a:	bd80      	pop	{r7, pc}

0c00179c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c00179c:	b580      	push	{r7, lr}
 c00179e:	b082      	sub	sp, #8
 c0017a0:	af00      	add	r7, sp, #0
 c0017a2:	4603      	mov	r3, r0
 c0017a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 c0017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0017aa:	4618      	mov	r0, r3
 c0017ac:	f7ff ff56 	bl	c00165c <__NVIC_EnableIRQ>
}
 c0017b0:	bf00      	nop
 c0017b2:	3708      	adds	r7, #8
 c0017b4:	46bd      	mov	sp, r7
 c0017b6:	bd80      	pop	{r7, pc}

0c0017b8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c0017b8:	b480      	push	{r7}
 c0017ba:	b083      	sub	sp, #12
 c0017bc:	af00      	add	r7, sp, #0
 c0017be:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c0017c0:	687b      	ldr	r3, [r7, #4]
 c0017c2:	3b01      	subs	r3, #1
 c0017c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 c0017c8:	d301      	bcc.n	c0017ce <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 c0017ca:	2301      	movs	r3, #1
 c0017cc:	e00d      	b.n	c0017ea <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 c0017ce:	4a0a      	ldr	r2, [pc, #40]	@ (c0017f8 <HAL_SYSTICK_Config+0x40>)
 c0017d0:	687b      	ldr	r3, [r7, #4]
 c0017d2:	3b01      	subs	r3, #1
 c0017d4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 c0017d6:	4b08      	ldr	r3, [pc, #32]	@ (c0017f8 <HAL_SYSTICK_Config+0x40>)
 c0017d8:	2200      	movs	r2, #0
 c0017da:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 c0017dc:	4b06      	ldr	r3, [pc, #24]	@ (c0017f8 <HAL_SYSTICK_Config+0x40>)
 c0017de:	681b      	ldr	r3, [r3, #0]
 c0017e0:	4a05      	ldr	r2, [pc, #20]	@ (c0017f8 <HAL_SYSTICK_Config+0x40>)
 c0017e2:	f043 0303 	orr.w	r3, r3, #3
 c0017e6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 c0017e8:	2300      	movs	r3, #0
}
 c0017ea:	4618      	mov	r0, r3
 c0017ec:	370c      	adds	r7, #12
 c0017ee:	46bd      	mov	sp, r7
 c0017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0017f4:	4770      	bx	lr
 c0017f6:	bf00      	nop
 c0017f8:	e000e010 	.word	0xe000e010

0c0017fc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 c0017fc:	b480      	push	{r7}
 c0017fe:	b083      	sub	sp, #12
 c001800:	af00      	add	r7, sp, #0
 c001802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 c001804:	687b      	ldr	r3, [r7, #4]
 c001806:	2b04      	cmp	r3, #4
 c001808:	d844      	bhi.n	c001894 <HAL_SYSTICK_CLKSourceConfig+0x98>
 c00180a:	a201      	add	r2, pc, #4	@ (adr r2, c001810 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 c00180c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c001810:	0c001833 	.word	0x0c001833
 c001814:	0c001851 	.word	0x0c001851
 c001818:	0c001873 	.word	0x0c001873
 c00181c:	0c001895 	.word	0x0c001895
 c001820:	0c001825 	.word	0x0c001825
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 c001824:	4b1f      	ldr	r3, [pc, #124]	@ (c0018a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c001826:	681b      	ldr	r3, [r3, #0]
 c001828:	4a1e      	ldr	r2, [pc, #120]	@ (c0018a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c00182a:	f043 0304 	orr.w	r3, r3, #4
 c00182e:	6013      	str	r3, [r2, #0]
      break;
 c001830:	e031      	b.n	c001896 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 c001832:	4b1c      	ldr	r3, [pc, #112]	@ (c0018a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c001834:	681b      	ldr	r3, [r3, #0]
 c001836:	4a1b      	ldr	r2, [pc, #108]	@ (c0018a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c001838:	f023 0304 	bic.w	r3, r3, #4
 c00183c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 c00183e:	4b1a      	ldr	r3, [pc, #104]	@ (c0018a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c001840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c001844:	4a18      	ldr	r2, [pc, #96]	@ (c0018a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c001846:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 c00184a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 c00184e:	e022      	b.n	c001896 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 c001850:	4b14      	ldr	r3, [pc, #80]	@ (c0018a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c001852:	681b      	ldr	r3, [r3, #0]
 c001854:	4a13      	ldr	r2, [pc, #76]	@ (c0018a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c001856:	f023 0304 	bic.w	r3, r3, #4
 c00185a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 c00185c:	4b12      	ldr	r3, [pc, #72]	@ (c0018a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c00185e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c001862:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 c001866:	4a10      	ldr	r2, [pc, #64]	@ (c0018a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c001868:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 c00186c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 c001870:	e011      	b.n	c001896 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 c001872:	4b0c      	ldr	r3, [pc, #48]	@ (c0018a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c001874:	681b      	ldr	r3, [r3, #0]
 c001876:	4a0b      	ldr	r2, [pc, #44]	@ (c0018a4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 c001878:	f023 0304 	bic.w	r3, r3, #4
 c00187c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 c00187e:	4b0a      	ldr	r3, [pc, #40]	@ (c0018a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c001880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c001884:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 c001888:	4a07      	ldr	r2, [pc, #28]	@ (c0018a8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 c00188a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 c00188e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 c001892:	e000      	b.n	c001896 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 c001894:	bf00      	nop
  }
}
 c001896:	bf00      	nop
 c001898:	370c      	adds	r7, #12
 c00189a:	46bd      	mov	sp, r7
 c00189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0018a0:	4770      	bx	lr
 c0018a2:	bf00      	nop
 c0018a4:	e000e010 	.word	0xe000e010
 c0018a8:	56020c00 	.word	0x56020c00

0c0018ac <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 c0018ac:	b480      	push	{r7}
 c0018ae:	b083      	sub	sp, #12
 c0018b0:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 c0018b2:	4b19      	ldr	r3, [pc, #100]	@ (c001918 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 c0018b4:	681b      	ldr	r3, [r3, #0]
 c0018b6:	f003 0304 	and.w	r3, r3, #4
 c0018ba:	2b00      	cmp	r3, #0
 c0018bc:	d002      	beq.n	c0018c4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 c0018be:	2304      	movs	r3, #4
 c0018c0:	607b      	str	r3, [r7, #4]
 c0018c2:	e021      	b.n	c001908 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 c0018c4:	4b15      	ldr	r3, [pc, #84]	@ (c00191c <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 c0018c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c0018ca:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 c0018ce:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 c0018d0:	683b      	ldr	r3, [r7, #0]
 c0018d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 c0018d6:	d011      	beq.n	c0018fc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 c0018d8:	683b      	ldr	r3, [r7, #0]
 c0018da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 c0018de:	d810      	bhi.n	c001902 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 c0018e0:	683b      	ldr	r3, [r7, #0]
 c0018e2:	2b00      	cmp	r3, #0
 c0018e4:	d004      	beq.n	c0018f0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 c0018e6:	683b      	ldr	r3, [r7, #0]
 c0018e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 c0018ec:	d003      	beq.n	c0018f6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 c0018ee:	e008      	b.n	c001902 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 c0018f0:	2300      	movs	r3, #0
 c0018f2:	607b      	str	r3, [r7, #4]
        break;
 c0018f4:	e008      	b.n	c001908 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 c0018f6:	2301      	movs	r3, #1
 c0018f8:	607b      	str	r3, [r7, #4]
        break;
 c0018fa:	e005      	b.n	c001908 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 c0018fc:	2302      	movs	r3, #2
 c0018fe:	607b      	str	r3, [r7, #4]
        break;
 c001900:	e002      	b.n	c001908 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 c001902:	2300      	movs	r3, #0
 c001904:	607b      	str	r3, [r7, #4]
        break;
 c001906:	bf00      	nop
    }
  }
  return systick_source;
 c001908:	687b      	ldr	r3, [r7, #4]
}
 c00190a:	4618      	mov	r0, r3
 c00190c:	370c      	adds	r7, #12
 c00190e:	46bd      	mov	sp, r7
 c001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001914:	4770      	bx	lr
 c001916:	bf00      	nop
 c001918:	e000e010 	.word	0xe000e010
 c00191c:	56020c00 	.word	0x56020c00

0c001920 <HAL_EXTI_ConfigLineAttributes>:
  *            @arg @ref EXTI_LINE_SEC          Secure-only access
  *            @arg @ref EXTI_LINE_NSEC         Secure/Non-secure access
  * @retval None
  */
void HAL_EXTI_ConfigLineAttributes(uint32_t ExtiLine, uint32_t LineAttributes)
{
 c001920:	b480      	push	{r7}
 c001922:	b089      	sub	sp, #36	@ 0x24
 c001924:	af00      	add	r7, sp, #0
 c001926:	6078      	str	r0, [r7, #4]
 c001928:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));
  assert_param(IS_EXTI_LINE_ATTRIBUTES(LineAttributes));

  /* compute line register offset and line mask */
  offset = ((ExtiLine & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 c00192a:	687b      	ldr	r3, [r7, #4]
 c00192c:	0c1b      	lsrs	r3, r3, #16
 c00192e:	f003 0301 	and.w	r3, r3, #1
 c001932:	61bb      	str	r3, [r7, #24]
  linepos = (ExtiLine & EXTI_PIN_MASK);
 c001934:	687b      	ldr	r3, [r7, #4]
 c001936:	f003 031f 	and.w	r3, r3, #31
 c00193a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << linepos);
 c00193c:	2201      	movs	r2, #1
 c00193e:	697b      	ldr	r3, [r7, #20]
 c001940:	fa02 f303 	lsl.w	r3, r2, r3
 c001944:	613b      	str	r3, [r7, #16]

  /* Configure privilege or non-privilege attributes */
  regaddr = (__IO uint32_t *)(&EXTI->PRIVCFGR1 + (EXTI_PRIVCFGR_OFFSET * offset));
 c001946:	69bb      	ldr	r3, [r7, #24]
 c001948:	011a      	lsls	r2, r3, #4
 c00194a:	4b24      	ldr	r3, [pc, #144]	@ (c0019dc <HAL_EXTI_ConfigLineAttributes+0xbc>)
 c00194c:	4413      	add	r3, r2
 c00194e:	60fb      	str	r3, [r7, #12]
  regval = *regaddr;
 c001950:	68fb      	ldr	r3, [r7, #12]
 c001952:	681b      	ldr	r3, [r3, #0]
 c001954:	61fb      	str	r3, [r7, #28]

  /* Mask or set line */
  if ((LineAttributes & EXTI_LINE_PRIV) == EXTI_LINE_PRIV)
 c001956:	683a      	ldr	r2, [r7, #0]
 c001958:	f240 2302 	movw	r3, #514	@ 0x202
 c00195c:	4013      	ands	r3, r2
 c00195e:	f240 2202 	movw	r2, #514	@ 0x202
 c001962:	4293      	cmp	r3, r2
 c001964:	d104      	bne.n	c001970 <HAL_EXTI_ConfigLineAttributes+0x50>
  {
    regval |= maskline;
 c001966:	69fa      	ldr	r2, [r7, #28]
 c001968:	693b      	ldr	r3, [r7, #16]
 c00196a:	4313      	orrs	r3, r2
 c00196c:	61fb      	str	r3, [r7, #28]
 c00196e:	e009      	b.n	c001984 <HAL_EXTI_ConfigLineAttributes+0x64>
  }
  else if ((LineAttributes & EXTI_LINE_NPRIV) == EXTI_LINE_NPRIV)
 c001970:	683b      	ldr	r3, [r7, #0]
 c001972:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 c001976:	2b00      	cmp	r3, #0
 c001978:	d004      	beq.n	c001984 <HAL_EXTI_ConfigLineAttributes+0x64>
  {
    regval &= ~maskline;
 c00197a:	693b      	ldr	r3, [r7, #16]
 c00197c:	43db      	mvns	r3, r3
 c00197e:	69fa      	ldr	r2, [r7, #28]
 c001980:	4013      	ands	r3, r2
 c001982:	61fb      	str	r3, [r7, #28]
  {
    /* do nothing */
  }

  /* Store privilege or non-privilege attribute */
  *regaddr = regval;
 c001984:	68fb      	ldr	r3, [r7, #12]
 c001986:	69fa      	ldr	r2, [r7, #28]
 c001988:	601a      	str	r2, [r3, #0]

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)

  /* Configure secure or non-secure attributes */
  regaddr = (__IO uint32_t *)(&EXTI->SECCFGR1 + (EXTI_SECCFGR_OFFSET * offset));
 c00198a:	69bb      	ldr	r3, [r7, #24]
 c00198c:	011a      	lsls	r2, r3, #4
 c00198e:	4b14      	ldr	r3, [pc, #80]	@ (c0019e0 <HAL_EXTI_ConfigLineAttributes+0xc0>)
 c001990:	4413      	add	r3, r2
 c001992:	60fb      	str	r3, [r7, #12]
  regval = *regaddr;
 c001994:	68fb      	ldr	r3, [r7, #12]
 c001996:	681b      	ldr	r3, [r3, #0]
 c001998:	61fb      	str	r3, [r7, #28]

  /* Mask or set line */
  if ((LineAttributes & EXTI_LINE_SEC) == EXTI_LINE_SEC)
 c00199a:	683a      	ldr	r2, [r7, #0]
 c00199c:	f240 1301 	movw	r3, #257	@ 0x101
 c0019a0:	4013      	ands	r3, r2
 c0019a2:	f240 1201 	movw	r2, #257	@ 0x101
 c0019a6:	4293      	cmp	r3, r2
 c0019a8:	d104      	bne.n	c0019b4 <HAL_EXTI_ConfigLineAttributes+0x94>
  {
    regval |= maskline;
 c0019aa:	69fa      	ldr	r2, [r7, #28]
 c0019ac:	693b      	ldr	r3, [r7, #16]
 c0019ae:	4313      	orrs	r3, r2
 c0019b0:	61fb      	str	r3, [r7, #28]
 c0019b2:	e009      	b.n	c0019c8 <HAL_EXTI_ConfigLineAttributes+0xa8>
  }
  else if ((LineAttributes & EXTI_LINE_NSEC) == EXTI_LINE_NSEC)
 c0019b4:	683b      	ldr	r3, [r7, #0]
 c0019b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 c0019ba:	2b00      	cmp	r3, #0
 c0019bc:	d004      	beq.n	c0019c8 <HAL_EXTI_ConfigLineAttributes+0xa8>
  {
    regval &= ~maskline;
 c0019be:	693b      	ldr	r3, [r7, #16]
 c0019c0:	43db      	mvns	r3, r3
 c0019c2:	69fa      	ldr	r2, [r7, #28]
 c0019c4:	4013      	ands	r3, r2
 c0019c6:	61fb      	str	r3, [r7, #28]
  {
    /* do nothing */
  }

  /* Store secure or non-secure attribute */
  *regaddr = regval;
 c0019c8:	68fb      	ldr	r3, [r7, #12]
 c0019ca:	69fa      	ldr	r2, [r7, #28]
 c0019cc:	601a      	str	r2, [r3, #0]

#endif /* __ARM_FEATURE_CMSE */
}
 c0019ce:	bf00      	nop
 c0019d0:	3724      	adds	r7, #36	@ 0x24
 c0019d2:	46bd      	mov	sp, r7
 c0019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0019d8:	4770      	bx	lr
 c0019da:	bf00      	nop
 c0019dc:	56022018 	.word	0x56022018
 c0019e0:	56022014 	.word	0x56022014

0c0019e4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 c0019e4:	b480      	push	{r7}
 c0019e6:	b089      	sub	sp, #36	@ 0x24
 c0019e8:	af00      	add	r7, sp, #0
 c0019ea:	6078      	str	r0, [r7, #4]
 c0019ec:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 c0019ee:	2300      	movs	r3, #0
 c0019f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 c0019f2:	687b      	ldr	r3, [r7, #4]
 c0019f4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 c0019f6:	e1ba      	b.n	c001d6e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 c0019f8:	683b      	ldr	r3, [r7, #0]
 c0019fa:	681a      	ldr	r2, [r3, #0]
 c0019fc:	2101      	movs	r1, #1
 c0019fe:	697b      	ldr	r3, [r7, #20]
 c001a00:	fa01 f303 	lsl.w	r3, r1, r3
 c001a04:	4013      	ands	r3, r2
 c001a06:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 c001a08:	697b      	ldr	r3, [r7, #20]
 c001a0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 c001a0c:	68fb      	ldr	r3, [r7, #12]
 c001a0e:	2b00      	cmp	r3, #0
 c001a10:	f000 81aa 	beq.w	c001d68 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 c001a14:	687b      	ldr	r3, [r7, #4]
 c001a16:	4a55      	ldr	r2, [pc, #340]	@ (c001b6c <HAL_GPIO_Init+0x188>)
 c001a18:	4293      	cmp	r3, r2
 c001a1a:	d15d      	bne.n	c001ad8 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 c001a1c:	687b      	ldr	r3, [r7, #4]
 c001a1e:	681b      	ldr	r3, [r3, #0]
 c001a20:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 c001a22:	2201      	movs	r2, #1
 c001a24:	697b      	ldr	r3, [r7, #20]
 c001a26:	fa02 f303 	lsl.w	r3, r2, r3
 c001a2a:	43db      	mvns	r3, r3
 c001a2c:	69fa      	ldr	r2, [r7, #28]
 c001a2e:	4013      	ands	r3, r2
 c001a30:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 c001a32:	683b      	ldr	r3, [r7, #0]
 c001a34:	685b      	ldr	r3, [r3, #4]
 c001a36:	f003 0201 	and.w	r2, r3, #1
 c001a3a:	697b      	ldr	r3, [r7, #20]
 c001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 c001a40:	69fa      	ldr	r2, [r7, #28]
 c001a42:	4313      	orrs	r3, r2
 c001a44:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 c001a46:	687b      	ldr	r3, [r7, #4]
 c001a48:	69fa      	ldr	r2, [r7, #28]
 c001a4a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 c001a4c:	4a48      	ldr	r2, [pc, #288]	@ (c001b70 <HAL_GPIO_Init+0x18c>)
 c001a4e:	697b      	ldr	r3, [r7, #20]
 c001a50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 c001a54:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 c001a56:	4a46      	ldr	r2, [pc, #280]	@ (c001b70 <HAL_GPIO_Init+0x18c>)
 c001a58:	697b      	ldr	r3, [r7, #20]
 c001a5a:	00db      	lsls	r3, r3, #3
 c001a5c:	4413      	add	r3, r2
 c001a5e:	685b      	ldr	r3, [r3, #4]
 c001a60:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 c001a62:	69bb      	ldr	r3, [r7, #24]
 c001a64:	08da      	lsrs	r2, r3, #3
 c001a66:	693b      	ldr	r3, [r7, #16]
 c001a68:	3208      	adds	r2, #8
 c001a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c001a6e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 c001a70:	69bb      	ldr	r3, [r7, #24]
 c001a72:	f003 0307 	and.w	r3, r3, #7
 c001a76:	009b      	lsls	r3, r3, #2
 c001a78:	220f      	movs	r2, #15
 c001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 c001a7e:	43db      	mvns	r3, r3
 c001a80:	69fa      	ldr	r2, [r7, #28]
 c001a82:	4013      	ands	r3, r2
 c001a84:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 c001a86:	69bb      	ldr	r3, [r7, #24]
 c001a88:	f003 0307 	and.w	r3, r3, #7
 c001a8c:	009b      	lsls	r3, r3, #2
 c001a8e:	220b      	movs	r2, #11
 c001a90:	fa02 f303 	lsl.w	r3, r2, r3
 c001a94:	69fa      	ldr	r2, [r7, #28]
 c001a96:	4313      	orrs	r3, r2
 c001a98:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 c001a9a:	69bb      	ldr	r3, [r7, #24]
 c001a9c:	08da      	lsrs	r2, r3, #3
 c001a9e:	693b      	ldr	r3, [r7, #16]
 c001aa0:	3208      	adds	r2, #8
 c001aa2:	69f9      	ldr	r1, [r7, #28]
 c001aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 c001aa8:	693b      	ldr	r3, [r7, #16]
 c001aaa:	681b      	ldr	r3, [r3, #0]
 c001aac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 c001aae:	69bb      	ldr	r3, [r7, #24]
 c001ab0:	005b      	lsls	r3, r3, #1
 c001ab2:	2203      	movs	r2, #3
 c001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 c001ab8:	43db      	mvns	r3, r3
 c001aba:	69fa      	ldr	r2, [r7, #28]
 c001abc:	4013      	ands	r3, r2
 c001abe:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 c001ac0:	69bb      	ldr	r3, [r7, #24]
 c001ac2:	005b      	lsls	r3, r3, #1
 c001ac4:	2202      	movs	r2, #2
 c001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 c001aca:	69fa      	ldr	r2, [r7, #28]
 c001acc:	4313      	orrs	r3, r2
 c001ace:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 c001ad0:	693b      	ldr	r3, [r7, #16]
 c001ad2:	69fa      	ldr	r2, [r7, #28]
 c001ad4:	601a      	str	r2, [r3, #0]
 c001ad6:	e067      	b.n	c001ba8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 c001ad8:	683b      	ldr	r3, [r7, #0]
 c001ada:	685b      	ldr	r3, [r3, #4]
 c001adc:	2b02      	cmp	r3, #2
 c001ade:	d003      	beq.n	c001ae8 <HAL_GPIO_Init+0x104>
 c001ae0:	683b      	ldr	r3, [r7, #0]
 c001ae2:	685b      	ldr	r3, [r3, #4]
 c001ae4:	2b12      	cmp	r3, #18
 c001ae6:	d145      	bne.n	c001b74 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 c001ae8:	697b      	ldr	r3, [r7, #20]
 c001aea:	08da      	lsrs	r2, r3, #3
 c001aec:	687b      	ldr	r3, [r7, #4]
 c001aee:	3208      	adds	r2, #8
 c001af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c001af4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 c001af6:	697b      	ldr	r3, [r7, #20]
 c001af8:	f003 0307 	and.w	r3, r3, #7
 c001afc:	009b      	lsls	r3, r3, #2
 c001afe:	220f      	movs	r2, #15
 c001b00:	fa02 f303 	lsl.w	r3, r2, r3
 c001b04:	43db      	mvns	r3, r3
 c001b06:	69fa      	ldr	r2, [r7, #28]
 c001b08:	4013      	ands	r3, r2
 c001b0a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 c001b0c:	683b      	ldr	r3, [r7, #0]
 c001b0e:	691b      	ldr	r3, [r3, #16]
 c001b10:	f003 020f 	and.w	r2, r3, #15
 c001b14:	697b      	ldr	r3, [r7, #20]
 c001b16:	f003 0307 	and.w	r3, r3, #7
 c001b1a:	009b      	lsls	r3, r3, #2
 c001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 c001b20:	69fa      	ldr	r2, [r7, #28]
 c001b22:	4313      	orrs	r3, r2
 c001b24:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 c001b26:	697b      	ldr	r3, [r7, #20]
 c001b28:	08da      	lsrs	r2, r3, #3
 c001b2a:	687b      	ldr	r3, [r7, #4]
 c001b2c:	3208      	adds	r2, #8
 c001b2e:	69f9      	ldr	r1, [r7, #28]
 c001b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 c001b34:	693b      	ldr	r3, [r7, #16]
 c001b36:	681b      	ldr	r3, [r3, #0]
 c001b38:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 c001b3a:	69bb      	ldr	r3, [r7, #24]
 c001b3c:	005b      	lsls	r3, r3, #1
 c001b3e:	2203      	movs	r2, #3
 c001b40:	fa02 f303 	lsl.w	r3, r2, r3
 c001b44:	43db      	mvns	r3, r3
 c001b46:	69fa      	ldr	r2, [r7, #28]
 c001b48:	4013      	ands	r3, r2
 c001b4a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 c001b4c:	683b      	ldr	r3, [r7, #0]
 c001b4e:	685b      	ldr	r3, [r3, #4]
 c001b50:	f003 0203 	and.w	r2, r3, #3
 c001b54:	69bb      	ldr	r3, [r7, #24]
 c001b56:	005b      	lsls	r3, r3, #1
 c001b58:	fa02 f303 	lsl.w	r3, r2, r3
 c001b5c:	69fa      	ldr	r2, [r7, #28]
 c001b5e:	4313      	orrs	r3, r2
 c001b60:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 c001b62:	693b      	ldr	r3, [r7, #16]
 c001b64:	69fa      	ldr	r2, [r7, #28]
 c001b66:	601a      	str	r2, [r3, #0]
 c001b68:	e01e      	b.n	c001ba8 <HAL_GPIO_Init+0x1c4>
 c001b6a:	bf00      	nop
 c001b6c:	56020000 	.word	0x56020000
 c001b70:	0c007008 	.word	0x0c007008
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 c001b74:	693b      	ldr	r3, [r7, #16]
 c001b76:	681b      	ldr	r3, [r3, #0]
 c001b78:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 c001b7a:	69bb      	ldr	r3, [r7, #24]
 c001b7c:	005b      	lsls	r3, r3, #1
 c001b7e:	2203      	movs	r2, #3
 c001b80:	fa02 f303 	lsl.w	r3, r2, r3
 c001b84:	43db      	mvns	r3, r3
 c001b86:	69fa      	ldr	r2, [r7, #28]
 c001b88:	4013      	ands	r3, r2
 c001b8a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 c001b8c:	683b      	ldr	r3, [r7, #0]
 c001b8e:	685b      	ldr	r3, [r3, #4]
 c001b90:	f003 0203 	and.w	r2, r3, #3
 c001b94:	69bb      	ldr	r3, [r7, #24]
 c001b96:	005b      	lsls	r3, r3, #1
 c001b98:	fa02 f303 	lsl.w	r3, r2, r3
 c001b9c:	69fa      	ldr	r2, [r7, #28]
 c001b9e:	4313      	orrs	r3, r2
 c001ba0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 c001ba2:	693b      	ldr	r3, [r7, #16]
 c001ba4:	69fa      	ldr	r2, [r7, #28]
 c001ba6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c001ba8:	683b      	ldr	r3, [r7, #0]
 c001baa:	685b      	ldr	r3, [r3, #4]
 c001bac:	2b01      	cmp	r3, #1
 c001bae:	d00b      	beq.n	c001bc8 <HAL_GPIO_Init+0x1e4>
 c001bb0:	683b      	ldr	r3, [r7, #0]
 c001bb2:	685b      	ldr	r3, [r3, #4]
 c001bb4:	2b02      	cmp	r3, #2
 c001bb6:	d007      	beq.n	c001bc8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 c001bb8:	683b      	ldr	r3, [r7, #0]
 c001bba:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c001bbc:	2b11      	cmp	r3, #17
 c001bbe:	d003      	beq.n	c001bc8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 c001bc0:	683b      	ldr	r3, [r7, #0]
 c001bc2:	685b      	ldr	r3, [r3, #4]
 c001bc4:	2b12      	cmp	r3, #18
 c001bc6:	d130      	bne.n	c001c2a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 c001bc8:	693b      	ldr	r3, [r7, #16]
 c001bca:	689b      	ldr	r3, [r3, #8]
 c001bcc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 c001bce:	69bb      	ldr	r3, [r7, #24]
 c001bd0:	005b      	lsls	r3, r3, #1
 c001bd2:	2203      	movs	r2, #3
 c001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 c001bd8:	43db      	mvns	r3, r3
 c001bda:	69fa      	ldr	r2, [r7, #28]
 c001bdc:	4013      	ands	r3, r2
 c001bde:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 c001be0:	683b      	ldr	r3, [r7, #0]
 c001be2:	68da      	ldr	r2, [r3, #12]
 c001be4:	69bb      	ldr	r3, [r7, #24]
 c001be6:	005b      	lsls	r3, r3, #1
 c001be8:	fa02 f303 	lsl.w	r3, r2, r3
 c001bec:	69fa      	ldr	r2, [r7, #28]
 c001bee:	4313      	orrs	r3, r2
 c001bf0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 c001bf2:	693b      	ldr	r3, [r7, #16]
 c001bf4:	69fa      	ldr	r2, [r7, #28]
 c001bf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 c001bf8:	693b      	ldr	r3, [r7, #16]
 c001bfa:	685b      	ldr	r3, [r3, #4]
 c001bfc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 c001bfe:	2201      	movs	r2, #1
 c001c00:	69bb      	ldr	r3, [r7, #24]
 c001c02:	fa02 f303 	lsl.w	r3, r2, r3
 c001c06:	43db      	mvns	r3, r3
 c001c08:	69fa      	ldr	r2, [r7, #28]
 c001c0a:	4013      	ands	r3, r2
 c001c0c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 c001c0e:	683b      	ldr	r3, [r7, #0]
 c001c10:	685b      	ldr	r3, [r3, #4]
 c001c12:	091b      	lsrs	r3, r3, #4
 c001c14:	f003 0201 	and.w	r2, r3, #1
 c001c18:	69bb      	ldr	r3, [r7, #24]
 c001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 c001c1e:	69fa      	ldr	r2, [r7, #28]
 c001c20:	4313      	orrs	r3, r2
 c001c22:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 c001c24:	693b      	ldr	r3, [r7, #16]
 c001c26:	69fa      	ldr	r2, [r7, #28]
 c001c28:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 c001c2a:	683b      	ldr	r3, [r7, #0]
 c001c2c:	685b      	ldr	r3, [r3, #4]
 c001c2e:	2b03      	cmp	r3, #3
 c001c30:	d017      	beq.n	c001c62 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 c001c32:	693b      	ldr	r3, [r7, #16]
 c001c34:	68db      	ldr	r3, [r3, #12]
 c001c36:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 c001c38:	69bb      	ldr	r3, [r7, #24]
 c001c3a:	005b      	lsls	r3, r3, #1
 c001c3c:	2203      	movs	r2, #3
 c001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 c001c42:	43db      	mvns	r3, r3
 c001c44:	69fa      	ldr	r2, [r7, #28]
 c001c46:	4013      	ands	r3, r2
 c001c48:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 c001c4a:	683b      	ldr	r3, [r7, #0]
 c001c4c:	689a      	ldr	r2, [r3, #8]
 c001c4e:	69bb      	ldr	r3, [r7, #24]
 c001c50:	005b      	lsls	r3, r3, #1
 c001c52:	fa02 f303 	lsl.w	r3, r2, r3
 c001c56:	69fa      	ldr	r2, [r7, #28]
 c001c58:	4313      	orrs	r3, r2
 c001c5a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 c001c5c:	693b      	ldr	r3, [r7, #16]
 c001c5e:	69fa      	ldr	r2, [r7, #28]
 c001c60:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 c001c62:	683b      	ldr	r3, [r7, #0]
 c001c64:	685b      	ldr	r3, [r3, #4]
 c001c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c001c6a:	2b00      	cmp	r3, #0
 c001c6c:	d07c      	beq.n	c001d68 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 c001c6e:	4a47      	ldr	r2, [pc, #284]	@ (c001d8c <HAL_GPIO_Init+0x3a8>)
 c001c70:	697b      	ldr	r3, [r7, #20]
 c001c72:	089b      	lsrs	r3, r3, #2
 c001c74:	3318      	adds	r3, #24
 c001c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c001c7a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 c001c7c:	697b      	ldr	r3, [r7, #20]
 c001c7e:	f003 0303 	and.w	r3, r3, #3
 c001c82:	00db      	lsls	r3, r3, #3
 c001c84:	220f      	movs	r2, #15
 c001c86:	fa02 f303 	lsl.w	r3, r2, r3
 c001c8a:	43db      	mvns	r3, r3
 c001c8c:	69fa      	ldr	r2, [r7, #28]
 c001c8e:	4013      	ands	r3, r2
 c001c90:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 c001c92:	687b      	ldr	r3, [r7, #4]
 c001c94:	0a9a      	lsrs	r2, r3, #10
 c001c96:	4b3e      	ldr	r3, [pc, #248]	@ (c001d90 <HAL_GPIO_Init+0x3ac>)
 c001c98:	4013      	ands	r3, r2
 c001c9a:	697a      	ldr	r2, [r7, #20]
 c001c9c:	f002 0203 	and.w	r2, r2, #3
 c001ca0:	00d2      	lsls	r2, r2, #3
 c001ca2:	4093      	lsls	r3, r2
 c001ca4:	69fa      	ldr	r2, [r7, #28]
 c001ca6:	4313      	orrs	r3, r2
 c001ca8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 c001caa:	4938      	ldr	r1, [pc, #224]	@ (c001d8c <HAL_GPIO_Init+0x3a8>)
 c001cac:	697b      	ldr	r3, [r7, #20]
 c001cae:	089b      	lsrs	r3, r3, #2
 c001cb0:	3318      	adds	r3, #24
 c001cb2:	69fa      	ldr	r2, [r7, #28]
 c001cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 c001cb8:	4b34      	ldr	r3, [pc, #208]	@ (c001d8c <HAL_GPIO_Init+0x3a8>)
 c001cba:	681b      	ldr	r3, [r3, #0]
 c001cbc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 c001cbe:	68fb      	ldr	r3, [r7, #12]
 c001cc0:	43db      	mvns	r3, r3
 c001cc2:	69fa      	ldr	r2, [r7, #28]
 c001cc4:	4013      	ands	r3, r2
 c001cc6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 c001cc8:	683b      	ldr	r3, [r7, #0]
 c001cca:	685b      	ldr	r3, [r3, #4]
 c001ccc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 c001cd0:	2b00      	cmp	r3, #0
 c001cd2:	d003      	beq.n	c001cdc <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 c001cd4:	69fa      	ldr	r2, [r7, #28]
 c001cd6:	68fb      	ldr	r3, [r7, #12]
 c001cd8:	4313      	orrs	r3, r2
 c001cda:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 c001cdc:	4a2b      	ldr	r2, [pc, #172]	@ (c001d8c <HAL_GPIO_Init+0x3a8>)
 c001cde:	69fb      	ldr	r3, [r7, #28]
 c001ce0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 c001ce2:	4b2a      	ldr	r3, [pc, #168]	@ (c001d8c <HAL_GPIO_Init+0x3a8>)
 c001ce4:	685b      	ldr	r3, [r3, #4]
 c001ce6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 c001ce8:	68fb      	ldr	r3, [r7, #12]
 c001cea:	43db      	mvns	r3, r3
 c001cec:	69fa      	ldr	r2, [r7, #28]
 c001cee:	4013      	ands	r3, r2
 c001cf0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 c001cf2:	683b      	ldr	r3, [r7, #0]
 c001cf4:	685b      	ldr	r3, [r3, #4]
 c001cf6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 c001cfa:	2b00      	cmp	r3, #0
 c001cfc:	d003      	beq.n	c001d06 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 c001cfe:	69fa      	ldr	r2, [r7, #28]
 c001d00:	68fb      	ldr	r3, [r7, #12]
 c001d02:	4313      	orrs	r3, r2
 c001d04:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 c001d06:	4a21      	ldr	r2, [pc, #132]	@ (c001d8c <HAL_GPIO_Init+0x3a8>)
 c001d08:	69fb      	ldr	r3, [r7, #28]
 c001d0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 c001d0c:	4b1f      	ldr	r3, [pc, #124]	@ (c001d8c <HAL_GPIO_Init+0x3a8>)
 c001d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 c001d12:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 c001d14:	68fb      	ldr	r3, [r7, #12]
 c001d16:	43db      	mvns	r3, r3
 c001d18:	69fa      	ldr	r2, [r7, #28]
 c001d1a:	4013      	ands	r3, r2
 c001d1c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 c001d1e:	683b      	ldr	r3, [r7, #0]
 c001d20:	685b      	ldr	r3, [r3, #4]
 c001d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c001d26:	2b00      	cmp	r3, #0
 c001d28:	d003      	beq.n	c001d32 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 c001d2a:	69fa      	ldr	r2, [r7, #28]
 c001d2c:	68fb      	ldr	r3, [r7, #12]
 c001d2e:	4313      	orrs	r3, r2
 c001d30:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 c001d32:	4a16      	ldr	r2, [pc, #88]	@ (c001d8c <HAL_GPIO_Init+0x3a8>)
 c001d34:	69fb      	ldr	r3, [r7, #28]
 c001d36:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 c001d3a:	4b14      	ldr	r3, [pc, #80]	@ (c001d8c <HAL_GPIO_Init+0x3a8>)
 c001d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 c001d40:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 c001d42:	68fb      	ldr	r3, [r7, #12]
 c001d44:	43db      	mvns	r3, r3
 c001d46:	69fa      	ldr	r2, [r7, #28]
 c001d48:	4013      	ands	r3, r2
 c001d4a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 c001d4c:	683b      	ldr	r3, [r7, #0]
 c001d4e:	685b      	ldr	r3, [r3, #4]
 c001d50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 c001d54:	2b00      	cmp	r3, #0
 c001d56:	d003      	beq.n	c001d60 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 c001d58:	69fa      	ldr	r2, [r7, #28]
 c001d5a:	68fb      	ldr	r3, [r7, #12]
 c001d5c:	4313      	orrs	r3, r2
 c001d5e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 c001d60:	4a0a      	ldr	r2, [pc, #40]	@ (c001d8c <HAL_GPIO_Init+0x3a8>)
 c001d62:	69fb      	ldr	r3, [r7, #28]
 c001d64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 c001d68:	697b      	ldr	r3, [r7, #20]
 c001d6a:	3301      	adds	r3, #1
 c001d6c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 c001d6e:	683b      	ldr	r3, [r7, #0]
 c001d70:	681a      	ldr	r2, [r3, #0]
 c001d72:	697b      	ldr	r3, [r7, #20]
 c001d74:	fa22 f303 	lsr.w	r3, r2, r3
 c001d78:	2b00      	cmp	r3, #0
 c001d7a:	f47f ae3d 	bne.w	c0019f8 <HAL_GPIO_Init+0x14>
  }
}
 c001d7e:	bf00      	nop
 c001d80:	bf00      	nop
 c001d82:	3724      	adds	r7, #36	@ 0x24
 c001d84:	46bd      	mov	sp, r7
 c001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001d8a:	4770      	bx	lr
 c001d8c:	56022000 	.word	0x56022000
 c001d90:	002b7f7f 	.word	0x002b7f7f

0c001d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 c001d94:	b480      	push	{r7}
 c001d96:	b083      	sub	sp, #12
 c001d98:	af00      	add	r7, sp, #0
 c001d9a:	6078      	str	r0, [r7, #4]
 c001d9c:	460b      	mov	r3, r1
 c001d9e:	807b      	strh	r3, [r7, #2]
 c001da0:	4613      	mov	r3, r2
 c001da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 c001da4:	787b      	ldrb	r3, [r7, #1]
 c001da6:	2b00      	cmp	r3, #0
 c001da8:	d003      	beq.n	c001db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 c001daa:	887a      	ldrh	r2, [r7, #2]
 c001dac:	687b      	ldr	r3, [r7, #4]
 c001dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 c001db0:	e002      	b.n	c001db8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 c001db2:	887a      	ldrh	r2, [r7, #2]
 c001db4:	687b      	ldr	r3, [r7, #4]
 c001db6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 c001db8:	bf00      	nop
 c001dba:	370c      	adds	r7, #12
 c001dbc:	46bd      	mov	sp, r7
 c001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001dc2:	4770      	bx	lr

0c001dc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 c001dc4:	b580      	push	{r7, lr}
 c001dc6:	b082      	sub	sp, #8
 c001dc8:	af00      	add	r7, sp, #0
 c001dca:	4603      	mov	r3, r0
 c001dcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 c001dce:	4b0f      	ldr	r3, [pc, #60]	@ (c001e0c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 c001dd0:	68da      	ldr	r2, [r3, #12]
 c001dd2:	88fb      	ldrh	r3, [r7, #6]
 c001dd4:	4013      	ands	r3, r2
 c001dd6:	2b00      	cmp	r3, #0
 c001dd8:	d006      	beq.n	c001de8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 c001dda:	4a0c      	ldr	r2, [pc, #48]	@ (c001e0c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 c001ddc:	88fb      	ldrh	r3, [r7, #6]
 c001dde:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 c001de0:	88fb      	ldrh	r3, [r7, #6]
 c001de2:	4618      	mov	r0, r3
 c001de4:	f7ff f820 	bl	c000e28 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 c001de8:	4b08      	ldr	r3, [pc, #32]	@ (c001e0c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 c001dea:	691a      	ldr	r2, [r3, #16]
 c001dec:	88fb      	ldrh	r3, [r7, #6]
 c001dee:	4013      	ands	r3, r2
 c001df0:	2b00      	cmp	r3, #0
 c001df2:	d006      	beq.n	c001e02 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 c001df4:	4a05      	ldr	r2, [pc, #20]	@ (c001e0c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 c001df6:	88fb      	ldrh	r3, [r7, #6]
 c001df8:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 c001dfa:	88fb      	ldrh	r3, [r7, #6]
 c001dfc:	4618      	mov	r0, r3
 c001dfe:	f000 f807 	bl	c001e10 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 c001e02:	bf00      	nop
 c001e04:	3708      	adds	r7, #8
 c001e06:	46bd      	mov	sp, r7
 c001e08:	bd80      	pop	{r7, pc}
 c001e0a:	bf00      	nop
 c001e0c:	56022000 	.word	0x56022000

0c001e10 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 c001e10:	b480      	push	{r7}
 c001e12:	b083      	sub	sp, #12
 c001e14:	af00      	add	r7, sp, #0
 c001e16:	4603      	mov	r3, r0
 c001e18:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 c001e1a:	bf00      	nop
 c001e1c:	370c      	adds	r7, #12
 c001e1e:	46bd      	mov	sp, r7
 c001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001e24:	4770      	bx	lr
	...

0c001e28 <HAL_GTZC_TZSC_ConfigPeriphAttributes>:
  * @param  PeriphAttributes Peripheral attributes, see @ref GTZC_TZSC_PeriphAttributes.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZSC_ConfigPeriphAttributes(uint32_t PeriphId,
                                                       uint32_t PeriphAttributes)
{
 c001e28:	b480      	push	{r7}
 c001e2a:	b085      	sub	sp, #20
 c001e2c:	af00      	add	r7, sp, #0
 c001e2e:	6078      	str	r0, [r7, #4]
 c001e30:	6039      	str	r1, [r7, #0]
  uint32_t register_address;

  /* check entry parameters */
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c001e32:	683b      	ldr	r3, [r7, #0]
 c001e34:	f5b3 7f41 	cmp.w	r3, #772	@ 0x304
 c001e38:	d234      	bcs.n	c001ea4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x7c>
      || (HAL_GTZC_TZSC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c001e3a:	687b      	ldr	r3, [r7, #4]
 c001e3c:	0f1b      	lsrs	r3, r3, #28
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c001e3e:	2b03      	cmp	r3, #3
 c001e40:	d809      	bhi.n	c001e56 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2e>
      || (HAL_GTZC_TZSC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c001e42:	687b      	ldr	r3, [r7, #4]
 c001e44:	0f1b      	lsrs	r3, r3, #28
 c001e46:	015a      	lsls	r2, r3, #5
 c001e48:	687b      	ldr	r3, [r7, #4]
 c001e4a:	f003 031f 	and.w	r3, r3, #31
 c001e4e:	4413      	add	r3, r2
 c001e50:	2b6c      	cmp	r3, #108	@ 0x6c
 c001e52:	d827      	bhi.n	c001ea4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x7c>
 c001e54:	e009      	b.n	c001e6a <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x42>
 c001e56:	687b      	ldr	r3, [r7, #4]
 c001e58:	0f1b      	lsrs	r3, r3, #28
 c001e5a:	3b01      	subs	r3, #1
 c001e5c:	015a      	lsls	r2, r3, #5
 c001e5e:	687b      	ldr	r3, [r7, #4]
 c001e60:	f003 031f 	and.w	r3, r3, #31
 c001e64:	4413      	add	r3, r2
 c001e66:	2b6c      	cmp	r3, #108	@ 0x6c
 c001e68:	d81c      	bhi.n	c001ea4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x7c>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c001e6a:	687b      	ldr	r3, [r7, #4]
 c001e6c:	f003 0320 	and.w	r3, r3, #32
 c001e70:	2b00      	cmp	r3, #0
 c001e72:	d019      	beq.n	c001ea8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x80>
          && (HAL_GTZC_TZSC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c001e74:	687b      	ldr	r3, [r7, #4]
 c001e76:	0f1b      	lsrs	r3, r3, #28
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c001e78:	2b03      	cmp	r3, #3
 c001e7a:	d809      	bhi.n	c001e90 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x68>
          && (HAL_GTZC_TZSC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c001e7c:	687b      	ldr	r3, [r7, #4]
 c001e7e:	0f1b      	lsrs	r3, r3, #28
 c001e80:	015a      	lsls	r2, r3, #5
 c001e82:	687b      	ldr	r3, [r7, #4]
 c001e84:	f003 031f 	and.w	r3, r3, #31
 c001e88:	4413      	add	r3, r2
 c001e8a:	2b00      	cmp	r3, #0
 c001e8c:	d10a      	bne.n	c001ea4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x7c>
 c001e8e:	e00b      	b.n	c001ea8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x80>
 c001e90:	687b      	ldr	r3, [r7, #4]
 c001e92:	0f1b      	lsrs	r3, r3, #28
 c001e94:	3b01      	subs	r3, #1
 c001e96:	015a      	lsls	r2, r3, #5
 c001e98:	687b      	ldr	r3, [r7, #4]
 c001e9a:	f003 031f 	and.w	r3, r3, #31
 c001e9e:	4413      	add	r3, r2
 c001ea0:	2b00      	cmp	r3, #0
 c001ea2:	d001      	beq.n	c001ea8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x80>
  {
    return HAL_ERROR;
 c001ea4:	2301      	movs	r3, #1
 c001ea6:	e116      	b.n	c0020d6 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2ae>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c001ea8:	687b      	ldr	r3, [r7, #4]
 c001eaa:	f003 0320 	and.w	r3, r3, #32
 c001eae:	2b00      	cmp	r3, #0
 c001eb0:	f000 8096 	beq.w	c001fe0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1b8>
  {
    /* special case where same attributes are applied to all peripherals */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c001eb4:	683a      	ldr	r2, [r7, #0]
 c001eb6:	f240 1301 	movw	r3, #257	@ 0x101
 c001eba:	4013      	ands	r3, r2
 c001ebc:	f240 1201 	movw	r2, #257	@ 0x101
 c001ec0:	4293      	cmp	r3, r2
 c001ec2:	d120      	bne.n	c001f06 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xde>
    {
      SET_BIT(GTZC_TZSC1->SECCFGR1, TZSC1_SECCFGR1_ALL);
 c001ec4:	4b87      	ldr	r3, [pc, #540]	@ (c0020e4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001ec6:	691b      	ldr	r3, [r3, #16]
 c001ec8:	4a86      	ldr	r2, [pc, #536]	@ (c0020e4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001eca:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 c001ece:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 c001ed2:	6113      	str	r3, [r2, #16]
      SET_BIT(GTZC_TZSC1->SECCFGR2, TZSC1_SECCFGR2_ALL);
 c001ed4:	4b83      	ldr	r3, [pc, #524]	@ (c0020e4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001ed6:	695b      	ldr	r3, [r3, #20]
 c001ed8:	4a82      	ldr	r2, [pc, #520]	@ (c0020e4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001eda:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 c001ede:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 c001ee2:	6153      	str	r3, [r2, #20]
      SET_BIT(GTZC_TZSC1->SECCFGR3, TZSC1_SECCFGR3_ALL);
 c001ee4:	4b7f      	ldr	r3, [pc, #508]	@ (c0020e4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001ee6:	699b      	ldr	r3, [r3, #24]
 c001ee8:	4a7e      	ldr	r2, [pc, #504]	@ (c0020e4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001eea:	ea6f 53d3 	mvn.w	r3, r3, lsr #23
 c001eee:	ea6f 53c3 	mvn.w	r3, r3, lsl #23
 c001ef2:	6193      	str	r3, [r2, #24]
      SET_BIT(GTZC_TZSC2->SECCFGR1, TZSC2_SECCFGR1_ALL);
 c001ef4:	4b7c      	ldr	r3, [pc, #496]	@ (c0020e8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c001ef6:	691b      	ldr	r3, [r3, #16]
 c001ef8:	4a7b      	ldr	r2, [pc, #492]	@ (c0020e8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c001efa:	f443 53df 	orr.w	r3, r3, #7136	@ 0x1be0
 c001efe:	f043 031f 	orr.w	r3, r3, #31
 c001f02:	6113      	str	r3, [r2, #16]
 c001f04:	e020      	b.n	c001f48 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x120>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c001f06:	683b      	ldr	r3, [r7, #0]
 c001f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 c001f0c:	2b00      	cmp	r3, #0
 c001f0e:	d01b      	beq.n	c001f48 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x120>
    {
      CLEAR_BIT(GTZC_TZSC1->SECCFGR1, TZSC1_SECCFGR1_ALL);
 c001f10:	4b74      	ldr	r3, [pc, #464]	@ (c0020e4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001f12:	691b      	ldr	r3, [r3, #16]
 c001f14:	4a73      	ldr	r2, [pc, #460]	@ (c0020e4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001f16:	0d1b      	lsrs	r3, r3, #20
 c001f18:	051b      	lsls	r3, r3, #20
 c001f1a:	6113      	str	r3, [r2, #16]
      CLEAR_BIT(GTZC_TZSC1->SECCFGR2, TZSC1_SECCFGR2_ALL);
 c001f1c:	4b71      	ldr	r3, [pc, #452]	@ (c0020e4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001f1e:	695b      	ldr	r3, [r3, #20]
 c001f20:	4a70      	ldr	r2, [pc, #448]	@ (c0020e4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001f22:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 c001f26:	f023 0301 	bic.w	r3, r3, #1
 c001f2a:	6153      	str	r3, [r2, #20]
      CLEAR_BIT(GTZC_TZSC1->SECCFGR3, TZSC1_SECCFGR3_ALL);
 c001f2c:	4b6d      	ldr	r3, [pc, #436]	@ (c0020e4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001f2e:	699b      	ldr	r3, [r3, #24]
 c001f30:	4a6c      	ldr	r2, [pc, #432]	@ (c0020e4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001f32:	0ddb      	lsrs	r3, r3, #23
 c001f34:	05db      	lsls	r3, r3, #23
 c001f36:	6193      	str	r3, [r2, #24]
      CLEAR_BIT(GTZC_TZSC2->SECCFGR1, TZSC2_SECCFGR1_ALL);
 c001f38:	4b6b      	ldr	r3, [pc, #428]	@ (c0020e8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c001f3a:	691b      	ldr	r3, [r3, #16]
 c001f3c:	4a6a      	ldr	r2, [pc, #424]	@ (c0020e8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c001f3e:	f423 53df 	bic.w	r3, r3, #7136	@ 0x1be0
 c001f42:	f023 031f 	bic.w	r3, r3, #31
 c001f46:	6113      	str	r3, [r2, #16]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c001f48:	683a      	ldr	r2, [r7, #0]
 c001f4a:	f240 2302 	movw	r3, #514	@ 0x202
 c001f4e:	4013      	ands	r3, r2
 c001f50:	f240 2202 	movw	r2, #514	@ 0x202
 c001f54:	4293      	cmp	r3, r2
 c001f56:	d120      	bne.n	c001f9a <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x172>
    {
      SET_BIT(GTZC_TZSC1->PRIVCFGR1, TZSC1_PRIVCFGR1_ALL);
 c001f58:	4b62      	ldr	r3, [pc, #392]	@ (c0020e4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001f5a:	6a1b      	ldr	r3, [r3, #32]
 c001f5c:	4a61      	ldr	r2, [pc, #388]	@ (c0020e4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001f5e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 c001f62:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 c001f66:	6213      	str	r3, [r2, #32]
      SET_BIT(GTZC_TZSC1->PRIVCFGR2, TZSC1_PRIVCFGR2_ALL);
 c001f68:	4b5e      	ldr	r3, [pc, #376]	@ (c0020e4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c001f6c:	4a5d      	ldr	r2, [pc, #372]	@ (c0020e4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001f6e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 c001f72:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 c001f76:	6253      	str	r3, [r2, #36]	@ 0x24
      SET_BIT(GTZC_TZSC1->PRIVCFGR3, TZSC1_PRIVCFGR3_ALL);
 c001f78:	4b5a      	ldr	r3, [pc, #360]	@ (c0020e4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c001f7c:	4a59      	ldr	r2, [pc, #356]	@ (c0020e4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001f7e:	ea6f 53d3 	mvn.w	r3, r3, lsr #23
 c001f82:	ea6f 53c3 	mvn.w	r3, r3, lsl #23
 c001f86:	6293      	str	r3, [r2, #40]	@ 0x28
      SET_BIT(GTZC_TZSC2->PRIVCFGR1, TZSC2_PRIVCFGR1_ALL);
 c001f88:	4b57      	ldr	r3, [pc, #348]	@ (c0020e8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c001f8a:	6a1b      	ldr	r3, [r3, #32]
 c001f8c:	4a56      	ldr	r2, [pc, #344]	@ (c0020e8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c001f8e:	f443 53df 	orr.w	r3, r3, #7136	@ 0x1be0
 c001f92:	f043 031f 	orr.w	r3, r3, #31
 c001f96:	6213      	str	r3, [r2, #32]
 c001f98:	e09c      	b.n	c0020d4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2ac>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c001f9a:	683b      	ldr	r3, [r7, #0]
 c001f9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 c001fa0:	2b00      	cmp	r3, #0
 c001fa2:	f000 8097 	beq.w	c0020d4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2ac>
    {
      CLEAR_BIT(GTZC_TZSC1->PRIVCFGR1, TZSC1_PRIVCFGR1_ALL);
 c001fa6:	4b4f      	ldr	r3, [pc, #316]	@ (c0020e4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001fa8:	6a1b      	ldr	r3, [r3, #32]
 c001faa:	4a4e      	ldr	r2, [pc, #312]	@ (c0020e4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001fac:	0d1b      	lsrs	r3, r3, #20
 c001fae:	051b      	lsls	r3, r3, #20
 c001fb0:	6213      	str	r3, [r2, #32]
      CLEAR_BIT(GTZC_TZSC1->PRIVCFGR2, TZSC1_PRIVCFGR2_ALL);
 c001fb2:	4b4c      	ldr	r3, [pc, #304]	@ (c0020e4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c001fb6:	4a4b      	ldr	r2, [pc, #300]	@ (c0020e4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001fb8:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 c001fbc:	f023 0301 	bic.w	r3, r3, #1
 c001fc0:	6253      	str	r3, [r2, #36]	@ 0x24
      CLEAR_BIT(GTZC_TZSC1->PRIVCFGR3, TZSC1_PRIVCFGR3_ALL);
 c001fc2:	4b48      	ldr	r3, [pc, #288]	@ (c0020e4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c001fc6:	4a47      	ldr	r2, [pc, #284]	@ (c0020e4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001fc8:	0ddb      	lsrs	r3, r3, #23
 c001fca:	05db      	lsls	r3, r3, #23
 c001fcc:	6293      	str	r3, [r2, #40]	@ 0x28
      CLEAR_BIT(GTZC_TZSC2->PRIVCFGR1, TZSC2_PRIVCFGR1_ALL);
 c001fce:	4b46      	ldr	r3, [pc, #280]	@ (c0020e8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c001fd0:	6a1b      	ldr	r3, [r3, #32]
 c001fd2:	4a45      	ldr	r2, [pc, #276]	@ (c0020e8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c001fd4:	f423 53df 	bic.w	r3, r3, #7136	@ 0x1be0
 c001fd8:	f023 031f 	bic.w	r3, r3, #31
 c001fdc:	6213      	str	r3, [r2, #32]
 c001fde:	e079      	b.n	c0020d4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2ac>
  {
    /* common case where only one peripheral is configured */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    register_address = (uint32_t) &(HAL_GTZC_TZSC_GET_INSTANCE(PeriphId)->SECCFGR1)
 c001fe0:	687b      	ldr	r3, [r7, #4]
 c001fe2:	0f1b      	lsrs	r3, r3, #28
 c001fe4:	2b03      	cmp	r3, #3
 c001fe6:	d801      	bhi.n	c001fec <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1c4>
 c001fe8:	4b3e      	ldr	r3, [pc, #248]	@ (c0020e4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c001fea:	e000      	b.n	c001fee <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1c6>
 c001fec:	4b3e      	ldr	r3, [pc, #248]	@ (c0020e8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c001fee:	3310      	adds	r3, #16
 c001ff0:	461a      	mov	r2, r3
                       + (4U * GTZC_GET_REG_INDEX_IN_INSTANCE(PeriphId));
 c001ff2:	687b      	ldr	r3, [r7, #4]
 c001ff4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 c001ff8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 c001ffc:	d803      	bhi.n	c002006 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1de>
 c001ffe:	687b      	ldr	r3, [r7, #4]
 c002000:	0f1b      	lsrs	r3, r3, #28
 c002002:	009b      	lsls	r3, r3, #2
 c002004:	e003      	b.n	c00200e <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1e6>
 c002006:	687b      	ldr	r3, [r7, #4]
 c002008:	0f1b      	lsrs	r3, r3, #28
 c00200a:	3b04      	subs	r3, #4
 c00200c:	009b      	lsls	r3, r3, #2
    register_address = (uint32_t) &(HAL_GTZC_TZSC_GET_INSTANCE(PeriphId)->SECCFGR1)
 c00200e:	4413      	add	r3, r2
 c002010:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c002012:	683a      	ldr	r2, [r7, #0]
 c002014:	f240 1301 	movw	r3, #257	@ 0x101
 c002018:	4013      	ands	r3, r2
 c00201a:	f240 1201 	movw	r2, #257	@ 0x101
 c00201e:	4293      	cmp	r3, r2
 c002020:	d10a      	bne.n	c002038 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x210>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c002022:	68fb      	ldr	r3, [r7, #12]
 c002024:	6819      	ldr	r1, [r3, #0]
 c002026:	687b      	ldr	r3, [r7, #4]
 c002028:	f003 031f 	and.w	r3, r3, #31
 c00202c:	2201      	movs	r2, #1
 c00202e:	409a      	lsls	r2, r3
 c002030:	68fb      	ldr	r3, [r7, #12]
 c002032:	430a      	orrs	r2, r1
 c002034:	601a      	str	r2, [r3, #0]
 c002036:	e010      	b.n	c00205a <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x232>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c002038:	683b      	ldr	r3, [r7, #0]
 c00203a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 c00203e:	2b00      	cmp	r3, #0
 c002040:	d00b      	beq.n	c00205a <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x232>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c002042:	68fb      	ldr	r3, [r7, #12]
 c002044:	6819      	ldr	r1, [r3, #0]
 c002046:	687b      	ldr	r3, [r7, #4]
 c002048:	f003 031f 	and.w	r3, r3, #31
 c00204c:	2201      	movs	r2, #1
 c00204e:	fa02 f303 	lsl.w	r3, r2, r3
 c002052:	43da      	mvns	r2, r3
 c002054:	68fb      	ldr	r3, [r7, #12]
 c002056:	400a      	ands	r2, r1
 c002058:	601a      	str	r2, [r3, #0]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    register_address = (uint32_t) &(HAL_GTZC_TZSC_GET_INSTANCE(PeriphId)->PRIVCFGR1)
 c00205a:	687b      	ldr	r3, [r7, #4]
 c00205c:	0f1b      	lsrs	r3, r3, #28
 c00205e:	2b03      	cmp	r3, #3
 c002060:	d801      	bhi.n	c002066 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x23e>
 c002062:	4b20      	ldr	r3, [pc, #128]	@ (c0020e4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2bc>)
 c002064:	e000      	b.n	c002068 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x240>
 c002066:	4b20      	ldr	r3, [pc, #128]	@ (c0020e8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2c0>)
 c002068:	3320      	adds	r3, #32
 c00206a:	461a      	mov	r2, r3
                       + (4U * GTZC_GET_REG_INDEX_IN_INSTANCE(PeriphId));
 c00206c:	687b      	ldr	r3, [r7, #4]
 c00206e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 c002072:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 c002076:	d803      	bhi.n	c002080 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x258>
 c002078:	687b      	ldr	r3, [r7, #4]
 c00207a:	0f1b      	lsrs	r3, r3, #28
 c00207c:	009b      	lsls	r3, r3, #2
 c00207e:	e003      	b.n	c002088 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x260>
 c002080:	687b      	ldr	r3, [r7, #4]
 c002082:	0f1b      	lsrs	r3, r3, #28
 c002084:	3b04      	subs	r3, #4
 c002086:	009b      	lsls	r3, r3, #2
    register_address = (uint32_t) &(HAL_GTZC_TZSC_GET_INSTANCE(PeriphId)->PRIVCFGR1)
 c002088:	4413      	add	r3, r2
 c00208a:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c00208c:	683a      	ldr	r2, [r7, #0]
 c00208e:	f240 2302 	movw	r3, #514	@ 0x202
 c002092:	4013      	ands	r3, r2
 c002094:	f240 2202 	movw	r2, #514	@ 0x202
 c002098:	4293      	cmp	r3, r2
 c00209a:	d10a      	bne.n	c0020b2 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x28a>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c00209c:	68fb      	ldr	r3, [r7, #12]
 c00209e:	6819      	ldr	r1, [r3, #0]
 c0020a0:	687b      	ldr	r3, [r7, #4]
 c0020a2:	f003 031f 	and.w	r3, r3, #31
 c0020a6:	2201      	movs	r2, #1
 c0020a8:	409a      	lsls	r2, r3
 c0020aa:	68fb      	ldr	r3, [r7, #12]
 c0020ac:	430a      	orrs	r2, r1
 c0020ae:	601a      	str	r2, [r3, #0]
 c0020b0:	e010      	b.n	c0020d4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2ac>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c0020b2:	683b      	ldr	r3, [r7, #0]
 c0020b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 c0020b8:	2b00      	cmp	r3, #0
 c0020ba:	d00b      	beq.n	c0020d4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x2ac>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c0020bc:	68fb      	ldr	r3, [r7, #12]
 c0020be:	6819      	ldr	r1, [r3, #0]
 c0020c0:	687b      	ldr	r3, [r7, #4]
 c0020c2:	f003 031f 	and.w	r3, r3, #31
 c0020c6:	2201      	movs	r2, #1
 c0020c8:	fa02 f303 	lsl.w	r3, r2, r3
 c0020cc:	43da      	mvns	r2, r3
 c0020ce:	68fb      	ldr	r3, [r7, #12]
 c0020d0:	400a      	ands	r2, r1
 c0020d2:	601a      	str	r2, [r3, #0]
    else
    {
      /* do nothing */
    }
  }
  return HAL_OK;
 c0020d4:	2300      	movs	r3, #0
}
 c0020d6:	4618      	mov	r0, r3
 c0020d8:	3714      	adds	r7, #20
 c0020da:	46bd      	mov	sp, r7
 c0020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0020e0:	4770      	bx	lr
 c0020e2:	bf00      	nop
 c0020e4:	50032400 	.word	0x50032400
 c0020e8:	56023000 	.word	0x56023000

0c0020ec <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           const MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c0020ec:	b480      	push	{r7}
 c0020ee:	b089      	sub	sp, #36	@ 0x24
 c0020f0:	af00      	add	r7, sp, #0
 c0020f2:	6078      	str	r0, [r7, #4]
 c0020f4:	6039      	str	r1, [r7, #0]
  uint32_t mem_size;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c0020f6:	687b      	ldr	r3, [r7, #4]
 c0020f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 c0020fc:	d01b      	beq.n	c002136 <HAL_GTZC_MPCBB_ConfigMem+0x4a>
 c0020fe:	687b      	ldr	r3, [r7, #4]
 c002100:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 c002104:	d017      	beq.n	c002136 <HAL_GTZC_MPCBB_ConfigMem+0x4a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress))
 c002106:	687b      	ldr	r3, [r7, #4]
 c002108:	4a5c      	ldr	r2, [pc, #368]	@ (c00227c <HAL_GTZC_MPCBB_ConfigMem+0x190>)
 c00210a:	4293      	cmp	r3, r2
 c00210c:	d013      	beq.n	c002136 <HAL_GTZC_MPCBB_ConfigMem+0x4a>
 c00210e:	687b      	ldr	r3, [r7, #4]
 c002110:	4a5b      	ldr	r2, [pc, #364]	@ (c002280 <HAL_GTZC_MPCBB_ConfigMem+0x194>)
 c002112:	4293      	cmp	r3, r2
 c002114:	d00f      	beq.n	c002136 <HAL_GTZC_MPCBB_ConfigMem+0x4a>
#if defined (SRAM3_BASE)
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM3, MemBaseAddress))
 c002116:	687b      	ldr	r3, [r7, #4]
 c002118:	4a5a      	ldr	r2, [pc, #360]	@ (c002284 <HAL_GTZC_MPCBB_ConfigMem+0x198>)
 c00211a:	4293      	cmp	r3, r2
 c00211c:	d00b      	beq.n	c002136 <HAL_GTZC_MPCBB_ConfigMem+0x4a>
 c00211e:	687b      	ldr	r3, [r7, #4]
 c002120:	4a59      	ldr	r2, [pc, #356]	@ (c002288 <HAL_GTZC_MPCBB_ConfigMem+0x19c>)
 c002122:	4293      	cmp	r3, r2
 c002124:	d007      	beq.n	c002136 <HAL_GTZC_MPCBB_ConfigMem+0x4a>
#endif /* SRAM3_BASE */
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM4, MemBaseAddress))
 c002126:	687b      	ldr	r3, [r7, #4]
 c002128:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 c00212c:	d003      	beq.n	c002136 <HAL_GTZC_MPCBB_ConfigMem+0x4a>
 c00212e:	687b      	ldr	r3, [r7, #4]
 c002130:	f1b3 5f60 	cmp.w	r3, #939524096	@ 0x38000000
 c002134:	d111      	bne.n	c00215a <HAL_GTZC_MPCBB_ConfigMem+0x6e>
#endif /* SRAM5_BASE */
#if defined (SRAM6_BASE)
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM6, MemBaseAddress))
#endif /* SRAM6_BASE */
      )
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c002136:	683b      	ldr	r3, [r7, #0]
 c002138:	681b      	ldr	r3, [r3, #0]
 c00213a:	2b00      	cmp	r3, #0
 c00213c:	d004      	beq.n	c002148 <HAL_GTZC_MPCBB_ConfigMem+0x5c>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c00213e:	683b      	ldr	r3, [r7, #0]
 c002140:	681b      	ldr	r3, [r3, #0]
 c002142:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 c002146:	d108      	bne.n	c00215a <HAL_GTZC_MPCBB_ConfigMem+0x6e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c002148:	683b      	ldr	r3, [r7, #0]
 c00214a:	685b      	ldr	r3, [r3, #4]
 c00214c:	2b00      	cmp	r3, #0
 c00214e:	d006      	beq.n	c00215e <HAL_GTZC_MPCBB_ConfigMem+0x72>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c002150:	683b      	ldr	r3, [r7, #0]
 c002152:	685b      	ldr	r3, [r3, #4]
 c002154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 c002158:	d001      	beq.n	c00215e <HAL_GTZC_MPCBB_ConfigMem+0x72>
  {
    return HAL_ERROR;
 c00215a:	2301      	movs	r3, #1
 c00215c:	e088      	b.n	c002270 <HAL_GTZC_MPCBB_ConfigMem+0x184>
  }

  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c00215e:	687b      	ldr	r3, [r7, #4]
 c002160:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 c002164:	d003      	beq.n	c00216e <HAL_GTZC_MPCBB_ConfigMem+0x82>
 c002166:	687b      	ldr	r3, [r7, #4]
 c002168:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 c00216c:	d105      	bne.n	c00217a <HAL_GTZC_MPCBB_ConfigMem+0x8e>
  {
    mpcbb_ptr = GTZC_MPCBB1;
 c00216e:	4b47      	ldr	r3, [pc, #284]	@ (c00228c <HAL_GTZC_MPCBB_ConfigMem+0x1a0>)
 c002170:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c002172:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 c002176:	61bb      	str	r3, [r7, #24]
 c002178:	e02b      	b.n	c0021d2 <HAL_GTZC_MPCBB_ConfigMem+0xe6>
  }
  else if (IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress))
 c00217a:	687b      	ldr	r3, [r7, #4]
 c00217c:	4a3f      	ldr	r2, [pc, #252]	@ (c00227c <HAL_GTZC_MPCBB_ConfigMem+0x190>)
 c00217e:	4293      	cmp	r3, r2
 c002180:	d003      	beq.n	c00218a <HAL_GTZC_MPCBB_ConfigMem+0x9e>
 c002182:	687b      	ldr	r3, [r7, #4]
 c002184:	4a3e      	ldr	r2, [pc, #248]	@ (c002280 <HAL_GTZC_MPCBB_ConfigMem+0x194>)
 c002186:	4293      	cmp	r3, r2
 c002188:	d105      	bne.n	c002196 <HAL_GTZC_MPCBB_ConfigMem+0xaa>
  {
    mpcbb_ptr = GTZC_MPCBB2;
 c00218a:	4b41      	ldr	r3, [pc, #260]	@ (c002290 <HAL_GTZC_MPCBB_ConfigMem+0x1a4>)
 c00218c:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c00218e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 c002192:	61bb      	str	r3, [r7, #24]
 c002194:	e01d      	b.n	c0021d2 <HAL_GTZC_MPCBB_ConfigMem+0xe6>
  }
#if defined (SRAM3_BASE)
  else if (IS_GTZC_BASE_ADDRESS(SRAM3, MemBaseAddress))
 c002196:	687b      	ldr	r3, [r7, #4]
 c002198:	4a3a      	ldr	r2, [pc, #232]	@ (c002284 <HAL_GTZC_MPCBB_ConfigMem+0x198>)
 c00219a:	4293      	cmp	r3, r2
 c00219c:	d003      	beq.n	c0021a6 <HAL_GTZC_MPCBB_ConfigMem+0xba>
 c00219e:	687b      	ldr	r3, [r7, #4]
 c0021a0:	4a39      	ldr	r2, [pc, #228]	@ (c002288 <HAL_GTZC_MPCBB_ConfigMem+0x19c>)
 c0021a2:	4293      	cmp	r3, r2
 c0021a4:	d105      	bne.n	c0021b2 <HAL_GTZC_MPCBB_ConfigMem+0xc6>
  {
    mpcbb_ptr = GTZC_MPCBB3;
 c0021a6:	4b3b      	ldr	r3, [pc, #236]	@ (c002294 <HAL_GTZC_MPCBB_ConfigMem+0x1a8>)
 c0021a8:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM3);
 c0021aa:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 c0021ae:	61bb      	str	r3, [r7, #24]
 c0021b0:	e00f      	b.n	c0021d2 <HAL_GTZC_MPCBB_ConfigMem+0xe6>
  }
#endif /* SRAM3_BASE */
  else if (IS_GTZC_BASE_ADDRESS(SRAM4, MemBaseAddress))
 c0021b2:	687b      	ldr	r3, [r7, #4]
 c0021b4:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 c0021b8:	d003      	beq.n	c0021c2 <HAL_GTZC_MPCBB_ConfigMem+0xd6>
 c0021ba:	687b      	ldr	r3, [r7, #4]
 c0021bc:	f1b3 5f60 	cmp.w	r3, #939524096	@ 0x38000000
 c0021c0:	d105      	bne.n	c0021ce <HAL_GTZC_MPCBB_ConfigMem+0xe2>
  {
    mpcbb_ptr = GTZC_MPCBB4;
 c0021c2:	4b35      	ldr	r3, [pc, #212]	@ (c002298 <HAL_GTZC_MPCBB_ConfigMem+0x1ac>)
 c0021c4:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM4);
 c0021c6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 c0021ca:	61bb      	str	r3, [r7, #24]
 c0021cc:	e001      	b.n	c0021d2 <HAL_GTZC_MPCBB_ConfigMem+0xe6>
    mem_size = GTZC_MEM_SIZE(SRAM6);
  }
#endif /* SRAM6_BASE */
  else
  {
    return HAL_ERROR;
 c0021ce:	2301      	movs	r3, #1
 c0021d0:	e04e      	b.n	c002270 <HAL_GTZC_MPCBB_ConfigMem+0x184>
  }

  /* translate mem_size in number of super-blocks  */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c0021d2:	69bb      	ldr	r3, [r7, #24]
 c0021d4:	0b9b      	lsrs	r3, r3, #14
 c0021d6:	613b      	str	r3, [r7, #16]

  /* write PRIVCFGR register information */
  for (i = 0U; i < size_in_superblocks; i++)
 c0021d8:	2300      	movs	r3, #0
 c0021da:	617b      	str	r3, [r7, #20]
 c0021dc:	e00c      	b.n	c0021f8 <HAL_GTZC_MPCBB_ConfigMem+0x10c>
  {
    WRITE_REG(mpcbb_ptr->PRIVCFGR[i],
 c0021de:	683b      	ldr	r3, [r7, #0]
 c0021e0:	697a      	ldr	r2, [r7, #20]
 c0021e2:	3222      	adds	r2, #34	@ 0x22
 c0021e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c0021e8:	69fb      	ldr	r3, [r7, #28]
 c0021ea:	697a      	ldr	r2, [r7, #20]
 c0021ec:	3280      	adds	r2, #128	@ 0x80
 c0021ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c0021f2:	697b      	ldr	r3, [r7, #20]
 c0021f4:	3301      	adds	r3, #1
 c0021f6:	617b      	str	r3, [r7, #20]
 c0021f8:	697a      	ldr	r2, [r7, #20]
 c0021fa:	693b      	ldr	r3, [r7, #16]
 c0021fc:	429a      	cmp	r2, r3
 c0021fe:	d3ee      	bcc.n	c0021de <HAL_GTZC_MPCBB_ConfigMem+0xf2>
#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t size_mask;
  uint32_t reg_value;

  /* write SECCFGR register information */
  for (i = 0U; i < size_in_superblocks; i++)
 c002200:	2300      	movs	r3, #0
 c002202:	617b      	str	r3, [r7, #20]
 c002204:	e00c      	b.n	c002220 <HAL_GTZC_MPCBB_ConfigMem+0x134>
  {
    WRITE_REG(mpcbb_ptr->SECCFGR[i],
 c002206:	683b      	ldr	r3, [r7, #0]
 c002208:	697a      	ldr	r2, [r7, #20]
 c00220a:	3202      	adds	r2, #2
 c00220c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c002210:	69fb      	ldr	r3, [r7, #28]
 c002212:	697a      	ldr	r2, [r7, #20]
 c002214:	3240      	adds	r2, #64	@ 0x40
 c002216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c00221a:	697b      	ldr	r3, [r7, #20]
 c00221c:	3301      	adds	r3, #1
 c00221e:	617b      	str	r3, [r7, #20]
 c002220:	697a      	ldr	r2, [r7, #20]
 c002222:	693b      	ldr	r3, [r7, #16]
 c002224:	429a      	cmp	r2, r3
 c002226:	d3ee      	bcc.n	c002206 <HAL_GTZC_MPCBB_ConfigMem+0x11a>
    MODIFY_REG(mpcbb_ptr->CFGLOCKR2, 0x000FFFFFUL, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[1]);
  }
  else
#endif /* GTZC_MPCBB_CFGLOCKR2_SPLCK32_Msk */
  {
    size_mask = (1UL << (size_in_superblocks & 0x1FU)) - 1U;
 c002228:	693b      	ldr	r3, [r7, #16]
 c00222a:	f003 031f 	and.w	r3, r3, #31
 c00222e:	2201      	movs	r2, #1
 c002230:	fa02 f303 	lsl.w	r3, r2, r3
 c002234:	3b01      	subs	r3, #1
 c002236:	60fb      	str	r3, [r7, #12]
  }
  /* limitation: code not portable with memory > 512K */
  MODIFY_REG(mpcbb_ptr->CFGLOCKR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c002238:	69fb      	ldr	r3, [r7, #28]
 c00223a:	691a      	ldr	r2, [r3, #16]
 c00223c:	68fb      	ldr	r3, [r7, #12]
 c00223e:	43db      	mvns	r3, r3
 c002240:	401a      	ands	r2, r3
 c002242:	683b      	ldr	r3, [r7, #0]
 c002244:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 c002248:	431a      	orrs	r2, r3
 c00224a:	69fb      	ldr	r3, [r7, #28]
 c00224c:	611a      	str	r2, [r3, #16]

  /* write InvertSecureState and SecureRWIllegalMode properties */
  reg_value = pMPCBB_desc->InvertSecureState;
 c00224e:	683b      	ldr	r3, [r7, #0]
 c002250:	685b      	ldr	r3, [r3, #4]
 c002252:	60bb      	str	r3, [r7, #8]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c002254:	683b      	ldr	r3, [r7, #0]
 c002256:	681b      	ldr	r3, [r3, #0]
 c002258:	68ba      	ldr	r2, [r7, #8]
 c00225a:	4313      	orrs	r3, r2
 c00225c:	60bb      	str	r3, [r7, #8]

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c00225e:	69fb      	ldr	r3, [r7, #28]
 c002260:	681b      	ldr	r3, [r3, #0]
 c002262:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 c002266:	68bb      	ldr	r3, [r7, #8]
 c002268:	431a      	orrs	r2, r3
 c00226a:	69fb      	ldr	r3, [r7, #28]
 c00226c:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 c00226e:	2300      	movs	r3, #0
}
 c002270:	4618      	mov	r0, r3
 c002272:	3724      	adds	r7, #36	@ 0x24
 c002274:	46bd      	mov	sp, r7
 c002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00227a:	4770      	bx	lr
 c00227c:	20030000 	.word	0x20030000
 c002280:	30030000 	.word	0x30030000
 c002284:	20040000 	.word	0x20040000
 c002288:	30040000 	.word	0x30040000
 c00228c:	50032c00 	.word	0x50032c00
 c002290:	50033000 	.word	0x50033000
 c002294:	50033400 	.word	0x50033400
 c002298:	56023800 	.word	0x56023800

0c00229c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 c00229c:	b480      	push	{r7}
 c00229e:	b085      	sub	sp, #20
 c0022a0:	af00      	add	r7, sp, #0
 c0022a2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 c0022a4:	4b39      	ldr	r3, [pc, #228]	@ (c00238c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c0022a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c0022a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 c0022ac:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 c0022ae:	68ba      	ldr	r2, [r7, #8]
 c0022b0:	687b      	ldr	r3, [r7, #4]
 c0022b2:	429a      	cmp	r2, r3
 c0022b4:	d10b      	bne.n	c0022ce <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 c0022b6:	687b      	ldr	r3, [r7, #4]
 c0022b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c0022bc:	d905      	bls.n	c0022ca <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 c0022be:	4b33      	ldr	r3, [pc, #204]	@ (c00238c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c0022c0:	68db      	ldr	r3, [r3, #12]
 c0022c2:	4a32      	ldr	r2, [pc, #200]	@ (c00238c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c0022c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 c0022c8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 c0022ca:	2300      	movs	r3, #0
 c0022cc:	e057      	b.n	c00237e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 c0022ce:	687b      	ldr	r3, [r7, #4]
 c0022d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c0022d4:	d90a      	bls.n	c0022ec <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 c0022d6:	4b2d      	ldr	r3, [pc, #180]	@ (c00238c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c0022d8:	68db      	ldr	r3, [r3, #12]
 c0022da:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 c0022de:	687b      	ldr	r3, [r7, #4]
 c0022e0:	4313      	orrs	r3, r2
 c0022e2:	4a2a      	ldr	r2, [pc, #168]	@ (c00238c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c0022e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 c0022e8:	60d3      	str	r3, [r2, #12]
 c0022ea:	e007      	b.n	c0022fc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 c0022ec:	4b27      	ldr	r3, [pc, #156]	@ (c00238c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c0022ee:	68db      	ldr	r3, [r3, #12]
 c0022f0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 c0022f4:	4925      	ldr	r1, [pc, #148]	@ (c00238c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c0022f6:	687b      	ldr	r3, [r7, #4]
 c0022f8:	4313      	orrs	r3, r2
 c0022fa:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 c0022fc:	4b24      	ldr	r3, [pc, #144]	@ (c002390 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 c0022fe:	681b      	ldr	r3, [r3, #0]
 c002300:	4a24      	ldr	r2, [pc, #144]	@ (c002394 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 c002302:	fba2 2303 	umull	r2, r3, r2, r3
 c002306:	099b      	lsrs	r3, r3, #6
 c002308:	2232      	movs	r2, #50	@ 0x32
 c00230a:	fb02 f303 	mul.w	r3, r2, r3
 c00230e:	4a21      	ldr	r2, [pc, #132]	@ (c002394 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 c002310:	fba2 2303 	umull	r2, r3, r2, r3
 c002314:	099b      	lsrs	r3, r3, #6
 c002316:	3301      	adds	r3, #1
 c002318:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 c00231a:	e002      	b.n	c002322 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 c00231c:	68fb      	ldr	r3, [r7, #12]
 c00231e:	3b01      	subs	r3, #1
 c002320:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 c002322:	4b1a      	ldr	r3, [pc, #104]	@ (c00238c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c002324:	68db      	ldr	r3, [r3, #12]
 c002326:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 c00232a:	2b00      	cmp	r3, #0
 c00232c:	d102      	bne.n	c002334 <HAL_PWREx_ControlVoltageScaling+0x98>
 c00232e:	68fb      	ldr	r3, [r7, #12]
 c002330:	2b00      	cmp	r3, #0
 c002332:	d1f3      	bne.n	c00231c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 c002334:	68fb      	ldr	r3, [r7, #12]
 c002336:	2b00      	cmp	r3, #0
 c002338:	d01b      	beq.n	c002372 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 c00233a:	4b15      	ldr	r3, [pc, #84]	@ (c002390 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 c00233c:	681b      	ldr	r3, [r3, #0]
 c00233e:	4a15      	ldr	r2, [pc, #84]	@ (c002394 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 c002340:	fba2 2303 	umull	r2, r3, r2, r3
 c002344:	099b      	lsrs	r3, r3, #6
 c002346:	2232      	movs	r2, #50	@ 0x32
 c002348:	fb02 f303 	mul.w	r3, r2, r3
 c00234c:	4a11      	ldr	r2, [pc, #68]	@ (c002394 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 c00234e:	fba2 2303 	umull	r2, r3, r2, r3
 c002352:	099b      	lsrs	r3, r3, #6
 c002354:	3301      	adds	r3, #1
 c002356:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 c002358:	e002      	b.n	c002360 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 c00235a:	68fb      	ldr	r3, [r7, #12]
 c00235c:	3b01      	subs	r3, #1
 c00235e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 c002360:	4b0a      	ldr	r3, [pc, #40]	@ (c00238c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 c002362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c002364:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 c002368:	2b00      	cmp	r3, #0
 c00236a:	d102      	bne.n	c002372 <HAL_PWREx_ControlVoltageScaling+0xd6>
 c00236c:	68fb      	ldr	r3, [r7, #12]
 c00236e:	2b00      	cmp	r3, #0
 c002370:	d1f3      	bne.n	c00235a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 c002372:	68fb      	ldr	r3, [r7, #12]
 c002374:	2b00      	cmp	r3, #0
 c002376:	d101      	bne.n	c00237c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 c002378:	2303      	movs	r3, #3
 c00237a:	e000      	b.n	c00237e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 c00237c:	2300      	movs	r3, #0
}
 c00237e:	4618      	mov	r0, r3
 c002380:	3714      	adds	r7, #20
 c002382:	46bd      	mov	sp, r7
 c002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002388:	4770      	bx	lr
 c00238a:	bf00      	nop
 c00238c:	56020800 	.word	0x56020800
 c002390:	30000108 	.word	0x30000108
 c002394:	10624dd3 	.word	0x10624dd3

0c002398 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 c002398:	b480      	push	{r7}
 c00239a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 c00239c:	4b04      	ldr	r3, [pc, #16]	@ (c0023b0 <HAL_PWREx_GetVoltageRange+0x18>)
 c00239e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c0023a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 c0023a4:	4618      	mov	r0, r3
 c0023a6:	46bd      	mov	sp, r7
 c0023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0023ac:	4770      	bx	lr
 c0023ae:	bf00      	nop
 c0023b0:	56020800 	.word	0x56020800

0c0023b4 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 c0023b4:	b480      	push	{r7}
 c0023b6:	b085      	sub	sp, #20
 c0023b8:	af00      	add	r7, sp, #0
 c0023ba:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 c0023bc:	4b22      	ldr	r3, [pc, #136]	@ (c002448 <HAL_PWREx_ConfigSupply+0x94>)
 c0023be:	681b      	ldr	r3, [r3, #0]
 c0023c0:	4a22      	ldr	r2, [pc, #136]	@ (c00244c <HAL_PWREx_ConfigSupply+0x98>)
 c0023c2:	fba2 2303 	umull	r2, r3, r2, r3
 c0023c6:	099b      	lsrs	r3, r3, #6
 c0023c8:	2232      	movs	r2, #50	@ 0x32
 c0023ca:	fb02 f303 	mul.w	r3, r2, r3
 c0023ce:	4a1f      	ldr	r2, [pc, #124]	@ (c00244c <HAL_PWREx_ConfigSupply+0x98>)
 c0023d0:	fba2 2303 	umull	r2, r3, r2, r3
 c0023d4:	099b      	lsrs	r3, r3, #6
 c0023d6:	3301      	adds	r3, #1
 c0023d8:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 c0023da:	687b      	ldr	r3, [r7, #4]
 c0023dc:	2b00      	cmp	r3, #0
 c0023de:	d113      	bne.n	c002408 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 c0023e0:	4b1b      	ldr	r3, [pc, #108]	@ (c002450 <HAL_PWREx_ConfigSupply+0x9c>)
 c0023e2:	689b      	ldr	r3, [r3, #8]
 c0023e4:	4a1a      	ldr	r2, [pc, #104]	@ (c002450 <HAL_PWREx_ConfigSupply+0x9c>)
 c0023e6:	f023 0302 	bic.w	r3, r3, #2
 c0023ea:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 c0023ec:	e002      	b.n	c0023f4 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 c0023ee:	68fb      	ldr	r3, [r7, #12]
 c0023f0:	3b01      	subs	r3, #1
 c0023f2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 c0023f4:	4b16      	ldr	r3, [pc, #88]	@ (c002450 <HAL_PWREx_ConfigSupply+0x9c>)
 c0023f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c0023f8:	f003 0302 	and.w	r3, r3, #2
 c0023fc:	2b02      	cmp	r3, #2
 c0023fe:	d116      	bne.n	c00242e <HAL_PWREx_ConfigSupply+0x7a>
 c002400:	68fb      	ldr	r3, [r7, #12]
 c002402:	2b00      	cmp	r3, #0
 c002404:	d1f3      	bne.n	c0023ee <HAL_PWREx_ConfigSupply+0x3a>
 c002406:	e012      	b.n	c00242e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 c002408:	4b11      	ldr	r3, [pc, #68]	@ (c002450 <HAL_PWREx_ConfigSupply+0x9c>)
 c00240a:	689b      	ldr	r3, [r3, #8]
 c00240c:	4a10      	ldr	r2, [pc, #64]	@ (c002450 <HAL_PWREx_ConfigSupply+0x9c>)
 c00240e:	f043 0302 	orr.w	r3, r3, #2
 c002412:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 c002414:	e002      	b.n	c00241c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 c002416:	68fb      	ldr	r3, [r7, #12]
 c002418:	3b01      	subs	r3, #1
 c00241a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 c00241c:	4b0c      	ldr	r3, [pc, #48]	@ (c002450 <HAL_PWREx_ConfigSupply+0x9c>)
 c00241e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c002420:	f003 0302 	and.w	r3, r3, #2
 c002424:	2b00      	cmp	r3, #0
 c002426:	d102      	bne.n	c00242e <HAL_PWREx_ConfigSupply+0x7a>
 c002428:	68fb      	ldr	r3, [r7, #12]
 c00242a:	2b00      	cmp	r3, #0
 c00242c:	d1f3      	bne.n	c002416 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 c00242e:	68fb      	ldr	r3, [r7, #12]
 c002430:	2b00      	cmp	r3, #0
 c002432:	d101      	bne.n	c002438 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 c002434:	2303      	movs	r3, #3
 c002436:	e000      	b.n	c00243a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 c002438:	2300      	movs	r3, #0
}
 c00243a:	4618      	mov	r0, r3
 c00243c:	3714      	adds	r7, #20
 c00243e:	46bd      	mov	sp, r7
 c002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002444:	4770      	bx	lr
 c002446:	bf00      	nop
 c002448:	30000108 	.word	0x30000108
 c00244c:	10624dd3 	.word	0x10624dd3
 c002450:	56020800 	.word	0x56020800

0c002454 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 c002454:	b580      	push	{r7, lr}
 c002456:	b08e      	sub	sp, #56	@ 0x38
 c002458:	af00      	add	r7, sp, #0
 c00245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 c00245c:	2300      	movs	r3, #0
 c00245e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 c002462:	687b      	ldr	r3, [r7, #4]
 c002464:	2b00      	cmp	r3, #0
 c002466:	d102      	bne.n	c00246e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 c002468:	2301      	movs	r3, #1
 c00246a:	f000 bec8 	b.w	c0031fe <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c00246e:	4b99      	ldr	r3, [pc, #612]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c002470:	69db      	ldr	r3, [r3, #28]
 c002472:	f003 030c 	and.w	r3, r3, #12
 c002476:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 c002478:	4b96      	ldr	r3, [pc, #600]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c00247a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00247c:	f003 0303 	and.w	r3, r3, #3
 c002480:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c002482:	687b      	ldr	r3, [r7, #4]
 c002484:	681b      	ldr	r3, [r3, #0]
 c002486:	f003 0310 	and.w	r3, r3, #16
 c00248a:	2b00      	cmp	r3, #0
 c00248c:	f000 816c 	beq.w	c002768 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c002490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c002492:	2b00      	cmp	r3, #0
 c002494:	d007      	beq.n	c0024a6 <HAL_RCC_OscConfig+0x52>
 c002496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c002498:	2b0c      	cmp	r3, #12
 c00249a:	f040 80de 	bne.w	c00265a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 c00249e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0024a0:	2b01      	cmp	r3, #1
 c0024a2:	f040 80da 	bne.w	c00265a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 c0024a6:	687b      	ldr	r3, [r7, #4]
 c0024a8:	69db      	ldr	r3, [r3, #28]
 c0024aa:	2b00      	cmp	r3, #0
 c0024ac:	d102      	bne.n	c0024b4 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 c0024ae:	2301      	movs	r3, #1
 c0024b0:	f000 bea5 	b.w	c0031fe <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 c0024b4:	687b      	ldr	r3, [r7, #4]
 c0024b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 c0024b8:	4b86      	ldr	r3, [pc, #536]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c0024ba:	689b      	ldr	r3, [r3, #8]
 c0024bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c0024c0:	2b00      	cmp	r3, #0
 c0024c2:	d004      	beq.n	c0024ce <HAL_RCC_OscConfig+0x7a>
 c0024c4:	4b83      	ldr	r3, [pc, #524]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c0024c6:	689b      	ldr	r3, [r3, #8]
 c0024c8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 c0024cc:	e005      	b.n	c0024da <HAL_RCC_OscConfig+0x86>
 c0024ce:	4b81      	ldr	r3, [pc, #516]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c0024d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c0024d4:	041b      	lsls	r3, r3, #16
 c0024d6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 c0024da:	4293      	cmp	r3, r2
 c0024dc:	d255      	bcs.n	c00258a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c0024de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0024e0:	2b00      	cmp	r3, #0
 c0024e2:	d10a      	bne.n	c0024fa <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c0024e4:	687b      	ldr	r3, [r7, #4]
 c0024e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0024e8:	4618      	mov	r0, r3
 c0024ea:	f001 f9d9 	bl	c0038a0 <RCC_SetFlashLatencyFromMSIRange>
 c0024ee:	4603      	mov	r3, r0
 c0024f0:	2b00      	cmp	r3, #0
 c0024f2:	d002      	beq.n	c0024fa <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 c0024f4:	2301      	movs	r3, #1
 c0024f6:	f000 be82 	b.w	c0031fe <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 c0024fa:	4b76      	ldr	r3, [pc, #472]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c0024fc:	689b      	ldr	r3, [r3, #8]
 c0024fe:	4a75      	ldr	r2, [pc, #468]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c002500:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 c002504:	6093      	str	r3, [r2, #8]
 c002506:	4b73      	ldr	r3, [pc, #460]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c002508:	689b      	ldr	r3, [r3, #8]
 c00250a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 c00250e:	687b      	ldr	r3, [r7, #4]
 c002510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c002512:	4970      	ldr	r1, [pc, #448]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c002514:	4313      	orrs	r3, r2
 c002516:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 c002518:	687b      	ldr	r3, [r7, #4]
 c00251a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c00251c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 c002520:	d309      	bcc.n	c002536 <HAL_RCC_OscConfig+0xe2>
 c002522:	4b6c      	ldr	r3, [pc, #432]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c002524:	68db      	ldr	r3, [r3, #12]
 c002526:	f023 021f 	bic.w	r2, r3, #31
 c00252a:	687b      	ldr	r3, [r7, #4]
 c00252c:	6a1b      	ldr	r3, [r3, #32]
 c00252e:	4969      	ldr	r1, [pc, #420]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c002530:	4313      	orrs	r3, r2
 c002532:	60cb      	str	r3, [r1, #12]
 c002534:	e07e      	b.n	c002634 <HAL_RCC_OscConfig+0x1e0>
 c002536:	687b      	ldr	r3, [r7, #4]
 c002538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c00253a:	2b00      	cmp	r3, #0
 c00253c:	da0a      	bge.n	c002554 <HAL_RCC_OscConfig+0x100>
 c00253e:	4b65      	ldr	r3, [pc, #404]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c002540:	68db      	ldr	r3, [r3, #12]
 c002542:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 c002546:	687b      	ldr	r3, [r7, #4]
 c002548:	6a1b      	ldr	r3, [r3, #32]
 c00254a:	015b      	lsls	r3, r3, #5
 c00254c:	4961      	ldr	r1, [pc, #388]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c00254e:	4313      	orrs	r3, r2
 c002550:	60cb      	str	r3, [r1, #12]
 c002552:	e06f      	b.n	c002634 <HAL_RCC_OscConfig+0x1e0>
 c002554:	687b      	ldr	r3, [r7, #4]
 c002556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c002558:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 c00255c:	d30a      	bcc.n	c002574 <HAL_RCC_OscConfig+0x120>
 c00255e:	4b5d      	ldr	r3, [pc, #372]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c002560:	68db      	ldr	r3, [r3, #12]
 c002562:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 c002566:	687b      	ldr	r3, [r7, #4]
 c002568:	6a1b      	ldr	r3, [r3, #32]
 c00256a:	029b      	lsls	r3, r3, #10
 c00256c:	4959      	ldr	r1, [pc, #356]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c00256e:	4313      	orrs	r3, r2
 c002570:	60cb      	str	r3, [r1, #12]
 c002572:	e05f      	b.n	c002634 <HAL_RCC_OscConfig+0x1e0>
 c002574:	4b57      	ldr	r3, [pc, #348]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c002576:	68db      	ldr	r3, [r3, #12]
 c002578:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 c00257c:	687b      	ldr	r3, [r7, #4]
 c00257e:	6a1b      	ldr	r3, [r3, #32]
 c002580:	03db      	lsls	r3, r3, #15
 c002582:	4954      	ldr	r1, [pc, #336]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c002584:	4313      	orrs	r3, r2
 c002586:	60cb      	str	r3, [r1, #12]
 c002588:	e054      	b.n	c002634 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 c00258a:	4b52      	ldr	r3, [pc, #328]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c00258c:	689b      	ldr	r3, [r3, #8]
 c00258e:	4a51      	ldr	r2, [pc, #324]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c002590:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 c002594:	6093      	str	r3, [r2, #8]
 c002596:	4b4f      	ldr	r3, [pc, #316]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c002598:	689b      	ldr	r3, [r3, #8]
 c00259a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 c00259e:	687b      	ldr	r3, [r7, #4]
 c0025a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0025a2:	494c      	ldr	r1, [pc, #304]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c0025a4:	4313      	orrs	r3, r2
 c0025a6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 c0025a8:	687b      	ldr	r3, [r7, #4]
 c0025aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0025ac:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 c0025b0:	d309      	bcc.n	c0025c6 <HAL_RCC_OscConfig+0x172>
 c0025b2:	4b48      	ldr	r3, [pc, #288]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c0025b4:	68db      	ldr	r3, [r3, #12]
 c0025b6:	f023 021f 	bic.w	r2, r3, #31
 c0025ba:	687b      	ldr	r3, [r7, #4]
 c0025bc:	6a1b      	ldr	r3, [r3, #32]
 c0025be:	4945      	ldr	r1, [pc, #276]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c0025c0:	4313      	orrs	r3, r2
 c0025c2:	60cb      	str	r3, [r1, #12]
 c0025c4:	e028      	b.n	c002618 <HAL_RCC_OscConfig+0x1c4>
 c0025c6:	687b      	ldr	r3, [r7, #4]
 c0025c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0025ca:	2b00      	cmp	r3, #0
 c0025cc:	da0a      	bge.n	c0025e4 <HAL_RCC_OscConfig+0x190>
 c0025ce:	4b41      	ldr	r3, [pc, #260]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c0025d0:	68db      	ldr	r3, [r3, #12]
 c0025d2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 c0025d6:	687b      	ldr	r3, [r7, #4]
 c0025d8:	6a1b      	ldr	r3, [r3, #32]
 c0025da:	015b      	lsls	r3, r3, #5
 c0025dc:	493d      	ldr	r1, [pc, #244]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c0025de:	4313      	orrs	r3, r2
 c0025e0:	60cb      	str	r3, [r1, #12]
 c0025e2:	e019      	b.n	c002618 <HAL_RCC_OscConfig+0x1c4>
 c0025e4:	687b      	ldr	r3, [r7, #4]
 c0025e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0025e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 c0025ec:	d30a      	bcc.n	c002604 <HAL_RCC_OscConfig+0x1b0>
 c0025ee:	4b39      	ldr	r3, [pc, #228]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c0025f0:	68db      	ldr	r3, [r3, #12]
 c0025f2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 c0025f6:	687b      	ldr	r3, [r7, #4]
 c0025f8:	6a1b      	ldr	r3, [r3, #32]
 c0025fa:	029b      	lsls	r3, r3, #10
 c0025fc:	4935      	ldr	r1, [pc, #212]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c0025fe:	4313      	orrs	r3, r2
 c002600:	60cb      	str	r3, [r1, #12]
 c002602:	e009      	b.n	c002618 <HAL_RCC_OscConfig+0x1c4>
 c002604:	4b33      	ldr	r3, [pc, #204]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c002606:	68db      	ldr	r3, [r3, #12]
 c002608:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 c00260c:	687b      	ldr	r3, [r7, #4]
 c00260e:	6a1b      	ldr	r3, [r3, #32]
 c002610:	03db      	lsls	r3, r3, #15
 c002612:	4930      	ldr	r1, [pc, #192]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c002614:	4313      	orrs	r3, r2
 c002616:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c002618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00261a:	2b00      	cmp	r3, #0
 c00261c:	d10a      	bne.n	c002634 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c00261e:	687b      	ldr	r3, [r7, #4]
 c002620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c002622:	4618      	mov	r0, r3
 c002624:	f001 f93c 	bl	c0038a0 <RCC_SetFlashLatencyFromMSIRange>
 c002628:	4603      	mov	r3, r0
 c00262a:	2b00      	cmp	r3, #0
 c00262c:	d002      	beq.n	c002634 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 c00262e:	2301      	movs	r3, #1
 c002630:	f000 bde5 	b.w	c0031fe <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 c002634:	f001 f8de 	bl	c0037f4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 c002638:	4b27      	ldr	r3, [pc, #156]	@ (c0026d8 <HAL_RCC_OscConfig+0x284>)
 c00263a:	681b      	ldr	r3, [r3, #0]
 c00263c:	4618      	mov	r0, r3
 c00263e:	f7fe ff45 	bl	c0014cc <HAL_InitTick>
 c002642:	4603      	mov	r3, r0
 c002644:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 c002648:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 c00264c:	2b00      	cmp	r3, #0
 c00264e:	f000 808a 	beq.w	c002766 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 c002652:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 c002656:	f000 bdd2 	b.w	c0031fe <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 c00265a:	687b      	ldr	r3, [r7, #4]
 c00265c:	69db      	ldr	r3, [r3, #28]
 c00265e:	2b00      	cmp	r3, #0
 c002660:	d066      	beq.n	c002730 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 c002662:	4b1c      	ldr	r3, [pc, #112]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c002664:	681b      	ldr	r3, [r3, #0]
 c002666:	4a1b      	ldr	r2, [pc, #108]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c002668:	f043 0301 	orr.w	r3, r3, #1
 c00266c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 c00266e:	f7fe ffb7 	bl	c0015e0 <HAL_GetTick>
 c002672:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 c002674:	e009      	b.n	c00268a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c002676:	f7fe ffb3 	bl	c0015e0 <HAL_GetTick>
 c00267a:	4602      	mov	r2, r0
 c00267c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c00267e:	1ad3      	subs	r3, r2, r3
 c002680:	2b02      	cmp	r3, #2
 c002682:	d902      	bls.n	c00268a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 c002684:	2303      	movs	r3, #3
 c002686:	f000 bdba 	b.w	c0031fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 c00268a:	4b12      	ldr	r3, [pc, #72]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c00268c:	681b      	ldr	r3, [r3, #0]
 c00268e:	f003 0304 	and.w	r3, r3, #4
 c002692:	2b00      	cmp	r3, #0
 c002694:	d0ef      	beq.n	c002676 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 c002696:	4b0f      	ldr	r3, [pc, #60]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c002698:	689b      	ldr	r3, [r3, #8]
 c00269a:	4a0e      	ldr	r2, [pc, #56]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c00269c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 c0026a0:	6093      	str	r3, [r2, #8]
 c0026a2:	4b0c      	ldr	r3, [pc, #48]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c0026a4:	689b      	ldr	r3, [r3, #8]
 c0026a6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 c0026aa:	687b      	ldr	r3, [r7, #4]
 c0026ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0026ae:	4909      	ldr	r1, [pc, #36]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c0026b0:	4313      	orrs	r3, r2
 c0026b2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 c0026b4:	687b      	ldr	r3, [r7, #4]
 c0026b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0026b8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 c0026bc:	d30e      	bcc.n	c0026dc <HAL_RCC_OscConfig+0x288>
 c0026be:	4b05      	ldr	r3, [pc, #20]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c0026c0:	68db      	ldr	r3, [r3, #12]
 c0026c2:	f023 021f 	bic.w	r2, r3, #31
 c0026c6:	687b      	ldr	r3, [r7, #4]
 c0026c8:	6a1b      	ldr	r3, [r3, #32]
 c0026ca:	4902      	ldr	r1, [pc, #8]	@ (c0026d4 <HAL_RCC_OscConfig+0x280>)
 c0026cc:	4313      	orrs	r3, r2
 c0026ce:	60cb      	str	r3, [r1, #12]
 c0026d0:	e04a      	b.n	c002768 <HAL_RCC_OscConfig+0x314>
 c0026d2:	bf00      	nop
 c0026d4:	56020c00 	.word	0x56020c00
 c0026d8:	3000010c 	.word	0x3000010c
 c0026dc:	687b      	ldr	r3, [r7, #4]
 c0026de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0026e0:	2b00      	cmp	r3, #0
 c0026e2:	da0a      	bge.n	c0026fa <HAL_RCC_OscConfig+0x2a6>
 c0026e4:	4b98      	ldr	r3, [pc, #608]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c0026e6:	68db      	ldr	r3, [r3, #12]
 c0026e8:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 c0026ec:	687b      	ldr	r3, [r7, #4]
 c0026ee:	6a1b      	ldr	r3, [r3, #32]
 c0026f0:	015b      	lsls	r3, r3, #5
 c0026f2:	4995      	ldr	r1, [pc, #596]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c0026f4:	4313      	orrs	r3, r2
 c0026f6:	60cb      	str	r3, [r1, #12]
 c0026f8:	e036      	b.n	c002768 <HAL_RCC_OscConfig+0x314>
 c0026fa:	687b      	ldr	r3, [r7, #4]
 c0026fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c0026fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 c002702:	d30a      	bcc.n	c00271a <HAL_RCC_OscConfig+0x2c6>
 c002704:	4b90      	ldr	r3, [pc, #576]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c002706:	68db      	ldr	r3, [r3, #12]
 c002708:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 c00270c:	687b      	ldr	r3, [r7, #4]
 c00270e:	6a1b      	ldr	r3, [r3, #32]
 c002710:	029b      	lsls	r3, r3, #10
 c002712:	498d      	ldr	r1, [pc, #564]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c002714:	4313      	orrs	r3, r2
 c002716:	60cb      	str	r3, [r1, #12]
 c002718:	e026      	b.n	c002768 <HAL_RCC_OscConfig+0x314>
 c00271a:	4b8b      	ldr	r3, [pc, #556]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c00271c:	68db      	ldr	r3, [r3, #12]
 c00271e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 c002722:	687b      	ldr	r3, [r7, #4]
 c002724:	6a1b      	ldr	r3, [r3, #32]
 c002726:	03db      	lsls	r3, r3, #15
 c002728:	4987      	ldr	r1, [pc, #540]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c00272a:	4313      	orrs	r3, r2
 c00272c:	60cb      	str	r3, [r1, #12]
 c00272e:	e01b      	b.n	c002768 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 c002730:	4b85      	ldr	r3, [pc, #532]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c002732:	681b      	ldr	r3, [r3, #0]
 c002734:	4a84      	ldr	r2, [pc, #528]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c002736:	f023 0301 	bic.w	r3, r3, #1
 c00273a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 c00273c:	f7fe ff50 	bl	c0015e0 <HAL_GetTick>
 c002740:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 c002742:	e009      	b.n	c002758 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c002744:	f7fe ff4c 	bl	c0015e0 <HAL_GetTick>
 c002748:	4602      	mov	r2, r0
 c00274a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c00274c:	1ad3      	subs	r3, r2, r3
 c00274e:	2b02      	cmp	r3, #2
 c002750:	d902      	bls.n	c002758 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 c002752:	2303      	movs	r3, #3
 c002754:	f000 bd53 	b.w	c0031fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 c002758:	4b7b      	ldr	r3, [pc, #492]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c00275a:	681b      	ldr	r3, [r3, #0]
 c00275c:	f003 0304 	and.w	r3, r3, #4
 c002760:	2b00      	cmp	r3, #0
 c002762:	d1ef      	bne.n	c002744 <HAL_RCC_OscConfig+0x2f0>
 c002764:	e000      	b.n	c002768 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 c002766:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 c002768:	687b      	ldr	r3, [r7, #4]
 c00276a:	681b      	ldr	r3, [r3, #0]
 c00276c:	f003 0301 	and.w	r3, r3, #1
 c002770:	2b00      	cmp	r3, #0
 c002772:	f000 808b 	beq.w	c00288c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 c002776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c002778:	2b08      	cmp	r3, #8
 c00277a:	d005      	beq.n	c002788 <HAL_RCC_OscConfig+0x334>
 c00277c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00277e:	2b0c      	cmp	r3, #12
 c002780:	d109      	bne.n	c002796 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 c002782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c002784:	2b03      	cmp	r3, #3
 c002786:	d106      	bne.n	c002796 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 c002788:	687b      	ldr	r3, [r7, #4]
 c00278a:	685b      	ldr	r3, [r3, #4]
 c00278c:	2b00      	cmp	r3, #0
 c00278e:	d17d      	bne.n	c00288c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 c002790:	2301      	movs	r3, #1
 c002792:	f000 bd34 	b.w	c0031fe <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 c002796:	687b      	ldr	r3, [r7, #4]
 c002798:	685b      	ldr	r3, [r3, #4]
 c00279a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c00279e:	d106      	bne.n	c0027ae <HAL_RCC_OscConfig+0x35a>
 c0027a0:	4b69      	ldr	r3, [pc, #420]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c0027a2:	681b      	ldr	r3, [r3, #0]
 c0027a4:	4a68      	ldr	r2, [pc, #416]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c0027a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c0027aa:	6013      	str	r3, [r2, #0]
 c0027ac:	e041      	b.n	c002832 <HAL_RCC_OscConfig+0x3de>
 c0027ae:	687b      	ldr	r3, [r7, #4]
 c0027b0:	685b      	ldr	r3, [r3, #4]
 c0027b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 c0027b6:	d112      	bne.n	c0027de <HAL_RCC_OscConfig+0x38a>
 c0027b8:	4b63      	ldr	r3, [pc, #396]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c0027ba:	681b      	ldr	r3, [r3, #0]
 c0027bc:	4a62      	ldr	r2, [pc, #392]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c0027be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 c0027c2:	6013      	str	r3, [r2, #0]
 c0027c4:	4b60      	ldr	r3, [pc, #384]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c0027c6:	681b      	ldr	r3, [r3, #0]
 c0027c8:	4a5f      	ldr	r2, [pc, #380]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c0027ca:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 c0027ce:	6013      	str	r3, [r2, #0]
 c0027d0:	4b5d      	ldr	r3, [pc, #372]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c0027d2:	681b      	ldr	r3, [r3, #0]
 c0027d4:	4a5c      	ldr	r2, [pc, #368]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c0027d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c0027da:	6013      	str	r3, [r2, #0]
 c0027dc:	e029      	b.n	c002832 <HAL_RCC_OscConfig+0x3de>
 c0027de:	687b      	ldr	r3, [r7, #4]
 c0027e0:	685b      	ldr	r3, [r3, #4]
 c0027e2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 c0027e6:	d112      	bne.n	c00280e <HAL_RCC_OscConfig+0x3ba>
 c0027e8:	4b57      	ldr	r3, [pc, #348]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c0027ea:	681b      	ldr	r3, [r3, #0]
 c0027ec:	4a56      	ldr	r2, [pc, #344]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c0027ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 c0027f2:	6013      	str	r3, [r2, #0]
 c0027f4:	4b54      	ldr	r3, [pc, #336]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c0027f6:	681b      	ldr	r3, [r3, #0]
 c0027f8:	4a53      	ldr	r2, [pc, #332]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c0027fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 c0027fe:	6013      	str	r3, [r2, #0]
 c002800:	4b51      	ldr	r3, [pc, #324]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c002802:	681b      	ldr	r3, [r3, #0]
 c002804:	4a50      	ldr	r2, [pc, #320]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c002806:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c00280a:	6013      	str	r3, [r2, #0]
 c00280c:	e011      	b.n	c002832 <HAL_RCC_OscConfig+0x3de>
 c00280e:	4b4e      	ldr	r3, [pc, #312]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c002810:	681b      	ldr	r3, [r3, #0]
 c002812:	4a4d      	ldr	r2, [pc, #308]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c002814:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 c002818:	6013      	str	r3, [r2, #0]
 c00281a:	4b4b      	ldr	r3, [pc, #300]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c00281c:	681b      	ldr	r3, [r3, #0]
 c00281e:	4a4a      	ldr	r2, [pc, #296]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c002820:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 c002824:	6013      	str	r3, [r2, #0]
 c002826:	4b48      	ldr	r3, [pc, #288]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c002828:	681b      	ldr	r3, [r3, #0]
 c00282a:	4a47      	ldr	r2, [pc, #284]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c00282c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 c002830:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 c002832:	687b      	ldr	r3, [r7, #4]
 c002834:	685b      	ldr	r3, [r3, #4]
 c002836:	2b00      	cmp	r3, #0
 c002838:	d014      	beq.n	c002864 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 c00283a:	f7fe fed1 	bl	c0015e0 <HAL_GetTick>
 c00283e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c002840:	e009      	b.n	c002856 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c002842:	f7fe fecd 	bl	c0015e0 <HAL_GetTick>
 c002846:	4602      	mov	r2, r0
 c002848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c00284a:	1ad3      	subs	r3, r2, r3
 c00284c:	2b64      	cmp	r3, #100	@ 0x64
 c00284e:	d902      	bls.n	c002856 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 c002850:	2303      	movs	r3, #3
 c002852:	f000 bcd4 	b.w	c0031fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c002856:	4b3c      	ldr	r3, [pc, #240]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c002858:	681b      	ldr	r3, [r3, #0]
 c00285a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c00285e:	2b00      	cmp	r3, #0
 c002860:	d0ef      	beq.n	c002842 <HAL_RCC_OscConfig+0x3ee>
 c002862:	e013      	b.n	c00288c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 c002864:	f7fe febc 	bl	c0015e0 <HAL_GetTick>
 c002868:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c00286a:	e009      	b.n	c002880 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c00286c:	f7fe feb8 	bl	c0015e0 <HAL_GetTick>
 c002870:	4602      	mov	r2, r0
 c002872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002874:	1ad3      	subs	r3, r2, r3
 c002876:	2b64      	cmp	r3, #100	@ 0x64
 c002878:	d902      	bls.n	c002880 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 c00287a:	2303      	movs	r3, #3
 c00287c:	f000 bcbf 	b.w	c0031fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c002880:	4b31      	ldr	r3, [pc, #196]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c002882:	681b      	ldr	r3, [r3, #0]
 c002884:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c002888:	2b00      	cmp	r3, #0
 c00288a:	d1ef      	bne.n	c00286c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 c00288c:	687b      	ldr	r3, [r7, #4]
 c00288e:	681b      	ldr	r3, [r3, #0]
 c002890:	f003 0302 	and.w	r3, r3, #2
 c002894:	2b00      	cmp	r3, #0
 c002896:	d05f      	beq.n	c002958 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 c002898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00289a:	2b04      	cmp	r3, #4
 c00289c:	d005      	beq.n	c0028aa <HAL_RCC_OscConfig+0x456>
 c00289e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0028a0:	2b0c      	cmp	r3, #12
 c0028a2:	d114      	bne.n	c0028ce <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 c0028a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0028a6:	2b02      	cmp	r3, #2
 c0028a8:	d111      	bne.n	c0028ce <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 c0028aa:	687b      	ldr	r3, [r7, #4]
 c0028ac:	68db      	ldr	r3, [r3, #12]
 c0028ae:	2b00      	cmp	r3, #0
 c0028b0:	d102      	bne.n	c0028b8 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 c0028b2:	2301      	movs	r3, #1
 c0028b4:	f000 bca3 	b.w	c0031fe <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 c0028b8:	4b23      	ldr	r3, [pc, #140]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c0028ba:	691b      	ldr	r3, [r3, #16]
 c0028bc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 c0028c0:	687b      	ldr	r3, [r7, #4]
 c0028c2:	691b      	ldr	r3, [r3, #16]
 c0028c4:	041b      	lsls	r3, r3, #16
 c0028c6:	4920      	ldr	r1, [pc, #128]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c0028c8:	4313      	orrs	r3, r2
 c0028ca:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 c0028cc:	e044      	b.n	c002958 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 c0028ce:	687b      	ldr	r3, [r7, #4]
 c0028d0:	68db      	ldr	r3, [r3, #12]
 c0028d2:	2b00      	cmp	r3, #0
 c0028d4:	d024      	beq.n	c002920 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 c0028d6:	4b1c      	ldr	r3, [pc, #112]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c0028d8:	681b      	ldr	r3, [r3, #0]
 c0028da:	4a1b      	ldr	r2, [pc, #108]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c0028dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 c0028e0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 c0028e2:	f7fe fe7d 	bl	c0015e0 <HAL_GetTick>
 c0028e6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c0028e8:	e009      	b.n	c0028fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c0028ea:	f7fe fe79 	bl	c0015e0 <HAL_GetTick>
 c0028ee:	4602      	mov	r2, r0
 c0028f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c0028f2:	1ad3      	subs	r3, r2, r3
 c0028f4:	2b02      	cmp	r3, #2
 c0028f6:	d902      	bls.n	c0028fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 c0028f8:	2303      	movs	r3, #3
 c0028fa:	f000 bc80 	b.w	c0031fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c0028fe:	4b12      	ldr	r3, [pc, #72]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c002900:	681b      	ldr	r3, [r3, #0]
 c002902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c002906:	2b00      	cmp	r3, #0
 c002908:	d0ef      	beq.n	c0028ea <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 c00290a:	4b0f      	ldr	r3, [pc, #60]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c00290c:	691b      	ldr	r3, [r3, #16]
 c00290e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 c002912:	687b      	ldr	r3, [r7, #4]
 c002914:	691b      	ldr	r3, [r3, #16]
 c002916:	041b      	lsls	r3, r3, #16
 c002918:	490b      	ldr	r1, [pc, #44]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c00291a:	4313      	orrs	r3, r2
 c00291c:	610b      	str	r3, [r1, #16]
 c00291e:	e01b      	b.n	c002958 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 c002920:	4b09      	ldr	r3, [pc, #36]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c002922:	681b      	ldr	r3, [r3, #0]
 c002924:	4a08      	ldr	r2, [pc, #32]	@ (c002948 <HAL_RCC_OscConfig+0x4f4>)
 c002926:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 c00292a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 c00292c:	f7fe fe58 	bl	c0015e0 <HAL_GetTick>
 c002930:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c002932:	e00b      	b.n	c00294c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c002934:	f7fe fe54 	bl	c0015e0 <HAL_GetTick>
 c002938:	4602      	mov	r2, r0
 c00293a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c00293c:	1ad3      	subs	r3, r2, r3
 c00293e:	2b02      	cmp	r3, #2
 c002940:	d904      	bls.n	c00294c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 c002942:	2303      	movs	r3, #3
 c002944:	f000 bc5b 	b.w	c0031fe <HAL_RCC_OscConfig+0xdaa>
 c002948:	56020c00 	.word	0x56020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c00294c:	4baf      	ldr	r3, [pc, #700]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c00294e:	681b      	ldr	r3, [r3, #0]
 c002950:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c002954:	2b00      	cmp	r3, #0
 c002956:	d1ed      	bne.n	c002934 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 c002958:	687b      	ldr	r3, [r7, #4]
 c00295a:	681b      	ldr	r3, [r3, #0]
 c00295c:	f003 0308 	and.w	r3, r3, #8
 c002960:	2b00      	cmp	r3, #0
 c002962:	f000 80c8 	beq.w	c002af6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 c002966:	2300      	movs	r3, #0
 c002968:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c00296c:	4ba7      	ldr	r3, [pc, #668]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c00296e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c002972:	f003 0304 	and.w	r3, r3, #4
 c002976:	2b00      	cmp	r3, #0
 c002978:	d111      	bne.n	c00299e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c00297a:	4ba4      	ldr	r3, [pc, #656]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c00297c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c002980:	4aa2      	ldr	r2, [pc, #648]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c002982:	f043 0304 	orr.w	r3, r3, #4
 c002986:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c00298a:	4ba0      	ldr	r3, [pc, #640]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c00298c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c002990:	f003 0304 	and.w	r3, r3, #4
 c002994:	617b      	str	r3, [r7, #20]
 c002996:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 c002998:	2301      	movs	r3, #1
 c00299a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c00299e:	4b9c      	ldr	r3, [pc, #624]	@ (c002c10 <HAL_RCC_OscConfig+0x7bc>)
 c0029a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0029a2:	f003 0301 	and.w	r3, r3, #1
 c0029a6:	2b00      	cmp	r3, #0
 c0029a8:	d119      	bne.n	c0029de <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 c0029aa:	4b99      	ldr	r3, [pc, #612]	@ (c002c10 <HAL_RCC_OscConfig+0x7bc>)
 c0029ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0029ae:	4a98      	ldr	r2, [pc, #608]	@ (c002c10 <HAL_RCC_OscConfig+0x7bc>)
 c0029b0:	f043 0301 	orr.w	r3, r3, #1
 c0029b4:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 c0029b6:	f7fe fe13 	bl	c0015e0 <HAL_GetTick>
 c0029ba:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c0029bc:	e009      	b.n	c0029d2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c0029be:	f7fe fe0f 	bl	c0015e0 <HAL_GetTick>
 c0029c2:	4602      	mov	r2, r0
 c0029c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c0029c6:	1ad3      	subs	r3, r2, r3
 c0029c8:	2b02      	cmp	r3, #2
 c0029ca:	d902      	bls.n	c0029d2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 c0029cc:	2303      	movs	r3, #3
 c0029ce:	f000 bc16 	b.w	c0031fe <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c0029d2:	4b8f      	ldr	r3, [pc, #572]	@ (c002c10 <HAL_RCC_OscConfig+0x7bc>)
 c0029d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0029d6:	f003 0301 	and.w	r3, r3, #1
 c0029da:	2b00      	cmp	r3, #0
 c0029dc:	d0ef      	beq.n	c0029be <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 c0029de:	687b      	ldr	r3, [r7, #4]
 c0029e0:	695b      	ldr	r3, [r3, #20]
 c0029e2:	2b00      	cmp	r3, #0
 c0029e4:	d05f      	beq.n	c002aa6 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 c0029e6:	4b89      	ldr	r3, [pc, #548]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c0029e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0029ec:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 c0029ee:	687b      	ldr	r3, [r7, #4]
 c0029f0:	699a      	ldr	r2, [r3, #24]
 c0029f2:	6a3b      	ldr	r3, [r7, #32]
 c0029f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c0029f8:	429a      	cmp	r2, r3
 c0029fa:	d037      	beq.n	c002a6c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 c0029fc:	6a3b      	ldr	r3, [r7, #32]
 c0029fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c002a02:	2b00      	cmp	r3, #0
 c002a04:	d006      	beq.n	c002a14 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 c002a06:	6a3b      	ldr	r3, [r7, #32]
 c002a08:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 c002a0c:	2b00      	cmp	r3, #0
 c002a0e:	d101      	bne.n	c002a14 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 c002a10:	2301      	movs	r3, #1
 c002a12:	e3f4      	b.n	c0031fe <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 c002a14:	6a3b      	ldr	r3, [r7, #32]
 c002a16:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 c002a1a:	2b00      	cmp	r3, #0
 c002a1c:	d01b      	beq.n	c002a56 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 c002a1e:	4b7b      	ldr	r3, [pc, #492]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c002a20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002a24:	4a79      	ldr	r2, [pc, #484]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c002a26:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 c002a2a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 c002a2e:	f7fe fdd7 	bl	c0015e0 <HAL_GetTick>
 c002a32:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 c002a34:	e008      	b.n	c002a48 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c002a36:	f7fe fdd3 	bl	c0015e0 <HAL_GetTick>
 c002a3a:	4602      	mov	r2, r0
 c002a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002a3e:	1ad3      	subs	r3, r2, r3
 c002a40:	2b05      	cmp	r3, #5
 c002a42:	d901      	bls.n	c002a48 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 c002a44:	2303      	movs	r3, #3
 c002a46:	e3da      	b.n	c0031fe <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 c002a48:	4b70      	ldr	r3, [pc, #448]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c002a4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002a4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c002a52:	2b00      	cmp	r3, #0
 c002a54:	d1ef      	bne.n	c002a36 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 c002a56:	4b6d      	ldr	r3, [pc, #436]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c002a58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002a5c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 c002a60:	687b      	ldr	r3, [r7, #4]
 c002a62:	699b      	ldr	r3, [r3, #24]
 c002a64:	4969      	ldr	r1, [pc, #420]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c002a66:	4313      	orrs	r3, r2
 c002a68:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 c002a6c:	4b67      	ldr	r3, [pc, #412]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c002a6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002a72:	4a66      	ldr	r2, [pc, #408]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c002a74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 c002a78:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 c002a7c:	f7fe fdb0 	bl	c0015e0 <HAL_GetTick>
 c002a80:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 c002a82:	e008      	b.n	c002a96 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c002a84:	f7fe fdac 	bl	c0015e0 <HAL_GetTick>
 c002a88:	4602      	mov	r2, r0
 c002a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002a8c:	1ad3      	subs	r3, r2, r3
 c002a8e:	2b05      	cmp	r3, #5
 c002a90:	d901      	bls.n	c002a96 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 c002a92:	2303      	movs	r3, #3
 c002a94:	e3b3      	b.n	c0031fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 c002a96:	4b5d      	ldr	r3, [pc, #372]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c002a98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002a9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c002aa0:	2b00      	cmp	r3, #0
 c002aa2:	d0ef      	beq.n	c002a84 <HAL_RCC_OscConfig+0x630>
 c002aa4:	e01b      	b.n	c002ade <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 c002aa6:	4b59      	ldr	r3, [pc, #356]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c002aa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002aac:	4a57      	ldr	r2, [pc, #348]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c002aae:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 c002ab2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 c002ab6:	f7fe fd93 	bl	c0015e0 <HAL_GetTick>
 c002aba:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 c002abc:	e008      	b.n	c002ad0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c002abe:	f7fe fd8f 	bl	c0015e0 <HAL_GetTick>
 c002ac2:	4602      	mov	r2, r0
 c002ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002ac6:	1ad3      	subs	r3, r2, r3
 c002ac8:	2b05      	cmp	r3, #5
 c002aca:	d901      	bls.n	c002ad0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 c002acc:	2303      	movs	r3, #3
 c002ace:	e396      	b.n	c0031fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 c002ad0:	4b4e      	ldr	r3, [pc, #312]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c002ad2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002ad6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c002ada:	2b00      	cmp	r3, #0
 c002adc:	d1ef      	bne.n	c002abe <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c002ade:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 c002ae2:	2b01      	cmp	r3, #1
 c002ae4:	d107      	bne.n	c002af6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c002ae6:	4b49      	ldr	r3, [pc, #292]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c002ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c002aec:	4a47      	ldr	r2, [pc, #284]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c002aee:	f023 0304 	bic.w	r3, r3, #4
 c002af2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 c002af6:	687b      	ldr	r3, [r7, #4]
 c002af8:	681b      	ldr	r3, [r3, #0]
 c002afa:	f003 0304 	and.w	r3, r3, #4
 c002afe:	2b00      	cmp	r3, #0
 c002b00:	f000 8111 	beq.w	c002d26 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 c002b04:	2300      	movs	r3, #0
 c002b06:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c002b0a:	4b40      	ldr	r3, [pc, #256]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c002b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c002b10:	f003 0304 	and.w	r3, r3, #4
 c002b14:	2b00      	cmp	r3, #0
 c002b16:	d111      	bne.n	c002b3c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c002b18:	4b3c      	ldr	r3, [pc, #240]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c002b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c002b1e:	4a3b      	ldr	r2, [pc, #236]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c002b20:	f043 0304 	orr.w	r3, r3, #4
 c002b24:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c002b28:	4b38      	ldr	r3, [pc, #224]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c002b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c002b2e:	f003 0304 	and.w	r3, r3, #4
 c002b32:	613b      	str	r3, [r7, #16]
 c002b34:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 c002b36:	2301      	movs	r3, #1
 c002b38:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c002b3c:	4b34      	ldr	r3, [pc, #208]	@ (c002c10 <HAL_RCC_OscConfig+0x7bc>)
 c002b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c002b40:	f003 0301 	and.w	r3, r3, #1
 c002b44:	2b00      	cmp	r3, #0
 c002b46:	d118      	bne.n	c002b7a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 c002b48:	4b31      	ldr	r3, [pc, #196]	@ (c002c10 <HAL_RCC_OscConfig+0x7bc>)
 c002b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c002b4c:	4a30      	ldr	r2, [pc, #192]	@ (c002c10 <HAL_RCC_OscConfig+0x7bc>)
 c002b4e:	f043 0301 	orr.w	r3, r3, #1
 c002b52:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 c002b54:	f7fe fd44 	bl	c0015e0 <HAL_GetTick>
 c002b58:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c002b5a:	e008      	b.n	c002b6e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c002b5c:	f7fe fd40 	bl	c0015e0 <HAL_GetTick>
 c002b60:	4602      	mov	r2, r0
 c002b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002b64:	1ad3      	subs	r3, r2, r3
 c002b66:	2b02      	cmp	r3, #2
 c002b68:	d901      	bls.n	c002b6e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 c002b6a:	2303      	movs	r3, #3
 c002b6c:	e347      	b.n	c0031fe <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c002b6e:	4b28      	ldr	r3, [pc, #160]	@ (c002c10 <HAL_RCC_OscConfig+0x7bc>)
 c002b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c002b72:	f003 0301 	and.w	r3, r3, #1
 c002b76:	2b00      	cmp	r3, #0
 c002b78:	d0f0      	beq.n	c002b5c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 c002b7a:	687b      	ldr	r3, [r7, #4]
 c002b7c:	689b      	ldr	r3, [r3, #8]
 c002b7e:	f003 0301 	and.w	r3, r3, #1
 c002b82:	2b00      	cmp	r3, #0
 c002b84:	d01f      	beq.n	c002bc6 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 c002b86:	687b      	ldr	r3, [r7, #4]
 c002b88:	689b      	ldr	r3, [r3, #8]
 c002b8a:	f003 0304 	and.w	r3, r3, #4
 c002b8e:	2b00      	cmp	r3, #0
 c002b90:	d010      	beq.n	c002bb4 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c002b92:	4b1e      	ldr	r3, [pc, #120]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c002b94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002b98:	4a1c      	ldr	r2, [pc, #112]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c002b9a:	f043 0304 	orr.w	r3, r3, #4
 c002b9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c002ba2:	4b1a      	ldr	r3, [pc, #104]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c002ba4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002ba8:	4a18      	ldr	r2, [pc, #96]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c002baa:	f043 0301 	orr.w	r3, r3, #1
 c002bae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 c002bb2:	e018      	b.n	c002be6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c002bb4:	4b15      	ldr	r3, [pc, #84]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c002bb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002bba:	4a14      	ldr	r2, [pc, #80]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c002bbc:	f043 0301 	orr.w	r3, r3, #1
 c002bc0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 c002bc4:	e00f      	b.n	c002be6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c002bc6:	4b11      	ldr	r3, [pc, #68]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c002bc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002bcc:	4a0f      	ldr	r2, [pc, #60]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c002bce:	f023 0301 	bic.w	r3, r3, #1
 c002bd2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c002bd6:	4b0d      	ldr	r3, [pc, #52]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c002bd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002bdc:	4a0b      	ldr	r2, [pc, #44]	@ (c002c0c <HAL_RCC_OscConfig+0x7b8>)
 c002bde:	f023 0304 	bic.w	r3, r3, #4
 c002be2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 c002be6:	687b      	ldr	r3, [r7, #4]
 c002be8:	689b      	ldr	r3, [r3, #8]
 c002bea:	2b00      	cmp	r3, #0
 c002bec:	d057      	beq.n	c002c9e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 c002bee:	f7fe fcf7 	bl	c0015e0 <HAL_GetTick>
 c002bf2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c002bf4:	e00e      	b.n	c002c14 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c002bf6:	f7fe fcf3 	bl	c0015e0 <HAL_GetTick>
 c002bfa:	4602      	mov	r2, r0
 c002bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002bfe:	1ad3      	subs	r3, r2, r3
 c002c00:	f241 3288 	movw	r2, #5000	@ 0x1388
 c002c04:	4293      	cmp	r3, r2
 c002c06:	d905      	bls.n	c002c14 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 c002c08:	2303      	movs	r3, #3
 c002c0a:	e2f8      	b.n	c0031fe <HAL_RCC_OscConfig+0xdaa>
 c002c0c:	56020c00 	.word	0x56020c00
 c002c10:	56020800 	.word	0x56020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c002c14:	4b9c      	ldr	r3, [pc, #624]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002c16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002c1a:	f003 0302 	and.w	r3, r3, #2
 c002c1e:	2b00      	cmp	r3, #0
 c002c20:	d0e9      	beq.n	c002bf6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 c002c22:	687b      	ldr	r3, [r7, #4]
 c002c24:	689b      	ldr	r3, [r3, #8]
 c002c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 c002c2a:	2b00      	cmp	r3, #0
 c002c2c:	d01b      	beq.n	c002c66 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c002c2e:	4b96      	ldr	r3, [pc, #600]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002c30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002c34:	4a94      	ldr	r2, [pc, #592]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002c36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 c002c3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c002c3e:	e00a      	b.n	c002c56 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c002c40:	f7fe fcce 	bl	c0015e0 <HAL_GetTick>
 c002c44:	4602      	mov	r2, r0
 c002c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002c48:	1ad3      	subs	r3, r2, r3
 c002c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 c002c4e:	4293      	cmp	r3, r2
 c002c50:	d901      	bls.n	c002c56 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 c002c52:	2303      	movs	r3, #3
 c002c54:	e2d3      	b.n	c0031fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c002c56:	4b8c      	ldr	r3, [pc, #560]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002c58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002c5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 c002c60:	2b00      	cmp	r3, #0
 c002c62:	d0ed      	beq.n	c002c40 <HAL_RCC_OscConfig+0x7ec>
 c002c64:	e053      	b.n	c002d0e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c002c66:	4b88      	ldr	r3, [pc, #544]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002c68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002c6c:	4a86      	ldr	r2, [pc, #536]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002c6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 c002c72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c002c76:	e00a      	b.n	c002c8e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c002c78:	f7fe fcb2 	bl	c0015e0 <HAL_GetTick>
 c002c7c:	4602      	mov	r2, r0
 c002c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002c80:	1ad3      	subs	r3, r2, r3
 c002c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 c002c86:	4293      	cmp	r3, r2
 c002c88:	d901      	bls.n	c002c8e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 c002c8a:	2303      	movs	r3, #3
 c002c8c:	e2b7      	b.n	c0031fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c002c8e:	4b7e      	ldr	r3, [pc, #504]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002c90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002c94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 c002c98:	2b00      	cmp	r3, #0
 c002c9a:	d1ed      	bne.n	c002c78 <HAL_RCC_OscConfig+0x824>
 c002c9c:	e037      	b.n	c002d0e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 c002c9e:	f7fe fc9f 	bl	c0015e0 <HAL_GetTick>
 c002ca2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c002ca4:	e00a      	b.n	c002cbc <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c002ca6:	f7fe fc9b 	bl	c0015e0 <HAL_GetTick>
 c002caa:	4602      	mov	r2, r0
 c002cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002cae:	1ad3      	subs	r3, r2, r3
 c002cb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 c002cb4:	4293      	cmp	r3, r2
 c002cb6:	d901      	bls.n	c002cbc <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 c002cb8:	2303      	movs	r3, #3
 c002cba:	e2a0      	b.n	c0031fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c002cbc:	4b72      	ldr	r3, [pc, #456]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002cbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002cc2:	f003 0302 	and.w	r3, r3, #2
 c002cc6:	2b00      	cmp	r3, #0
 c002cc8:	d1ed      	bne.n	c002ca6 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 c002cca:	4b6f      	ldr	r3, [pc, #444]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002ccc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 c002cd4:	2b00      	cmp	r3, #0
 c002cd6:	d01a      	beq.n	c002d0e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c002cd8:	4b6b      	ldr	r3, [pc, #428]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002cda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002cde:	4a6a      	ldr	r2, [pc, #424]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002ce0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 c002ce4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c002ce8:	e00a      	b.n	c002d00 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c002cea:	f7fe fc79 	bl	c0015e0 <HAL_GetTick>
 c002cee:	4602      	mov	r2, r0
 c002cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002cf2:	1ad3      	subs	r3, r2, r3
 c002cf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 c002cf8:	4293      	cmp	r3, r2
 c002cfa:	d901      	bls.n	c002d00 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 c002cfc:	2303      	movs	r3, #3
 c002cfe:	e27e      	b.n	c0031fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c002d00:	4b61      	ldr	r3, [pc, #388]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002d02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c002d06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 c002d0a:	2b00      	cmp	r3, #0
 c002d0c:	d1ed      	bne.n	c002cea <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c002d0e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 c002d12:	2b01      	cmp	r3, #1
 c002d14:	d107      	bne.n	c002d26 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c002d16:	4b5c      	ldr	r3, [pc, #368]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c002d1c:	4a5a      	ldr	r2, [pc, #360]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002d1e:	f023 0304 	bic.w	r3, r3, #4
 c002d22:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 c002d26:	687b      	ldr	r3, [r7, #4]
 c002d28:	681b      	ldr	r3, [r3, #0]
 c002d2a:	f003 0320 	and.w	r3, r3, #32
 c002d2e:	2b00      	cmp	r3, #0
 c002d30:	d036      	beq.n	c002da0 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 c002d32:	687b      	ldr	r3, [r7, #4]
 c002d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c002d36:	2b00      	cmp	r3, #0
 c002d38:	d019      	beq.n	c002d6e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 c002d3a:	4b53      	ldr	r3, [pc, #332]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002d3c:	681b      	ldr	r3, [r3, #0]
 c002d3e:	4a52      	ldr	r2, [pc, #328]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002d40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 c002d44:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 c002d46:	f7fe fc4b 	bl	c0015e0 <HAL_GetTick>
 c002d4a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 c002d4c:	e008      	b.n	c002d60 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c002d4e:	f7fe fc47 	bl	c0015e0 <HAL_GetTick>
 c002d52:	4602      	mov	r2, r0
 c002d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002d56:	1ad3      	subs	r3, r2, r3
 c002d58:	2b02      	cmp	r3, #2
 c002d5a:	d901      	bls.n	c002d60 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 c002d5c:	2303      	movs	r3, #3
 c002d5e:	e24e      	b.n	c0031fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 c002d60:	4b49      	ldr	r3, [pc, #292]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002d62:	681b      	ldr	r3, [r3, #0]
 c002d64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 c002d68:	2b00      	cmp	r3, #0
 c002d6a:	d0f0      	beq.n	c002d4e <HAL_RCC_OscConfig+0x8fa>
 c002d6c:	e018      	b.n	c002da0 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 c002d6e:	4b46      	ldr	r3, [pc, #280]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002d70:	681b      	ldr	r3, [r3, #0]
 c002d72:	4a45      	ldr	r2, [pc, #276]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002d74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 c002d78:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 c002d7a:	f7fe fc31 	bl	c0015e0 <HAL_GetTick>
 c002d7e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 c002d80:	e008      	b.n	c002d94 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c002d82:	f7fe fc2d 	bl	c0015e0 <HAL_GetTick>
 c002d86:	4602      	mov	r2, r0
 c002d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002d8a:	1ad3      	subs	r3, r2, r3
 c002d8c:	2b02      	cmp	r3, #2
 c002d8e:	d901      	bls.n	c002d94 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 c002d90:	2303      	movs	r3, #3
 c002d92:	e234      	b.n	c0031fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 c002d94:	4b3c      	ldr	r3, [pc, #240]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002d96:	681b      	ldr	r3, [r3, #0]
 c002d98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 c002d9c:	2b00      	cmp	r3, #0
 c002d9e:	d1f0      	bne.n	c002d82 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 c002da0:	687b      	ldr	r3, [r7, #4]
 c002da2:	681b      	ldr	r3, [r3, #0]
 c002da4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 c002da8:	2b00      	cmp	r3, #0
 c002daa:	d036      	beq.n	c002e1a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 c002dac:	687b      	ldr	r3, [r7, #4]
 c002dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c002db0:	2b00      	cmp	r3, #0
 c002db2:	d019      	beq.n	c002de8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 c002db4:	4b34      	ldr	r3, [pc, #208]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002db6:	681b      	ldr	r3, [r3, #0]
 c002db8:	4a33      	ldr	r2, [pc, #204]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002dba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 c002dbe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 c002dc0:	f7fe fc0e 	bl	c0015e0 <HAL_GetTick>
 c002dc4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 c002dc6:	e008      	b.n	c002dda <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 c002dc8:	f7fe fc0a 	bl	c0015e0 <HAL_GetTick>
 c002dcc:	4602      	mov	r2, r0
 c002dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002dd0:	1ad3      	subs	r3, r2, r3
 c002dd2:	2b02      	cmp	r3, #2
 c002dd4:	d901      	bls.n	c002dda <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 c002dd6:	2303      	movs	r3, #3
 c002dd8:	e211      	b.n	c0031fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 c002dda:	4b2b      	ldr	r3, [pc, #172]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002ddc:	681b      	ldr	r3, [r3, #0]
 c002dde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 c002de2:	2b00      	cmp	r3, #0
 c002de4:	d0f0      	beq.n	c002dc8 <HAL_RCC_OscConfig+0x974>
 c002de6:	e018      	b.n	c002e1a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 c002de8:	4b27      	ldr	r3, [pc, #156]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002dea:	681b      	ldr	r3, [r3, #0]
 c002dec:	4a26      	ldr	r2, [pc, #152]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002dee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 c002df2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 c002df4:	f7fe fbf4 	bl	c0015e0 <HAL_GetTick>
 c002df8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 c002dfa:	e008      	b.n	c002e0e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 c002dfc:	f7fe fbf0 	bl	c0015e0 <HAL_GetTick>
 c002e00:	4602      	mov	r2, r0
 c002e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002e04:	1ad3      	subs	r3, r2, r3
 c002e06:	2b02      	cmp	r3, #2
 c002e08:	d901      	bls.n	c002e0e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 c002e0a:	2303      	movs	r3, #3
 c002e0c:	e1f7      	b.n	c0031fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 c002e0e:	4b1e      	ldr	r3, [pc, #120]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002e10:	681b      	ldr	r3, [r3, #0]
 c002e12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 c002e16:	2b00      	cmp	r3, #0
 c002e18:	d1f0      	bne.n	c002dfc <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 c002e1a:	687b      	ldr	r3, [r7, #4]
 c002e1c:	681b      	ldr	r3, [r3, #0]
 c002e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 c002e22:	2b00      	cmp	r3, #0
 c002e24:	d07f      	beq.n	c002f26 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 c002e26:	687b      	ldr	r3, [r7, #4]
 c002e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c002e2a:	2b00      	cmp	r3, #0
 c002e2c:	d062      	beq.n	c002ef4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 c002e2e:	4b16      	ldr	r3, [pc, #88]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002e30:	689b      	ldr	r3, [r3, #8]
 c002e32:	4a15      	ldr	r2, [pc, #84]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002e34:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 c002e38:	6093      	str	r3, [r2, #8]
 c002e3a:	4b13      	ldr	r3, [pc, #76]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002e3c:	689b      	ldr	r3, [r3, #8]
 c002e3e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 c002e42:	687b      	ldr	r3, [r7, #4]
 c002e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c002e46:	4910      	ldr	r1, [pc, #64]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002e48:	4313      	orrs	r3, r2
 c002e4a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 c002e4c:	687b      	ldr	r3, [r7, #4]
 c002e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c002e50:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 c002e54:	d309      	bcc.n	c002e6a <HAL_RCC_OscConfig+0xa16>
 c002e56:	4b0c      	ldr	r3, [pc, #48]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002e58:	68db      	ldr	r3, [r3, #12]
 c002e5a:	f023 021f 	bic.w	r2, r3, #31
 c002e5e:	687b      	ldr	r3, [r7, #4]
 c002e60:	6a1b      	ldr	r3, [r3, #32]
 c002e62:	4909      	ldr	r1, [pc, #36]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002e64:	4313      	orrs	r3, r2
 c002e66:	60cb      	str	r3, [r1, #12]
 c002e68:	e02a      	b.n	c002ec0 <HAL_RCC_OscConfig+0xa6c>
 c002e6a:	687b      	ldr	r3, [r7, #4]
 c002e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c002e6e:	2b00      	cmp	r3, #0
 c002e70:	da0c      	bge.n	c002e8c <HAL_RCC_OscConfig+0xa38>
 c002e72:	4b05      	ldr	r3, [pc, #20]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002e74:	68db      	ldr	r3, [r3, #12]
 c002e76:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 c002e7a:	687b      	ldr	r3, [r7, #4]
 c002e7c:	6a1b      	ldr	r3, [r3, #32]
 c002e7e:	015b      	lsls	r3, r3, #5
 c002e80:	4901      	ldr	r1, [pc, #4]	@ (c002e88 <HAL_RCC_OscConfig+0xa34>)
 c002e82:	4313      	orrs	r3, r2
 c002e84:	60cb      	str	r3, [r1, #12]
 c002e86:	e01b      	b.n	c002ec0 <HAL_RCC_OscConfig+0xa6c>
 c002e88:	56020c00 	.word	0x56020c00
 c002e8c:	687b      	ldr	r3, [r7, #4]
 c002e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c002e90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 c002e94:	d30a      	bcc.n	c002eac <HAL_RCC_OscConfig+0xa58>
 c002e96:	4ba1      	ldr	r3, [pc, #644]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c002e98:	68db      	ldr	r3, [r3, #12]
 c002e9a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 c002e9e:	687b      	ldr	r3, [r7, #4]
 c002ea0:	6a1b      	ldr	r3, [r3, #32]
 c002ea2:	029b      	lsls	r3, r3, #10
 c002ea4:	499d      	ldr	r1, [pc, #628]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c002ea6:	4313      	orrs	r3, r2
 c002ea8:	60cb      	str	r3, [r1, #12]
 c002eaa:	e009      	b.n	c002ec0 <HAL_RCC_OscConfig+0xa6c>
 c002eac:	4b9b      	ldr	r3, [pc, #620]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c002eae:	68db      	ldr	r3, [r3, #12]
 c002eb0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 c002eb4:	687b      	ldr	r3, [r7, #4]
 c002eb6:	6a1b      	ldr	r3, [r3, #32]
 c002eb8:	03db      	lsls	r3, r3, #15
 c002eba:	4998      	ldr	r1, [pc, #608]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c002ebc:	4313      	orrs	r3, r2
 c002ebe:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 c002ec0:	4b96      	ldr	r3, [pc, #600]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c002ec2:	681b      	ldr	r3, [r3, #0]
 c002ec4:	4a95      	ldr	r2, [pc, #596]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c002ec6:	f043 0310 	orr.w	r3, r3, #16
 c002eca:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 c002ecc:	f7fe fb88 	bl	c0015e0 <HAL_GetTick>
 c002ed0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 c002ed2:	e008      	b.n	c002ee6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 c002ed4:	f7fe fb84 	bl	c0015e0 <HAL_GetTick>
 c002ed8:	4602      	mov	r2, r0
 c002eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002edc:	1ad3      	subs	r3, r2, r3
 c002ede:	2b02      	cmp	r3, #2
 c002ee0:	d901      	bls.n	c002ee6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 c002ee2:	2303      	movs	r3, #3
 c002ee4:	e18b      	b.n	c0031fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 c002ee6:	4b8d      	ldr	r3, [pc, #564]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c002ee8:	681b      	ldr	r3, [r3, #0]
 c002eea:	f003 0320 	and.w	r3, r3, #32
 c002eee:	2b00      	cmp	r3, #0
 c002ef0:	d0f0      	beq.n	c002ed4 <HAL_RCC_OscConfig+0xa80>
 c002ef2:	e018      	b.n	c002f26 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 c002ef4:	4b89      	ldr	r3, [pc, #548]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c002ef6:	681b      	ldr	r3, [r3, #0]
 c002ef8:	4a88      	ldr	r2, [pc, #544]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c002efa:	f023 0310 	bic.w	r3, r3, #16
 c002efe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 c002f00:	f7fe fb6e 	bl	c0015e0 <HAL_GetTick>
 c002f04:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 c002f06:	e008      	b.n	c002f1a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 c002f08:	f7fe fb6a 	bl	c0015e0 <HAL_GetTick>
 c002f0c:	4602      	mov	r2, r0
 c002f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002f10:	1ad3      	subs	r3, r2, r3
 c002f12:	2b02      	cmp	r3, #2
 c002f14:	d901      	bls.n	c002f1a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 c002f16:	2303      	movs	r3, #3
 c002f18:	e171      	b.n	c0031fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 c002f1a:	4b80      	ldr	r3, [pc, #512]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c002f1c:	681b      	ldr	r3, [r3, #0]
 c002f1e:	f003 0320 	and.w	r3, r3, #32
 c002f22:	2b00      	cmp	r3, #0
 c002f24:	d1f0      	bne.n	c002f08 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 c002f26:	687b      	ldr	r3, [r7, #4]
 c002f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c002f2a:	2b00      	cmp	r3, #0
 c002f2c:	f000 8166 	beq.w	c0031fc <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 c002f30:	2300      	movs	r3, #0
 c002f32:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c002f36:	4b79      	ldr	r3, [pc, #484]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c002f38:	69db      	ldr	r3, [r3, #28]
 c002f3a:	f003 030c 	and.w	r3, r3, #12
 c002f3e:	2b0c      	cmp	r3, #12
 c002f40:	f000 80f2 	beq.w	c003128 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 c002f44:	687b      	ldr	r3, [r7, #4]
 c002f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c002f48:	2b02      	cmp	r3, #2
 c002f4a:	f040 80c5 	bne.w	c0030d8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 c002f4e:	4b73      	ldr	r3, [pc, #460]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c002f50:	681b      	ldr	r3, [r3, #0]
 c002f52:	4a72      	ldr	r2, [pc, #456]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c002f54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 c002f58:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 c002f5a:	f7fe fb41 	bl	c0015e0 <HAL_GetTick>
 c002f5e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c002f60:	e008      	b.n	c002f74 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c002f62:	f7fe fb3d 	bl	c0015e0 <HAL_GetTick>
 c002f66:	4602      	mov	r2, r0
 c002f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c002f6a:	1ad3      	subs	r3, r2, r3
 c002f6c:	2b02      	cmp	r3, #2
 c002f6e:	d901      	bls.n	c002f74 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 c002f70:	2303      	movs	r3, #3
 c002f72:	e144      	b.n	c0031fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c002f74:	4b69      	ldr	r3, [pc, #420]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c002f76:	681b      	ldr	r3, [r3, #0]
 c002f78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 c002f7c:	2b00      	cmp	r3, #0
 c002f7e:	d1f0      	bne.n	c002f62 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c002f80:	4b66      	ldr	r3, [pc, #408]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c002f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c002f86:	f003 0304 	and.w	r3, r3, #4
 c002f8a:	2b00      	cmp	r3, #0
 c002f8c:	d111      	bne.n	c002fb2 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 c002f8e:	4b63      	ldr	r3, [pc, #396]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c002f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c002f94:	4a61      	ldr	r2, [pc, #388]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c002f96:	f043 0304 	orr.w	r3, r3, #4
 c002f9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c002f9e:	4b5f      	ldr	r3, [pc, #380]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c002fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c002fa4:	f003 0304 	and.w	r3, r3, #4
 c002fa8:	60fb      	str	r3, [r7, #12]
 c002faa:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 c002fac:	2301      	movs	r3, #1
 c002fae:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 c002fb2:	4b5b      	ldr	r3, [pc, #364]	@ (c003120 <HAL_RCC_OscConfig+0xccc>)
 c002fb4:	68db      	ldr	r3, [r3, #12]
 c002fb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 c002fba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 c002fbe:	d102      	bne.n	c002fc6 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 c002fc0:	2301      	movs	r3, #1
 c002fc2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 c002fc6:	4b56      	ldr	r3, [pc, #344]	@ (c003120 <HAL_RCC_OscConfig+0xccc>)
 c002fc8:	68db      	ldr	r3, [r3, #12]
 c002fca:	4a55      	ldr	r2, [pc, #340]	@ (c003120 <HAL_RCC_OscConfig+0xccc>)
 c002fcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 c002fd0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 c002fd2:	4b52      	ldr	r3, [pc, #328]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c002fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c002fd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 c002fda:	f023 0303 	bic.w	r3, r3, #3
 c002fde:	687a      	ldr	r2, [r7, #4]
 c002fe0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 c002fe2:	687a      	ldr	r2, [r7, #4]
 c002fe4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 c002fe6:	3a01      	subs	r2, #1
 c002fe8:	0212      	lsls	r2, r2, #8
 c002fea:	4311      	orrs	r1, r2
 c002fec:	687a      	ldr	r2, [r7, #4]
 c002fee:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 c002ff0:	430a      	orrs	r2, r1
 c002ff2:	494a      	ldr	r1, [pc, #296]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c002ff4:	4313      	orrs	r3, r2
 c002ff6:	628b      	str	r3, [r1, #40]	@ 0x28
 c002ff8:	4b48      	ldr	r3, [pc, #288]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c002ffa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 c002ffc:	4b49      	ldr	r3, [pc, #292]	@ (c003124 <HAL_RCC_OscConfig+0xcd0>)
 c002ffe:	4013      	ands	r3, r2
 c003000:	687a      	ldr	r2, [r7, #4]
 c003002:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 c003004:	3a01      	subs	r2, #1
 c003006:	f3c2 0108 	ubfx	r1, r2, #0, #9
 c00300a:	687a      	ldr	r2, [r7, #4]
 c00300c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 c00300e:	3a01      	subs	r2, #1
 c003010:	0252      	lsls	r2, r2, #9
 c003012:	b292      	uxth	r2, r2
 c003014:	4311      	orrs	r1, r2
 c003016:	687a      	ldr	r2, [r7, #4]
 c003018:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 c00301a:	3a01      	subs	r2, #1
 c00301c:	0412      	lsls	r2, r2, #16
 c00301e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 c003022:	4311      	orrs	r1, r2
 c003024:	687a      	ldr	r2, [r7, #4]
 c003026:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 c003028:	3a01      	subs	r2, #1
 c00302a:	0612      	lsls	r2, r2, #24
 c00302c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 c003030:	430a      	orrs	r2, r1
 c003032:	493a      	ldr	r1, [pc, #232]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c003034:	4313      	orrs	r3, r2
 c003036:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 c003038:	4b38      	ldr	r3, [pc, #224]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c00303a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00303c:	4a37      	ldr	r2, [pc, #220]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c00303e:	f023 0310 	bic.w	r3, r3, #16
 c003042:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 c003044:	687b      	ldr	r3, [r7, #4]
 c003046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 c003048:	4a34      	ldr	r2, [pc, #208]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c00304a:	00db      	lsls	r3, r3, #3
 c00304c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 c00304e:	4b33      	ldr	r3, [pc, #204]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c003050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c003052:	4a32      	ldr	r2, [pc, #200]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c003054:	f043 0310 	orr.w	r3, r3, #16
 c003058:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 c00305a:	4b30      	ldr	r3, [pc, #192]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c00305c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00305e:	f023 020c 	bic.w	r2, r3, #12
 c003062:	687b      	ldr	r3, [r7, #4]
 c003064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c003066:	492d      	ldr	r1, [pc, #180]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c003068:	4313      	orrs	r3, r2
 c00306a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 c00306c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 c003070:	2b01      	cmp	r3, #1
 c003072:	d105      	bne.n	c003080 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 c003074:	4b2a      	ldr	r3, [pc, #168]	@ (c003120 <HAL_RCC_OscConfig+0xccc>)
 c003076:	68db      	ldr	r3, [r3, #12]
 c003078:	4a29      	ldr	r2, [pc, #164]	@ (c003120 <HAL_RCC_OscConfig+0xccc>)
 c00307a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 c00307e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 c003080:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 c003084:	2b01      	cmp	r3, #1
 c003086:	d107      	bne.n	c003098 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 c003088:	4b24      	ldr	r3, [pc, #144]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c00308a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00308e:	4a23      	ldr	r2, [pc, #140]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c003090:	f023 0304 	bic.w	r3, r3, #4
 c003094:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 c003098:	4b20      	ldr	r3, [pc, #128]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c00309a:	681b      	ldr	r3, [r3, #0]
 c00309c:	4a1f      	ldr	r2, [pc, #124]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c00309e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 c0030a2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 c0030a4:	f7fe fa9c 	bl	c0015e0 <HAL_GetTick>
 c0030a8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 c0030aa:	e008      	b.n	c0030be <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c0030ac:	f7fe fa98 	bl	c0015e0 <HAL_GetTick>
 c0030b0:	4602      	mov	r2, r0
 c0030b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c0030b4:	1ad3      	subs	r3, r2, r3
 c0030b6:	2b02      	cmp	r3, #2
 c0030b8:	d901      	bls.n	c0030be <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 c0030ba:	2303      	movs	r3, #3
 c0030bc:	e09f      	b.n	c0031fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 c0030be:	4b17      	ldr	r3, [pc, #92]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c0030c0:	681b      	ldr	r3, [r3, #0]
 c0030c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 c0030c6:	2b00      	cmp	r3, #0
 c0030c8:	d0f0      	beq.n	c0030ac <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 c0030ca:	4b14      	ldr	r3, [pc, #80]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c0030cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0030ce:	4a13      	ldr	r2, [pc, #76]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c0030d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 c0030d4:	6293      	str	r3, [r2, #40]	@ 0x28
 c0030d6:	e091      	b.n	c0031fc <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 c0030d8:	4b10      	ldr	r3, [pc, #64]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c0030da:	681b      	ldr	r3, [r3, #0]
 c0030dc:	4a0f      	ldr	r2, [pc, #60]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c0030de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 c0030e2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 c0030e4:	f7fe fa7c 	bl	c0015e0 <HAL_GetTick>
 c0030e8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c0030ea:	e008      	b.n	c0030fe <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c0030ec:	f7fe fa78 	bl	c0015e0 <HAL_GetTick>
 c0030f0:	4602      	mov	r2, r0
 c0030f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c0030f4:	1ad3      	subs	r3, r2, r3
 c0030f6:	2b02      	cmp	r3, #2
 c0030f8:	d901      	bls.n	c0030fe <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 c0030fa:	2303      	movs	r3, #3
 c0030fc:	e07f      	b.n	c0031fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 c0030fe:	4b07      	ldr	r3, [pc, #28]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c003100:	681b      	ldr	r3, [r3, #0]
 c003102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 c003106:	2b00      	cmp	r3, #0
 c003108:	d1f0      	bne.n	c0030ec <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 c00310a:	4b04      	ldr	r3, [pc, #16]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c00310c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00310e:	4a03      	ldr	r2, [pc, #12]	@ (c00311c <HAL_RCC_OscConfig+0xcc8>)
 c003110:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 c003114:	f023 0303 	bic.w	r3, r3, #3
 c003118:	6293      	str	r3, [r2, #40]	@ 0x28
 c00311a:	e06f      	b.n	c0031fc <HAL_RCC_OscConfig+0xda8>
 c00311c:	56020c00 	.word	0x56020c00
 c003120:	56020800 	.word	0x56020800
 c003124:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 c003128:	4b37      	ldr	r3, [pc, #220]	@ (c003208 <HAL_RCC_OscConfig+0xdb4>)
 c00312a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00312c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 c00312e:	4b36      	ldr	r3, [pc, #216]	@ (c003208 <HAL_RCC_OscConfig+0xdb4>)
 c003130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c003132:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 c003134:	687b      	ldr	r3, [r7, #4]
 c003136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c003138:	2b01      	cmp	r3, #1
 c00313a:	d039      	beq.n	c0031b0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 c00313c:	69fb      	ldr	r3, [r7, #28]
 c00313e:	f003 0203 	and.w	r2, r3, #3
 c003142:	687b      	ldr	r3, [r7, #4]
 c003144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 c003146:	429a      	cmp	r2, r3
 c003148:	d132      	bne.n	c0031b0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 c00314a:	69fb      	ldr	r3, [r7, #28]
 c00314c:	0a1b      	lsrs	r3, r3, #8
 c00314e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 c003152:	687b      	ldr	r3, [r7, #4]
 c003154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 c003156:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 c003158:	429a      	cmp	r2, r3
 c00315a:	d129      	bne.n	c0031b0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 c00315c:	69fb      	ldr	r3, [r7, #28]
 c00315e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 c003162:	687b      	ldr	r3, [r7, #4]
 c003164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 c003166:	429a      	cmp	r2, r3
 c003168:	d122      	bne.n	c0031b0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 c00316a:	69bb      	ldr	r3, [r7, #24]
 c00316c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 c003170:	687b      	ldr	r3, [r7, #4]
 c003172:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 c003174:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 c003176:	429a      	cmp	r2, r3
 c003178:	d11a      	bne.n	c0031b0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 c00317a:	69bb      	ldr	r3, [r7, #24]
 c00317c:	0a5b      	lsrs	r3, r3, #9
 c00317e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 c003182:	687b      	ldr	r3, [r7, #4]
 c003184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 c003186:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 c003188:	429a      	cmp	r2, r3
 c00318a:	d111      	bne.n	c0031b0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 c00318c:	69bb      	ldr	r3, [r7, #24]
 c00318e:	0c1b      	lsrs	r3, r3, #16
 c003190:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 c003194:	687b      	ldr	r3, [r7, #4]
 c003196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 c003198:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 c00319a:	429a      	cmp	r2, r3
 c00319c:	d108      	bne.n	c0031b0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 c00319e:	69bb      	ldr	r3, [r7, #24]
 c0031a0:	0e1b      	lsrs	r3, r3, #24
 c0031a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 c0031a6:	687b      	ldr	r3, [r7, #4]
 c0031a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 c0031aa:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 c0031ac:	429a      	cmp	r2, r3
 c0031ae:	d001      	beq.n	c0031b4 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 c0031b0:	2301      	movs	r3, #1
 c0031b2:	e024      	b.n	c0031fe <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 c0031b4:	4b14      	ldr	r3, [pc, #80]	@ (c003208 <HAL_RCC_OscConfig+0xdb4>)
 c0031b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c0031b8:	08db      	lsrs	r3, r3, #3
 c0031ba:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 c0031be:	687b      	ldr	r3, [r7, #4]
 c0031c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 c0031c2:	429a      	cmp	r2, r3
 c0031c4:	d01a      	beq.n	c0031fc <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 c0031c6:	4b10      	ldr	r3, [pc, #64]	@ (c003208 <HAL_RCC_OscConfig+0xdb4>)
 c0031c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0031ca:	4a0f      	ldr	r2, [pc, #60]	@ (c003208 <HAL_RCC_OscConfig+0xdb4>)
 c0031cc:	f023 0310 	bic.w	r3, r3, #16
 c0031d0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0031d2:	f7fe fa05 	bl	c0015e0 <HAL_GetTick>
 c0031d6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 c0031d8:	bf00      	nop
 c0031da:	f7fe fa01 	bl	c0015e0 <HAL_GetTick>
 c0031de:	4602      	mov	r2, r0
 c0031e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c0031e2:	4293      	cmp	r3, r2
 c0031e4:	d0f9      	beq.n	c0031da <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 c0031e6:	687b      	ldr	r3, [r7, #4]
 c0031e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 c0031ea:	4a07      	ldr	r2, [pc, #28]	@ (c003208 <HAL_RCC_OscConfig+0xdb4>)
 c0031ec:	00db      	lsls	r3, r3, #3
 c0031ee:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 c0031f0:	4b05      	ldr	r3, [pc, #20]	@ (c003208 <HAL_RCC_OscConfig+0xdb4>)
 c0031f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0031f4:	4a04      	ldr	r2, [pc, #16]	@ (c003208 <HAL_RCC_OscConfig+0xdb4>)
 c0031f6:	f043 0310 	orr.w	r3, r3, #16
 c0031fa:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 c0031fc:	2300      	movs	r3, #0
}
 c0031fe:	4618      	mov	r0, r3
 c003200:	3738      	adds	r7, #56	@ 0x38
 c003202:	46bd      	mov	sp, r7
 c003204:	bd80      	pop	{r7, pc}
 c003206:	bf00      	nop
 c003208:	56020c00 	.word	0x56020c00

0c00320c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 c00320c:	b580      	push	{r7, lr}
 c00320e:	b086      	sub	sp, #24
 c003210:	af00      	add	r7, sp, #0
 c003212:	6078      	str	r0, [r7, #4]
 c003214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 c003216:	687b      	ldr	r3, [r7, #4]
 c003218:	2b00      	cmp	r3, #0
 c00321a:	d101      	bne.n	c003220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 c00321c:	2301      	movs	r3, #1
 c00321e:	e1d9      	b.n	c0035d4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 c003220:	4b9b      	ldr	r3, [pc, #620]	@ (c003490 <HAL_RCC_ClockConfig+0x284>)
 c003222:	681b      	ldr	r3, [r3, #0]
 c003224:	f003 030f 	and.w	r3, r3, #15
 c003228:	683a      	ldr	r2, [r7, #0]
 c00322a:	429a      	cmp	r2, r3
 c00322c:	d910      	bls.n	c003250 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c00322e:	4b98      	ldr	r3, [pc, #608]	@ (c003490 <HAL_RCC_ClockConfig+0x284>)
 c003230:	681b      	ldr	r3, [r3, #0]
 c003232:	f023 020f 	bic.w	r2, r3, #15
 c003236:	4996      	ldr	r1, [pc, #600]	@ (c003490 <HAL_RCC_ClockConfig+0x284>)
 c003238:	683b      	ldr	r3, [r7, #0]
 c00323a:	4313      	orrs	r3, r2
 c00323c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c00323e:	4b94      	ldr	r3, [pc, #592]	@ (c003490 <HAL_RCC_ClockConfig+0x284>)
 c003240:	681b      	ldr	r3, [r3, #0]
 c003242:	f003 030f 	and.w	r3, r3, #15
 c003246:	683a      	ldr	r2, [r7, #0]
 c003248:	429a      	cmp	r2, r3
 c00324a:	d001      	beq.n	c003250 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 c00324c:	2301      	movs	r3, #1
 c00324e:	e1c1      	b.n	c0035d4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 c003250:	687b      	ldr	r3, [r7, #4]
 c003252:	681b      	ldr	r3, [r3, #0]
 c003254:	f003 0310 	and.w	r3, r3, #16
 c003258:	2b00      	cmp	r3, #0
 c00325a:	d010      	beq.n	c00327e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 c00325c:	687b      	ldr	r3, [r7, #4]
 c00325e:	695a      	ldr	r2, [r3, #20]
 c003260:	4b8c      	ldr	r3, [pc, #560]	@ (c003494 <HAL_RCC_ClockConfig+0x288>)
 c003262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c003264:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 c003268:	429a      	cmp	r2, r3
 c00326a:	d908      	bls.n	c00327e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 c00326c:	4b89      	ldr	r3, [pc, #548]	@ (c003494 <HAL_RCC_ClockConfig+0x288>)
 c00326e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c003270:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 c003274:	687b      	ldr	r3, [r7, #4]
 c003276:	695b      	ldr	r3, [r3, #20]
 c003278:	4986      	ldr	r1, [pc, #536]	@ (c003494 <HAL_RCC_ClockConfig+0x288>)
 c00327a:	4313      	orrs	r3, r2
 c00327c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c00327e:	687b      	ldr	r3, [r7, #4]
 c003280:	681b      	ldr	r3, [r3, #0]
 c003282:	f003 0308 	and.w	r3, r3, #8
 c003286:	2b00      	cmp	r3, #0
 c003288:	d012      	beq.n	c0032b0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 c00328a:	687b      	ldr	r3, [r7, #4]
 c00328c:	691a      	ldr	r2, [r3, #16]
 c00328e:	4b81      	ldr	r3, [pc, #516]	@ (c003494 <HAL_RCC_ClockConfig+0x288>)
 c003290:	6a1b      	ldr	r3, [r3, #32]
 c003292:	091b      	lsrs	r3, r3, #4
 c003294:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 c003298:	429a      	cmp	r2, r3
 c00329a:	d909      	bls.n	c0032b0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 c00329c:	4b7d      	ldr	r3, [pc, #500]	@ (c003494 <HAL_RCC_ClockConfig+0x288>)
 c00329e:	6a1b      	ldr	r3, [r3, #32]
 c0032a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 c0032a4:	687b      	ldr	r3, [r7, #4]
 c0032a6:	691b      	ldr	r3, [r3, #16]
 c0032a8:	011b      	lsls	r3, r3, #4
 c0032aa:	497a      	ldr	r1, [pc, #488]	@ (c003494 <HAL_RCC_ClockConfig+0x288>)
 c0032ac:	4313      	orrs	r3, r2
 c0032ae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c0032b0:	687b      	ldr	r3, [r7, #4]
 c0032b2:	681b      	ldr	r3, [r3, #0]
 c0032b4:	f003 0304 	and.w	r3, r3, #4
 c0032b8:	2b00      	cmp	r3, #0
 c0032ba:	d010      	beq.n	c0032de <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 c0032bc:	687b      	ldr	r3, [r7, #4]
 c0032be:	68da      	ldr	r2, [r3, #12]
 c0032c0:	4b74      	ldr	r3, [pc, #464]	@ (c003494 <HAL_RCC_ClockConfig+0x288>)
 c0032c2:	6a1b      	ldr	r3, [r3, #32]
 c0032c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 c0032c8:	429a      	cmp	r2, r3
 c0032ca:	d908      	bls.n	c0032de <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 c0032cc:	4b71      	ldr	r3, [pc, #452]	@ (c003494 <HAL_RCC_ClockConfig+0x288>)
 c0032ce:	6a1b      	ldr	r3, [r3, #32]
 c0032d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 c0032d4:	687b      	ldr	r3, [r7, #4]
 c0032d6:	68db      	ldr	r3, [r3, #12]
 c0032d8:	496e      	ldr	r1, [pc, #440]	@ (c003494 <HAL_RCC_ClockConfig+0x288>)
 c0032da:	4313      	orrs	r3, r2
 c0032dc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c0032de:	687b      	ldr	r3, [r7, #4]
 c0032e0:	681b      	ldr	r3, [r3, #0]
 c0032e2:	f003 0302 	and.w	r3, r3, #2
 c0032e6:	2b00      	cmp	r3, #0
 c0032e8:	d010      	beq.n	c00330c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 c0032ea:	687b      	ldr	r3, [r7, #4]
 c0032ec:	689a      	ldr	r2, [r3, #8]
 c0032ee:	4b69      	ldr	r3, [pc, #420]	@ (c003494 <HAL_RCC_ClockConfig+0x288>)
 c0032f0:	6a1b      	ldr	r3, [r3, #32]
 c0032f2:	f003 030f 	and.w	r3, r3, #15
 c0032f6:	429a      	cmp	r2, r3
 c0032f8:	d908      	bls.n	c00330c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 c0032fa:	4b66      	ldr	r3, [pc, #408]	@ (c003494 <HAL_RCC_ClockConfig+0x288>)
 c0032fc:	6a1b      	ldr	r3, [r3, #32]
 c0032fe:	f023 020f 	bic.w	r2, r3, #15
 c003302:	687b      	ldr	r3, [r7, #4]
 c003304:	689b      	ldr	r3, [r3, #8]
 c003306:	4963      	ldr	r1, [pc, #396]	@ (c003494 <HAL_RCC_ClockConfig+0x288>)
 c003308:	4313      	orrs	r3, r2
 c00330a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 c00330c:	687b      	ldr	r3, [r7, #4]
 c00330e:	681b      	ldr	r3, [r3, #0]
 c003310:	f003 0301 	and.w	r3, r3, #1
 c003314:	2b00      	cmp	r3, #0
 c003316:	f000 80d2 	beq.w	c0034be <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 c00331a:	2300      	movs	r3, #0
 c00331c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c00331e:	687b      	ldr	r3, [r7, #4]
 c003320:	685b      	ldr	r3, [r3, #4]
 c003322:	2b03      	cmp	r3, #3
 c003324:	d143      	bne.n	c0033ae <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c003326:	4b5b      	ldr	r3, [pc, #364]	@ (c003494 <HAL_RCC_ClockConfig+0x288>)
 c003328:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00332c:	f003 0304 	and.w	r3, r3, #4
 c003330:	2b00      	cmp	r3, #0
 c003332:	d110      	bne.n	c003356 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 c003334:	4b57      	ldr	r3, [pc, #348]	@ (c003494 <HAL_RCC_ClockConfig+0x288>)
 c003336:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00333a:	4a56      	ldr	r2, [pc, #344]	@ (c003494 <HAL_RCC_ClockConfig+0x288>)
 c00333c:	f043 0304 	orr.w	r3, r3, #4
 c003340:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c003344:	4b53      	ldr	r3, [pc, #332]	@ (c003494 <HAL_RCC_ClockConfig+0x288>)
 c003346:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00334a:	f003 0304 	and.w	r3, r3, #4
 c00334e:	60bb      	str	r3, [r7, #8]
 c003350:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 c003352:	2301      	movs	r3, #1
 c003354:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 c003356:	f7fe f943 	bl	c0015e0 <HAL_GetTick>
 c00335a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 c00335c:	4b4e      	ldr	r3, [pc, #312]	@ (c003498 <HAL_RCC_ClockConfig+0x28c>)
 c00335e:	68db      	ldr	r3, [r3, #12]
 c003360:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 c003364:	2b00      	cmp	r3, #0
 c003366:	d00f      	beq.n	c003388 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 c003368:	e008      	b.n	c00337c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 c00336a:	f7fe f939 	bl	c0015e0 <HAL_GetTick>
 c00336e:	4602      	mov	r2, r0
 c003370:	693b      	ldr	r3, [r7, #16]
 c003372:	1ad3      	subs	r3, r2, r3
 c003374:	2b02      	cmp	r3, #2
 c003376:	d901      	bls.n	c00337c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 c003378:	2303      	movs	r3, #3
 c00337a:	e12b      	b.n	c0035d4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 c00337c:	4b46      	ldr	r3, [pc, #280]	@ (c003498 <HAL_RCC_ClockConfig+0x28c>)
 c00337e:	68db      	ldr	r3, [r3, #12]
 c003380:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 c003384:	2b00      	cmp	r3, #0
 c003386:	d0f0      	beq.n	c00336a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 c003388:	7dfb      	ldrb	r3, [r7, #23]
 c00338a:	2b01      	cmp	r3, #1
 c00338c:	d107      	bne.n	c00339e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 c00338e:	4b41      	ldr	r3, [pc, #260]	@ (c003494 <HAL_RCC_ClockConfig+0x288>)
 c003390:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c003394:	4a3f      	ldr	r2, [pc, #252]	@ (c003494 <HAL_RCC_ClockConfig+0x288>)
 c003396:	f023 0304 	bic.w	r3, r3, #4
 c00339a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 c00339e:	4b3d      	ldr	r3, [pc, #244]	@ (c003494 <HAL_RCC_ClockConfig+0x288>)
 c0033a0:	681b      	ldr	r3, [r3, #0]
 c0033a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 c0033a6:	2b00      	cmp	r3, #0
 c0033a8:	d121      	bne.n	c0033ee <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 c0033aa:	2301      	movs	r3, #1
 c0033ac:	e112      	b.n	c0035d4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c0033ae:	687b      	ldr	r3, [r7, #4]
 c0033b0:	685b      	ldr	r3, [r3, #4]
 c0033b2:	2b02      	cmp	r3, #2
 c0033b4:	d107      	bne.n	c0033c6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c0033b6:	4b37      	ldr	r3, [pc, #220]	@ (c003494 <HAL_RCC_ClockConfig+0x288>)
 c0033b8:	681b      	ldr	r3, [r3, #0]
 c0033ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c0033be:	2b00      	cmp	r3, #0
 c0033c0:	d115      	bne.n	c0033ee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 c0033c2:	2301      	movs	r3, #1
 c0033c4:	e106      	b.n	c0035d4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 c0033c6:	687b      	ldr	r3, [r7, #4]
 c0033c8:	685b      	ldr	r3, [r3, #4]
 c0033ca:	2b00      	cmp	r3, #0
 c0033cc:	d107      	bne.n	c0033de <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 c0033ce:	4b31      	ldr	r3, [pc, #196]	@ (c003494 <HAL_RCC_ClockConfig+0x288>)
 c0033d0:	681b      	ldr	r3, [r3, #0]
 c0033d2:	f003 0304 	and.w	r3, r3, #4
 c0033d6:	2b00      	cmp	r3, #0
 c0033d8:	d109      	bne.n	c0033ee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 c0033da:	2301      	movs	r3, #1
 c0033dc:	e0fa      	b.n	c0035d4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c0033de:	4b2d      	ldr	r3, [pc, #180]	@ (c003494 <HAL_RCC_ClockConfig+0x288>)
 c0033e0:	681b      	ldr	r3, [r3, #0]
 c0033e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c0033e6:	2b00      	cmp	r3, #0
 c0033e8:	d101      	bne.n	c0033ee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 c0033ea:	2301      	movs	r3, #1
 c0033ec:	e0f2      	b.n	c0035d4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 c0033ee:	4b29      	ldr	r3, [pc, #164]	@ (c003494 <HAL_RCC_ClockConfig+0x288>)
 c0033f0:	69db      	ldr	r3, [r3, #28]
 c0033f2:	f023 0203 	bic.w	r2, r3, #3
 c0033f6:	687b      	ldr	r3, [r7, #4]
 c0033f8:	685b      	ldr	r3, [r3, #4]
 c0033fa:	4926      	ldr	r1, [pc, #152]	@ (c003494 <HAL_RCC_ClockConfig+0x288>)
 c0033fc:	4313      	orrs	r3, r2
 c0033fe:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 c003400:	f7fe f8ee 	bl	c0015e0 <HAL_GetTick>
 c003404:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c003406:	687b      	ldr	r3, [r7, #4]
 c003408:	685b      	ldr	r3, [r3, #4]
 c00340a:	2b03      	cmp	r3, #3
 c00340c:	d112      	bne.n	c003434 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c00340e:	e00a      	b.n	c003426 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c003410:	f7fe f8e6 	bl	c0015e0 <HAL_GetTick>
 c003414:	4602      	mov	r2, r0
 c003416:	693b      	ldr	r3, [r7, #16]
 c003418:	1ad3      	subs	r3, r2, r3
 c00341a:	f241 3288 	movw	r2, #5000	@ 0x1388
 c00341e:	4293      	cmp	r3, r2
 c003420:	d901      	bls.n	c003426 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 c003422:	2303      	movs	r3, #3
 c003424:	e0d6      	b.n	c0035d4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c003426:	4b1b      	ldr	r3, [pc, #108]	@ (c003494 <HAL_RCC_ClockConfig+0x288>)
 c003428:	69db      	ldr	r3, [r3, #28]
 c00342a:	f003 030c 	and.w	r3, r3, #12
 c00342e:	2b0c      	cmp	r3, #12
 c003430:	d1ee      	bne.n	c003410 <HAL_RCC_ClockConfig+0x204>
 c003432:	e044      	b.n	c0034be <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c003434:	687b      	ldr	r3, [r7, #4]
 c003436:	685b      	ldr	r3, [r3, #4]
 c003438:	2b02      	cmp	r3, #2
 c00343a:	d112      	bne.n	c003462 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 c00343c:	e00a      	b.n	c003454 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c00343e:	f7fe f8cf 	bl	c0015e0 <HAL_GetTick>
 c003442:	4602      	mov	r2, r0
 c003444:	693b      	ldr	r3, [r7, #16]
 c003446:	1ad3      	subs	r3, r2, r3
 c003448:	f241 3288 	movw	r2, #5000	@ 0x1388
 c00344c:	4293      	cmp	r3, r2
 c00344e:	d901      	bls.n	c003454 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 c003450:	2303      	movs	r3, #3
 c003452:	e0bf      	b.n	c0035d4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 c003454:	4b0f      	ldr	r3, [pc, #60]	@ (c003494 <HAL_RCC_ClockConfig+0x288>)
 c003456:	69db      	ldr	r3, [r3, #28]
 c003458:	f003 030c 	and.w	r3, r3, #12
 c00345c:	2b08      	cmp	r3, #8
 c00345e:	d1ee      	bne.n	c00343e <HAL_RCC_ClockConfig+0x232>
 c003460:	e02d      	b.n	c0034be <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 c003462:	687b      	ldr	r3, [r7, #4]
 c003464:	685b      	ldr	r3, [r3, #4]
 c003466:	2b00      	cmp	r3, #0
 c003468:	d123      	bne.n	c0034b2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 c00346a:	e00a      	b.n	c003482 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c00346c:	f7fe f8b8 	bl	c0015e0 <HAL_GetTick>
 c003470:	4602      	mov	r2, r0
 c003472:	693b      	ldr	r3, [r7, #16]
 c003474:	1ad3      	subs	r3, r2, r3
 c003476:	f241 3288 	movw	r2, #5000	@ 0x1388
 c00347a:	4293      	cmp	r3, r2
 c00347c:	d901      	bls.n	c003482 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 c00347e:	2303      	movs	r3, #3
 c003480:	e0a8      	b.n	c0035d4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 c003482:	4b04      	ldr	r3, [pc, #16]	@ (c003494 <HAL_RCC_ClockConfig+0x288>)
 c003484:	69db      	ldr	r3, [r3, #28]
 c003486:	f003 030c 	and.w	r3, r3, #12
 c00348a:	2b00      	cmp	r3, #0
 c00348c:	d1ee      	bne.n	c00346c <HAL_RCC_ClockConfig+0x260>
 c00348e:	e016      	b.n	c0034be <HAL_RCC_ClockConfig+0x2b2>
 c003490:	50022000 	.word	0x50022000
 c003494:	56020c00 	.word	0x56020c00
 c003498:	56020800 	.word	0x56020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c00349c:	f7fe f8a0 	bl	c0015e0 <HAL_GetTick>
 c0034a0:	4602      	mov	r2, r0
 c0034a2:	693b      	ldr	r3, [r7, #16]
 c0034a4:	1ad3      	subs	r3, r2, r3
 c0034a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 c0034aa:	4293      	cmp	r3, r2
 c0034ac:	d901      	bls.n	c0034b2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 c0034ae:	2303      	movs	r3, #3
 c0034b0:	e090      	b.n	c0035d4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 c0034b2:	4b4a      	ldr	r3, [pc, #296]	@ (c0035dc <HAL_RCC_ClockConfig+0x3d0>)
 c0034b4:	69db      	ldr	r3, [r3, #28]
 c0034b6:	f003 030c 	and.w	r3, r3, #12
 c0034ba:	2b04      	cmp	r3, #4
 c0034bc:	d1ee      	bne.n	c00349c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c0034be:	687b      	ldr	r3, [r7, #4]
 c0034c0:	681b      	ldr	r3, [r3, #0]
 c0034c2:	f003 0302 	and.w	r3, r3, #2
 c0034c6:	2b00      	cmp	r3, #0
 c0034c8:	d010      	beq.n	c0034ec <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 c0034ca:	687b      	ldr	r3, [r7, #4]
 c0034cc:	689a      	ldr	r2, [r3, #8]
 c0034ce:	4b43      	ldr	r3, [pc, #268]	@ (c0035dc <HAL_RCC_ClockConfig+0x3d0>)
 c0034d0:	6a1b      	ldr	r3, [r3, #32]
 c0034d2:	f003 030f 	and.w	r3, r3, #15
 c0034d6:	429a      	cmp	r2, r3
 c0034d8:	d208      	bcs.n	c0034ec <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 c0034da:	4b40      	ldr	r3, [pc, #256]	@ (c0035dc <HAL_RCC_ClockConfig+0x3d0>)
 c0034dc:	6a1b      	ldr	r3, [r3, #32]
 c0034de:	f023 020f 	bic.w	r2, r3, #15
 c0034e2:	687b      	ldr	r3, [r7, #4]
 c0034e4:	689b      	ldr	r3, [r3, #8]
 c0034e6:	493d      	ldr	r1, [pc, #244]	@ (c0035dc <HAL_RCC_ClockConfig+0x3d0>)
 c0034e8:	4313      	orrs	r3, r2
 c0034ea:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 c0034ec:	4b3c      	ldr	r3, [pc, #240]	@ (c0035e0 <HAL_RCC_ClockConfig+0x3d4>)
 c0034ee:	681b      	ldr	r3, [r3, #0]
 c0034f0:	f003 030f 	and.w	r3, r3, #15
 c0034f4:	683a      	ldr	r2, [r7, #0]
 c0034f6:	429a      	cmp	r2, r3
 c0034f8:	d210      	bcs.n	c00351c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c0034fa:	4b39      	ldr	r3, [pc, #228]	@ (c0035e0 <HAL_RCC_ClockConfig+0x3d4>)
 c0034fc:	681b      	ldr	r3, [r3, #0]
 c0034fe:	f023 020f 	bic.w	r2, r3, #15
 c003502:	4937      	ldr	r1, [pc, #220]	@ (c0035e0 <HAL_RCC_ClockConfig+0x3d4>)
 c003504:	683b      	ldr	r3, [r7, #0]
 c003506:	4313      	orrs	r3, r2
 c003508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c00350a:	4b35      	ldr	r3, [pc, #212]	@ (c0035e0 <HAL_RCC_ClockConfig+0x3d4>)
 c00350c:	681b      	ldr	r3, [r3, #0]
 c00350e:	f003 030f 	and.w	r3, r3, #15
 c003512:	683a      	ldr	r2, [r7, #0]
 c003514:	429a      	cmp	r2, r3
 c003516:	d001      	beq.n	c00351c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 c003518:	2301      	movs	r3, #1
 c00351a:	e05b      	b.n	c0035d4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c00351c:	687b      	ldr	r3, [r7, #4]
 c00351e:	681b      	ldr	r3, [r3, #0]
 c003520:	f003 0304 	and.w	r3, r3, #4
 c003524:	2b00      	cmp	r3, #0
 c003526:	d010      	beq.n	c00354a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 c003528:	687b      	ldr	r3, [r7, #4]
 c00352a:	68da      	ldr	r2, [r3, #12]
 c00352c:	4b2b      	ldr	r3, [pc, #172]	@ (c0035dc <HAL_RCC_ClockConfig+0x3d0>)
 c00352e:	6a1b      	ldr	r3, [r3, #32]
 c003530:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 c003534:	429a      	cmp	r2, r3
 c003536:	d208      	bcs.n	c00354a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 c003538:	4b28      	ldr	r3, [pc, #160]	@ (c0035dc <HAL_RCC_ClockConfig+0x3d0>)
 c00353a:	6a1b      	ldr	r3, [r3, #32]
 c00353c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 c003540:	687b      	ldr	r3, [r7, #4]
 c003542:	68db      	ldr	r3, [r3, #12]
 c003544:	4925      	ldr	r1, [pc, #148]	@ (c0035dc <HAL_RCC_ClockConfig+0x3d0>)
 c003546:	4313      	orrs	r3, r2
 c003548:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c00354a:	687b      	ldr	r3, [r7, #4]
 c00354c:	681b      	ldr	r3, [r3, #0]
 c00354e:	f003 0308 	and.w	r3, r3, #8
 c003552:	2b00      	cmp	r3, #0
 c003554:	d012      	beq.n	c00357c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 c003556:	687b      	ldr	r3, [r7, #4]
 c003558:	691a      	ldr	r2, [r3, #16]
 c00355a:	4b20      	ldr	r3, [pc, #128]	@ (c0035dc <HAL_RCC_ClockConfig+0x3d0>)
 c00355c:	6a1b      	ldr	r3, [r3, #32]
 c00355e:	091b      	lsrs	r3, r3, #4
 c003560:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 c003564:	429a      	cmp	r2, r3
 c003566:	d209      	bcs.n	c00357c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 c003568:	4b1c      	ldr	r3, [pc, #112]	@ (c0035dc <HAL_RCC_ClockConfig+0x3d0>)
 c00356a:	6a1b      	ldr	r3, [r3, #32]
 c00356c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 c003570:	687b      	ldr	r3, [r7, #4]
 c003572:	691b      	ldr	r3, [r3, #16]
 c003574:	011b      	lsls	r3, r3, #4
 c003576:	4919      	ldr	r1, [pc, #100]	@ (c0035dc <HAL_RCC_ClockConfig+0x3d0>)
 c003578:	4313      	orrs	r3, r2
 c00357a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 c00357c:	687b      	ldr	r3, [r7, #4]
 c00357e:	681b      	ldr	r3, [r3, #0]
 c003580:	f003 0310 	and.w	r3, r3, #16
 c003584:	2b00      	cmp	r3, #0
 c003586:	d010      	beq.n	c0035aa <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 c003588:	687b      	ldr	r3, [r7, #4]
 c00358a:	695a      	ldr	r2, [r3, #20]
 c00358c:	4b13      	ldr	r3, [pc, #76]	@ (c0035dc <HAL_RCC_ClockConfig+0x3d0>)
 c00358e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c003590:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 c003594:	429a      	cmp	r2, r3
 c003596:	d208      	bcs.n	c0035aa <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 c003598:	4b10      	ldr	r3, [pc, #64]	@ (c0035dc <HAL_RCC_ClockConfig+0x3d0>)
 c00359a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c00359c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 c0035a0:	687b      	ldr	r3, [r7, #4]
 c0035a2:	695b      	ldr	r3, [r3, #20]
 c0035a4:	490d      	ldr	r1, [pc, #52]	@ (c0035dc <HAL_RCC_ClockConfig+0x3d0>)
 c0035a6:	4313      	orrs	r3, r2
 c0035a8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 c0035aa:	f000 f821 	bl	c0035f0 <HAL_RCC_GetSysClockFreq>
 c0035ae:	4602      	mov	r2, r0
 c0035b0:	4b0a      	ldr	r3, [pc, #40]	@ (c0035dc <HAL_RCC_ClockConfig+0x3d0>)
 c0035b2:	6a1b      	ldr	r3, [r3, #32]
 c0035b4:	f003 030f 	and.w	r3, r3, #15
 c0035b8:	490a      	ldr	r1, [pc, #40]	@ (c0035e4 <HAL_RCC_ClockConfig+0x3d8>)
 c0035ba:	5ccb      	ldrb	r3, [r1, r3]
 c0035bc:	fa22 f303 	lsr.w	r3, r2, r3
 c0035c0:	4a09      	ldr	r2, [pc, #36]	@ (c0035e8 <HAL_RCC_ClockConfig+0x3dc>)
 c0035c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 c0035c4:	4b09      	ldr	r3, [pc, #36]	@ (c0035ec <HAL_RCC_ClockConfig+0x3e0>)
 c0035c6:	681b      	ldr	r3, [r3, #0]
 c0035c8:	4618      	mov	r0, r3
 c0035ca:	f7fd ff7f 	bl	c0014cc <HAL_InitTick>
 c0035ce:	4603      	mov	r3, r0
 c0035d0:	73fb      	strb	r3, [r7, #15]

  return status;
 c0035d2:	7bfb      	ldrb	r3, [r7, #15]
}
 c0035d4:	4618      	mov	r0, r3
 c0035d6:	3718      	adds	r7, #24
 c0035d8:	46bd      	mov	sp, r7
 c0035da:	bd80      	pop	{r7, pc}
 c0035dc:	56020c00 	.word	0x56020c00
 c0035e0:	50022000 	.word	0x50022000
 c0035e4:	0c006fb0 	.word	0x0c006fb0
 c0035e8:	30000108 	.word	0x30000108
 c0035ec:	3000010c 	.word	0x3000010c

0c0035f0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 c0035f0:	b480      	push	{r7}
 c0035f2:	b08b      	sub	sp, #44	@ 0x2c
 c0035f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 c0035f6:	2300      	movs	r3, #0
 c0035f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 c0035fa:	2300      	movs	r3, #0
 c0035fc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c0035fe:	4b78      	ldr	r3, [pc, #480]	@ (c0037e0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c003600:	69db      	ldr	r3, [r3, #28]
 c003602:	f003 030c 	and.w	r3, r3, #12
 c003606:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c003608:	4b75      	ldr	r3, [pc, #468]	@ (c0037e0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c00360a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00360c:	f003 0303 	and.w	r3, r3, #3
 c003610:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c003612:	69bb      	ldr	r3, [r7, #24]
 c003614:	2b00      	cmp	r3, #0
 c003616:	d005      	beq.n	c003624 <HAL_RCC_GetSysClockFreq+0x34>
 c003618:	69bb      	ldr	r3, [r7, #24]
 c00361a:	2b0c      	cmp	r3, #12
 c00361c:	d121      	bne.n	c003662 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c00361e:	697b      	ldr	r3, [r7, #20]
 c003620:	2b01      	cmp	r3, #1
 c003622:	d11e      	bne.n	c003662 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 c003624:	4b6e      	ldr	r3, [pc, #440]	@ (c0037e0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c003626:	689b      	ldr	r3, [r3, #8]
 c003628:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00362c:	2b00      	cmp	r3, #0
 c00362e:	d107      	bne.n	c003640 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 c003630:	4b6b      	ldr	r3, [pc, #428]	@ (c0037e0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c003632:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c003636:	0b1b      	lsrs	r3, r3, #12
 c003638:	f003 030f 	and.w	r3, r3, #15
 c00363c:	627b      	str	r3, [r7, #36]	@ 0x24
 c00363e:	e005      	b.n	c00364c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 c003640:	4b67      	ldr	r3, [pc, #412]	@ (c0037e0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c003642:	689b      	ldr	r3, [r3, #8]
 c003644:	0f1b      	lsrs	r3, r3, #28
 c003646:	f003 030f 	and.w	r3, r3, #15
 c00364a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 c00364c:	4a65      	ldr	r2, [pc, #404]	@ (c0037e4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 c00364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c003650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c003654:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c003656:	69bb      	ldr	r3, [r7, #24]
 c003658:	2b00      	cmp	r3, #0
 c00365a:	d110      	bne.n	c00367e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 c00365c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c00365e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c003660:	e00d      	b.n	c00367e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 c003662:	4b5f      	ldr	r3, [pc, #380]	@ (c0037e0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c003664:	69db      	ldr	r3, [r3, #28]
 c003666:	f003 030c 	and.w	r3, r3, #12
 c00366a:	2b04      	cmp	r3, #4
 c00366c:	d102      	bne.n	c003674 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 c00366e:	4b5e      	ldr	r3, [pc, #376]	@ (c0037e8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 c003670:	623b      	str	r3, [r7, #32]
 c003672:	e004      	b.n	c00367e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 c003674:	69bb      	ldr	r3, [r7, #24]
 c003676:	2b08      	cmp	r3, #8
 c003678:	d101      	bne.n	c00367e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 c00367a:	4b5b      	ldr	r3, [pc, #364]	@ (c0037e8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 c00367c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c00367e:	69bb      	ldr	r3, [r7, #24]
 c003680:	2b0c      	cmp	r3, #12
 c003682:	f040 80a5 	bne.w	c0037d0 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 c003686:	4b56      	ldr	r3, [pc, #344]	@ (c0037e0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c003688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00368a:	f003 0303 	and.w	r3, r3, #3
 c00368e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 c003690:	4b53      	ldr	r3, [pc, #332]	@ (c0037e0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c003692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c003694:	0a1b      	lsrs	r3, r3, #8
 c003696:	f003 030f 	and.w	r3, r3, #15
 c00369a:	3301      	adds	r3, #1
 c00369c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 c00369e:	4b50      	ldr	r3, [pc, #320]	@ (c0037e0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c0036a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0036a2:	091b      	lsrs	r3, r3, #4
 c0036a4:	f003 0301 	and.w	r3, r3, #1
 c0036a8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 c0036aa:	4b4d      	ldr	r3, [pc, #308]	@ (c0037e0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c0036ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c0036ae:	08db      	lsrs	r3, r3, #3
 c0036b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 c0036b4:	68ba      	ldr	r2, [r7, #8]
 c0036b6:	fb02 f303 	mul.w	r3, r2, r3
 c0036ba:	ee07 3a90 	vmov	s15, r3
 c0036be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c0036c2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 c0036c6:	693b      	ldr	r3, [r7, #16]
 c0036c8:	2b02      	cmp	r3, #2
 c0036ca:	d003      	beq.n	c0036d4 <HAL_RCC_GetSysClockFreq+0xe4>
 c0036cc:	693b      	ldr	r3, [r7, #16]
 c0036ce:	2b03      	cmp	r3, #3
 c0036d0:	d022      	beq.n	c003718 <HAL_RCC_GetSysClockFreq+0x128>
 c0036d2:	e043      	b.n	c00375c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0036d4:	68fb      	ldr	r3, [r7, #12]
 c0036d6:	ee07 3a90 	vmov	s15, r3
 c0036da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c0036de:	eddf 6a43 	vldr	s13, [pc, #268]	@ c0037ec <HAL_RCC_GetSysClockFreq+0x1fc>
 c0036e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c0036e6:	4b3e      	ldr	r3, [pc, #248]	@ (c0037e0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c0036e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c0036ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c0036ee:	ee07 3a90 	vmov	s15, r3
 c0036f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c0036f6:	ed97 6a01 	vldr	s12, [r7, #4]
 c0036fa:	eddf 5a3d 	vldr	s11, [pc, #244]	@ c0037f0 <HAL_RCC_GetSysClockFreq+0x200>
 c0036fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c003702:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c003706:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c00370a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00370e:	ee67 7a27 	vmul.f32	s15, s14, s15
 c003712:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c003716:	e046      	b.n	c0037a6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c003718:	68fb      	ldr	r3, [r7, #12]
 c00371a:	ee07 3a90 	vmov	s15, r3
 c00371e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c003722:	eddf 6a32 	vldr	s13, [pc, #200]	@ c0037ec <HAL_RCC_GetSysClockFreq+0x1fc>
 c003726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c00372a:	4b2d      	ldr	r3, [pc, #180]	@ (c0037e0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c00372c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c00372e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c003732:	ee07 3a90 	vmov	s15, r3
 c003736:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c00373a:	ed97 6a01 	vldr	s12, [r7, #4]
 c00373e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ c0037f0 <HAL_RCC_GetSysClockFreq+0x200>
 c003742:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c003746:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c00374a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c00374e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c003752:	ee67 7a27 	vmul.f32	s15, s14, s15
 c003756:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c00375a:	e024      	b.n	c0037a6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00375c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c00375e:	ee07 3a90 	vmov	s15, r3
 c003762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c003766:	68fb      	ldr	r3, [r7, #12]
 c003768:	ee07 3a90 	vmov	s15, r3
 c00376c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c003770:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c003774:	4b1a      	ldr	r3, [pc, #104]	@ (c0037e0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c003776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c003778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c00377c:	ee07 3a90 	vmov	s15, r3
 c003780:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c003784:	ed97 6a01 	vldr	s12, [r7, #4]
 c003788:	eddf 5a19 	vldr	s11, [pc, #100]	@ c0037f0 <HAL_RCC_GetSysClockFreq+0x200>
 c00378c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c003790:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 c003794:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c003798:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00379c:	ee67 7a27 	vmul.f32	s15, s14, s15
 c0037a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 c0037a4:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 c0037a6:	4b0e      	ldr	r3, [pc, #56]	@ (c0037e0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 c0037a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c0037aa:	0e1b      	lsrs	r3, r3, #24
 c0037ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c0037b0:	3301      	adds	r3, #1
 c0037b2:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 c0037b4:	683b      	ldr	r3, [r7, #0]
 c0037b6:	ee07 3a90 	vmov	s15, r3
 c0037ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 c0037be:	edd7 6a07 	vldr	s13, [r7, #28]
 c0037c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c0037c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c0037ca:	ee17 3a90 	vmov	r3, s15
 c0037ce:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 c0037d0:	6a3b      	ldr	r3, [r7, #32]
}
 c0037d2:	4618      	mov	r0, r3
 c0037d4:	372c      	adds	r7, #44	@ 0x2c
 c0037d6:	46bd      	mov	sp, r7
 c0037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0037dc:	4770      	bx	lr
 c0037de:	bf00      	nop
 c0037e0:	56020c00 	.word	0x56020c00
 c0037e4:	0c006fc8 	.word	0x0c006fc8
 c0037e8:	00f42400 	.word	0x00f42400
 c0037ec:	4b742400 	.word	0x4b742400
 c0037f0:	46000000 	.word	0x46000000

0c0037f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 c0037f4:	b580      	push	{r7, lr}
 c0037f6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 c0037f8:	f7ff fefa 	bl	c0035f0 <HAL_RCC_GetSysClockFreq>
 c0037fc:	4602      	mov	r2, r0
 c0037fe:	4b07      	ldr	r3, [pc, #28]	@ (c00381c <HAL_RCC_GetHCLKFreq+0x28>)
 c003800:	6a1b      	ldr	r3, [r3, #32]
 c003802:	f003 030f 	and.w	r3, r3, #15
 c003806:	4906      	ldr	r1, [pc, #24]	@ (c003820 <HAL_RCC_GetHCLKFreq+0x2c>)
 c003808:	5ccb      	ldrb	r3, [r1, r3]
 c00380a:	fa22 f303 	lsr.w	r3, r2, r3
 c00380e:	4a05      	ldr	r2, [pc, #20]	@ (c003824 <HAL_RCC_GetHCLKFreq+0x30>)
 c003810:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 c003812:	4b04      	ldr	r3, [pc, #16]	@ (c003824 <HAL_RCC_GetHCLKFreq+0x30>)
 c003814:	681b      	ldr	r3, [r3, #0]
}
 c003816:	4618      	mov	r0, r3
 c003818:	bd80      	pop	{r7, pc}
 c00381a:	bf00      	nop
 c00381c:	56020c00 	.word	0x56020c00
 c003820:	0c006fb0 	.word	0x0c006fb0
 c003824:	30000108 	.word	0x30000108

0c003828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 c003828:	b580      	push	{r7, lr}
 c00382a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 c00382c:	f7ff ffe2 	bl	c0037f4 <HAL_RCC_GetHCLKFreq>
 c003830:	4602      	mov	r2, r0
 c003832:	4b05      	ldr	r3, [pc, #20]	@ (c003848 <HAL_RCC_GetPCLK1Freq+0x20>)
 c003834:	6a1b      	ldr	r3, [r3, #32]
 c003836:	091b      	lsrs	r3, r3, #4
 c003838:	f003 0307 	and.w	r3, r3, #7
 c00383c:	4903      	ldr	r1, [pc, #12]	@ (c00384c <HAL_RCC_GetPCLK1Freq+0x24>)
 c00383e:	5ccb      	ldrb	r3, [r1, r3]
 c003840:	fa22 f303 	lsr.w	r3, r2, r3
}
 c003844:	4618      	mov	r0, r3
 c003846:	bd80      	pop	{r7, pc}
 c003848:	56020c00 	.word	0x56020c00
 c00384c:	0c006fc0 	.word	0x0c006fc0

0c003850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 c003850:	b580      	push	{r7, lr}
 c003852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 c003854:	f7ff ffce 	bl	c0037f4 <HAL_RCC_GetHCLKFreq>
 c003858:	4602      	mov	r2, r0
 c00385a:	4b05      	ldr	r3, [pc, #20]	@ (c003870 <HAL_RCC_GetPCLK2Freq+0x20>)
 c00385c:	6a1b      	ldr	r3, [r3, #32]
 c00385e:	0a1b      	lsrs	r3, r3, #8
 c003860:	f003 0307 	and.w	r3, r3, #7
 c003864:	4903      	ldr	r1, [pc, #12]	@ (c003874 <HAL_RCC_GetPCLK2Freq+0x24>)
 c003866:	5ccb      	ldrb	r3, [r1, r3]
 c003868:	fa22 f303 	lsr.w	r3, r2, r3
}
 c00386c:	4618      	mov	r0, r3
 c00386e:	bd80      	pop	{r7, pc}
 c003870:	56020c00 	.word	0x56020c00
 c003874:	0c006fc0 	.word	0x0c006fc0

0c003878 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 c003878:	b580      	push	{r7, lr}
 c00387a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 c00387c:	f7ff ffba 	bl	c0037f4 <HAL_RCC_GetHCLKFreq>
 c003880:	4602      	mov	r2, r0
 c003882:	4b05      	ldr	r3, [pc, #20]	@ (c003898 <HAL_RCC_GetPCLK3Freq+0x20>)
 c003884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c003886:	091b      	lsrs	r3, r3, #4
 c003888:	f003 0307 	and.w	r3, r3, #7
 c00388c:	4903      	ldr	r1, [pc, #12]	@ (c00389c <HAL_RCC_GetPCLK3Freq+0x24>)
 c00388e:	5ccb      	ldrb	r3, [r1, r3]
 c003890:	fa22 f303 	lsr.w	r3, r2, r3
}
 c003894:	4618      	mov	r0, r3
 c003896:	bd80      	pop	{r7, pc}
 c003898:	56020c00 	.word	0x56020c00
 c00389c:	0c006fc0 	.word	0x0c006fc0

0c0038a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 c0038a0:	b580      	push	{r7, lr}
 c0038a2:	b086      	sub	sp, #24
 c0038a4:	af00      	add	r7, sp, #0
 c0038a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 c0038a8:	4b3e      	ldr	r3, [pc, #248]	@ (c0039a4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 c0038aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c0038ae:	f003 0304 	and.w	r3, r3, #4
 c0038b2:	2b00      	cmp	r3, #0
 c0038b4:	d003      	beq.n	c0038be <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 c0038b6:	f7fe fd6f 	bl	c002398 <HAL_PWREx_GetVoltageRange>
 c0038ba:	6178      	str	r0, [r7, #20]
 c0038bc:	e019      	b.n	c0038f2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 c0038be:	4b39      	ldr	r3, [pc, #228]	@ (c0039a4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 c0038c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c0038c4:	4a37      	ldr	r2, [pc, #220]	@ (c0039a4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 c0038c6:	f043 0304 	orr.w	r3, r3, #4
 c0038ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c0038ce:	4b35      	ldr	r3, [pc, #212]	@ (c0039a4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 c0038d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c0038d4:	f003 0304 	and.w	r3, r3, #4
 c0038d8:	60fb      	str	r3, [r7, #12]
 c0038da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 c0038dc:	f7fe fd5c 	bl	c002398 <HAL_PWREx_GetVoltageRange>
 c0038e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 c0038e2:	4b30      	ldr	r3, [pc, #192]	@ (c0039a4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 c0038e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c0038e8:	4a2e      	ldr	r2, [pc, #184]	@ (c0039a4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 c0038ea:	f023 0304 	bic.w	r3, r3, #4
 c0038ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 c0038f2:	697b      	ldr	r3, [r7, #20]
 c0038f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 c0038f8:	d003      	beq.n	c003902 <RCC_SetFlashLatencyFromMSIRange+0x62>
 c0038fa:	697b      	ldr	r3, [r7, #20]
 c0038fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c003900:	d109      	bne.n	c003916 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 c003902:	687b      	ldr	r3, [r7, #4]
 c003904:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c003908:	d202      	bcs.n	c003910 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 c00390a:	2301      	movs	r3, #1
 c00390c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 c00390e:	e033      	b.n	c003978 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 c003910:	2300      	movs	r3, #0
 c003912:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 c003914:	e030      	b.n	c003978 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 c003916:	687b      	ldr	r3, [r7, #4]
 c003918:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c00391c:	d208      	bcs.n	c003930 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 c00391e:	697b      	ldr	r3, [r7, #20]
 c003920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c003924:	d102      	bne.n	c00392c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 c003926:	2303      	movs	r3, #3
 c003928:	613b      	str	r3, [r7, #16]
 c00392a:	e025      	b.n	c003978 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 c00392c:	2301      	movs	r3, #1
 c00392e:	e035      	b.n	c00399c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 c003930:	687b      	ldr	r3, [r7, #4]
 c003932:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 c003936:	d90f      	bls.n	c003958 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 c003938:	697b      	ldr	r3, [r7, #20]
 c00393a:	2b00      	cmp	r3, #0
 c00393c:	d109      	bne.n	c003952 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 c00393e:	687b      	ldr	r3, [r7, #4]
 c003940:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 c003944:	d902      	bls.n	c00394c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 c003946:	2300      	movs	r3, #0
 c003948:	613b      	str	r3, [r7, #16]
 c00394a:	e015      	b.n	c003978 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 c00394c:	2301      	movs	r3, #1
 c00394e:	613b      	str	r3, [r7, #16]
 c003950:	e012      	b.n	c003978 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 c003952:	2300      	movs	r3, #0
 c003954:	613b      	str	r3, [r7, #16]
 c003956:	e00f      	b.n	c003978 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 c003958:	687b      	ldr	r3, [r7, #4]
 c00395a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c00395e:	d109      	bne.n	c003974 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 c003960:	697b      	ldr	r3, [r7, #20]
 c003962:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c003966:	d102      	bne.n	c00396e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 c003968:	2301      	movs	r3, #1
 c00396a:	613b      	str	r3, [r7, #16]
 c00396c:	e004      	b.n	c003978 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 c00396e:	2302      	movs	r3, #2
 c003970:	613b      	str	r3, [r7, #16]
 c003972:	e001      	b.n	c003978 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 c003974:	2301      	movs	r3, #1
 c003976:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 c003978:	4b0b      	ldr	r3, [pc, #44]	@ (c0039a8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 c00397a:	681b      	ldr	r3, [r3, #0]
 c00397c:	f023 020f 	bic.w	r2, r3, #15
 c003980:	4909      	ldr	r1, [pc, #36]	@ (c0039a8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 c003982:	693b      	ldr	r3, [r7, #16]
 c003984:	4313      	orrs	r3, r2
 c003986:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 c003988:	4b07      	ldr	r3, [pc, #28]	@ (c0039a8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 c00398a:	681b      	ldr	r3, [r3, #0]
 c00398c:	f003 030f 	and.w	r3, r3, #15
 c003990:	693a      	ldr	r2, [r7, #16]
 c003992:	429a      	cmp	r2, r3
 c003994:	d001      	beq.n	c00399a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 c003996:	2301      	movs	r3, #1
 c003998:	e000      	b.n	c00399c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 c00399a:	2300      	movs	r3, #0
}
 c00399c:	4618      	mov	r0, r3
 c00399e:	3718      	adds	r7, #24
 c0039a0:	46bd      	mov	sp, r7
 c0039a2:	bd80      	pop	{r7, pc}
 c0039a4:	56020c00 	.word	0x56020c00
 c0039a8:	50022000 	.word	0x50022000

0c0039ac <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 c0039ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 c0039b0:	b0ba      	sub	sp, #232	@ 0xe8
 c0039b2:	af00      	add	r7, sp, #0
 c0039b4:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 c0039b8:	2300      	movs	r3, #0
 c0039ba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 c0039be:	2300      	movs	r3, #0
 c0039c0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 c0039c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0039c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0039cc:	f002 0401 	and.w	r4, r2, #1
 c0039d0:	2500      	movs	r5, #0
 c0039d2:	ea54 0305 	orrs.w	r3, r4, r5
 c0039d6:	d00b      	beq.n	c0039f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 c0039d8:	4bcb      	ldr	r3, [pc, #812]	@ (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c0039da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c0039de:	f023 0103 	bic.w	r1, r3, #3
 c0039e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0039e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 c0039e8:	4ac7      	ldr	r2, [pc, #796]	@ (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c0039ea:	430b      	orrs	r3, r1
 c0039ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 c0039f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0039f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0039f8:	f002 0802 	and.w	r8, r2, #2
 c0039fc:	f04f 0900 	mov.w	r9, #0
 c003a00:	ea58 0309 	orrs.w	r3, r8, r9
 c003a04:	d00b      	beq.n	c003a1e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 c003a06:	4bc0      	ldr	r3, [pc, #768]	@ (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c003a0c:	f023 010c 	bic.w	r1, r3, #12
 c003a10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 c003a16:	4abc      	ldr	r2, [pc, #752]	@ (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003a18:	430b      	orrs	r3, r1
 c003a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 c003a1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 c003a26:	f002 0a04 	and.w	sl, r2, #4
 c003a2a:	f04f 0b00 	mov.w	fp, #0
 c003a2e:	ea5a 030b 	orrs.w	r3, sl, fp
 c003a32:	d00b      	beq.n	c003a4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 c003a34:	4bb4      	ldr	r3, [pc, #720]	@ (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c003a3a:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 c003a3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c003a44:	4ab0      	ldr	r2, [pc, #704]	@ (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003a46:	430b      	orrs	r3, r1
 c003a48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 c003a4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 c003a54:	f002 0308 	and.w	r3, r2, #8
 c003a58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 c003a5c:	2300      	movs	r3, #0
 c003a5e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 c003a62:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 c003a66:	460b      	mov	r3, r1
 c003a68:	4313      	orrs	r3, r2
 c003a6a:	d00b      	beq.n	c003a84 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 c003a6c:	4ba6      	ldr	r3, [pc, #664]	@ (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c003a72:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 c003a76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 c003a7c:	4aa2      	ldr	r2, [pc, #648]	@ (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003a7e:	430b      	orrs	r3, r1
 c003a80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 c003a84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 c003a8c:	f002 0310 	and.w	r3, r2, #16
 c003a90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 c003a94:	2300      	movs	r3, #0
 c003a96:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 c003a9a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 c003a9e:	460b      	mov	r3, r1
 c003aa0:	4313      	orrs	r3, r2
 c003aa2:	d00b      	beq.n	c003abc <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 c003aa4:	4b98      	ldr	r3, [pc, #608]	@ (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c003aaa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 c003aae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 c003ab4:	4a94      	ldr	r2, [pc, #592]	@ (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003ab6:	430b      	orrs	r3, r1
 c003ab8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 c003abc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 c003ac4:	f002 0320 	and.w	r3, r2, #32
 c003ac8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 c003acc:	2300      	movs	r3, #0
 c003ace:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 c003ad2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 c003ad6:	460b      	mov	r3, r1
 c003ad8:	4313      	orrs	r3, r2
 c003ada:	d00b      	beq.n	c003af4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 c003adc:	4b8a      	ldr	r3, [pc, #552]	@ (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003ade:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c003ae2:	f023 0107 	bic.w	r1, r3, #7
 c003ae6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003aea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 c003aec:	4a86      	ldr	r2, [pc, #536]	@ (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003aee:	430b      	orrs	r3, r1
 c003af0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 c003af4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 c003afc:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 c003b00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 c003b04:	2300      	movs	r3, #0
 c003b06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 c003b0a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 c003b0e:	460b      	mov	r3, r1
 c003b10:	4313      	orrs	r3, r2
 c003b12:	d00b      	beq.n	c003b2c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 c003b14:	4b7c      	ldr	r3, [pc, #496]	@ (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c003b1a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 c003b1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003b22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 c003b24:	4a78      	ldr	r2, [pc, #480]	@ (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003b26:	430b      	orrs	r3, r1
 c003b28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 c003b2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 c003b34:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 c003b38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 c003b3c:	2300      	movs	r3, #0
 c003b3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 c003b42:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 c003b46:	460b      	mov	r3, r1
 c003b48:	4313      	orrs	r3, r2
 c003b4a:	d00b      	beq.n	c003b64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 c003b4c:	4b6e      	ldr	r3, [pc, #440]	@ (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c003b52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 c003b56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003b5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 c003b5c:	4a6a      	ldr	r2, [pc, #424]	@ (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003b5e:	430b      	orrs	r3, r1
 c003b60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 c003b64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 c003b6c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 c003b70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 c003b74:	2300      	movs	r3, #0
 c003b76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 c003b7a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 c003b7e:	460b      	mov	r3, r1
 c003b80:	4313      	orrs	r3, r2
 c003b82:	d00b      	beq.n	c003b9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 c003b84:	4b60      	ldr	r3, [pc, #384]	@ (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003b86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c003b8a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 c003b8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 c003b94:	4a5c      	ldr	r2, [pc, #368]	@ (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003b96:	430b      	orrs	r3, r1
 c003b98:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 c003b9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 c003ba4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 c003ba8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 c003bac:	2300      	movs	r3, #0
 c003bae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 c003bb2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 c003bb6:	460b      	mov	r3, r1
 c003bb8:	4313      	orrs	r3, r2
 c003bba:	d00b      	beq.n	c003bd4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 c003bbc:	4b52      	ldr	r3, [pc, #328]	@ (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c003bc2:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 c003bc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003bca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 c003bcc:	4a4e      	ldr	r2, [pc, #312]	@ (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003bce:	430b      	orrs	r3, r1
 c003bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 c003bd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 c003bdc:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 c003be0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 c003be4:	2300      	movs	r3, #0
 c003be6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 c003bea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 c003bee:	460b      	mov	r3, r1
 c003bf0:	4313      	orrs	r3, r2
 c003bf2:	d00b      	beq.n	c003c0c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 c003bf4:	4b44      	ldr	r3, [pc, #272]	@ (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003bf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c003bfa:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 c003bfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003c02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 c003c04:	4a40      	ldr	r2, [pc, #256]	@ (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003c06:	430b      	orrs	r3, r1
 c003c08:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 c003c0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 c003c14:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 c003c18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 c003c1c:	2300      	movs	r3, #0
 c003c1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 c003c22:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 c003c26:	460b      	mov	r3, r1
 c003c28:	4313      	orrs	r3, r2
 c003c2a:	d00b      	beq.n	c003c44 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 c003c2c:	4b36      	ldr	r3, [pc, #216]	@ (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c003c32:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 c003c36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003c3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 c003c3c:	4a32      	ldr	r2, [pc, #200]	@ (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003c3e:	430b      	orrs	r3, r1
 c003c40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 c003c44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 c003c4c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 c003c50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 c003c54:	2300      	movs	r3, #0
 c003c56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 c003c5a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 c003c5e:	460b      	mov	r3, r1
 c003c60:	4313      	orrs	r3, r2
 c003c62:	d00c      	beq.n	c003c7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 c003c64:	4b28      	ldr	r3, [pc, #160]	@ (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003c66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c003c6a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 c003c6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 c003c76:	4a24      	ldr	r2, [pc, #144]	@ (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003c78:	430b      	orrs	r3, r1
 c003c7a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 c003c7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 c003c86:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 c003c8a:	67bb      	str	r3, [r7, #120]	@ 0x78
 c003c8c:	2300      	movs	r3, #0
 c003c8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 c003c90:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 c003c94:	460b      	mov	r3, r1
 c003c96:	4313      	orrs	r3, r2
 c003c98:	d04f      	beq.n	c003d3a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 c003c9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c003ca2:	2b80      	cmp	r3, #128	@ 0x80
 c003ca4:	d02d      	beq.n	c003d02 <HAL_RCCEx_PeriphCLKConfig+0x356>
 c003ca6:	2b80      	cmp	r3, #128	@ 0x80
 c003ca8:	d827      	bhi.n	c003cfa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 c003caa:	2b60      	cmp	r3, #96	@ 0x60
 c003cac:	d02e      	beq.n	c003d0c <HAL_RCCEx_PeriphCLKConfig+0x360>
 c003cae:	2b60      	cmp	r3, #96	@ 0x60
 c003cb0:	d823      	bhi.n	c003cfa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 c003cb2:	2b40      	cmp	r3, #64	@ 0x40
 c003cb4:	d006      	beq.n	c003cc4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 c003cb6:	2b40      	cmp	r3, #64	@ 0x40
 c003cb8:	d81f      	bhi.n	c003cfa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 c003cba:	2b00      	cmp	r3, #0
 c003cbc:	d009      	beq.n	c003cd2 <HAL_RCCEx_PeriphCLKConfig+0x326>
 c003cbe:	2b20      	cmp	r3, #32
 c003cc0:	d011      	beq.n	c003ce6 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 c003cc2:	e01a      	b.n	c003cfa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 c003cc4:	4b10      	ldr	r3, [pc, #64]	@ (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c003cc8:	4a0f      	ldr	r2, [pc, #60]	@ (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 c003cca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c003cce:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 c003cd0:	e01d      	b.n	c003d0e <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c003cd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003cd6:	3308      	adds	r3, #8
 c003cd8:	4618      	mov	r0, r3
 c003cda:	f002 fa17 	bl	c00610c <RCCEx_PLL2_Config>
 c003cde:	4603      	mov	r3, r0
 c003ce0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 c003ce4:	e013      	b.n	c003d0e <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c003ce6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003cea:	332c      	adds	r3, #44	@ 0x2c
 c003cec:	4618      	mov	r0, r3
 c003cee:	f002 faa5 	bl	c00623c <RCCEx_PLL3_Config>
 c003cf2:	4603      	mov	r3, r0
 c003cf4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 c003cf8:	e009      	b.n	c003d0e <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c003cfa:	2301      	movs	r3, #1
 c003cfc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c003d00:	e005      	b.n	c003d0e <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 c003d02:	bf00      	nop
 c003d04:	e003      	b.n	c003d0e <HAL_RCCEx_PeriphCLKConfig+0x362>
 c003d06:	bf00      	nop
 c003d08:	56020c00 	.word	0x56020c00
        break;
 c003d0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 c003d0e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c003d12:	2b00      	cmp	r3, #0
 c003d14:	d10d      	bne.n	c003d32 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 c003d16:	4bb6      	ldr	r3, [pc, #728]	@ (c003ff0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c003d18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c003d1c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 c003d20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 c003d28:	4ab1      	ldr	r2, [pc, #708]	@ (c003ff0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c003d2a:	430b      	orrs	r3, r1
 c003d2c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 c003d30:	e003      	b.n	c003d3a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c003d32:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c003d36:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 c003d3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 c003d42:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 c003d46:	673b      	str	r3, [r7, #112]	@ 0x70
 c003d48:	2300      	movs	r3, #0
 c003d4a:	677b      	str	r3, [r7, #116]	@ 0x74
 c003d4c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 c003d50:	460b      	mov	r3, r1
 c003d52:	4313      	orrs	r3, r2
 c003d54:	d053      	beq.n	c003dfe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 c003d56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c003d5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c003d62:	d033      	beq.n	c003dcc <HAL_RCCEx_PeriphCLKConfig+0x420>
 c003d64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c003d68:	d82c      	bhi.n	c003dc4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 c003d6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c003d6e:	d02f      	beq.n	c003dd0 <HAL_RCCEx_PeriphCLKConfig+0x424>
 c003d70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c003d74:	d826      	bhi.n	c003dc4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 c003d76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 c003d7a:	d008      	beq.n	c003d8e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 c003d7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 c003d80:	d820      	bhi.n	c003dc4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 c003d82:	2b00      	cmp	r3, #0
 c003d84:	d00a      	beq.n	c003d9c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 c003d86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 c003d8a:	d011      	beq.n	c003db0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 c003d8c:	e01a      	b.n	c003dc4 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 c003d8e:	4b98      	ldr	r3, [pc, #608]	@ (c003ff0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c003d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c003d92:	4a97      	ldr	r2, [pc, #604]	@ (c003ff0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c003d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c003d98:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 c003d9a:	e01a      	b.n	c003dd2 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c003d9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003da0:	3308      	adds	r3, #8
 c003da2:	4618      	mov	r0, r3
 c003da4:	f002 f9b2 	bl	c00610c <RCCEx_PLL2_Config>
 c003da8:	4603      	mov	r3, r0
 c003daa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 c003dae:	e010      	b.n	c003dd2 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c003db0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003db4:	332c      	adds	r3, #44	@ 0x2c
 c003db6:	4618      	mov	r0, r3
 c003db8:	f002 fa40 	bl	c00623c <RCCEx_PLL3_Config>
 c003dbc:	4603      	mov	r3, r0
 c003dbe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 c003dc2:	e006      	b.n	c003dd2 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c003dc4:	2301      	movs	r3, #1
 c003dc6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c003dca:	e002      	b.n	c003dd2 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 c003dcc:	bf00      	nop
 c003dce:	e000      	b.n	c003dd2 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 c003dd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 c003dd2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c003dd6:	2b00      	cmp	r3, #0
 c003dd8:	d10d      	bne.n	c003df6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 c003dda:	4b85      	ldr	r3, [pc, #532]	@ (c003ff0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c003ddc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c003de0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 c003de4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c003dec:	4a80      	ldr	r2, [pc, #512]	@ (c003ff0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c003dee:	430b      	orrs	r3, r1
 c003df0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 c003df4:	e003      	b.n	c003dfe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c003df6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c003dfa:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 c003dfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 c003e06:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 c003e0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 c003e0c:	2300      	movs	r3, #0
 c003e0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 c003e10:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 c003e14:	460b      	mov	r3, r1
 c003e16:	4313      	orrs	r3, r2
 c003e18:	d046      	beq.n	c003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 c003e1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003e1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 c003e22:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 c003e26:	d028      	beq.n	c003e7a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 c003e28:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 c003e2c:	d821      	bhi.n	c003e72 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 c003e2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 c003e32:	d022      	beq.n	c003e7a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 c003e34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 c003e38:	d81b      	bhi.n	c003e72 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 c003e3a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 c003e3e:	d01c      	beq.n	c003e7a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 c003e40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 c003e44:	d815      	bhi.n	c003e72 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 c003e46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c003e4a:	d008      	beq.n	c003e5e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 c003e4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c003e50:	d80f      	bhi.n	c003e72 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 c003e52:	2b00      	cmp	r3, #0
 c003e54:	d011      	beq.n	c003e7a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 c003e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 c003e5a:	d00e      	beq.n	c003e7a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 c003e5c:	e009      	b.n	c003e72 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c003e5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003e62:	3308      	adds	r3, #8
 c003e64:	4618      	mov	r0, r3
 c003e66:	f002 f951 	bl	c00610c <RCCEx_PLL2_Config>
 c003e6a:	4603      	mov	r3, r0
 c003e6c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c003e70:	e004      	b.n	c003e7c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 c003e72:	2301      	movs	r3, #1
 c003e74:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c003e78:	e000      	b.n	c003e7c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 c003e7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 c003e7c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c003e80:	2b00      	cmp	r3, #0
 c003e82:	d10d      	bne.n	c003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 c003e84:	4b5a      	ldr	r3, [pc, #360]	@ (c003ff0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c003e86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c003e8a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 c003e8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003e92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 c003e96:	4a56      	ldr	r2, [pc, #344]	@ (c003ff0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c003e98:	430b      	orrs	r3, r1
 c003e9a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 c003e9e:	e003      	b.n	c003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c003ea0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c003ea4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 c003ea8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 c003eb0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 c003eb4:	663b      	str	r3, [r7, #96]	@ 0x60
 c003eb6:	2300      	movs	r3, #0
 c003eb8:	667b      	str	r3, [r7, #100]	@ 0x64
 c003eba:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 c003ebe:	460b      	mov	r3, r1
 c003ec0:	4313      	orrs	r3, r2
 c003ec2:	d03f      	beq.n	c003f44 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 c003ec4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c003ecc:	2b04      	cmp	r3, #4
 c003ece:	d81e      	bhi.n	c003f0e <HAL_RCCEx_PeriphCLKConfig+0x562>
 c003ed0:	a201      	add	r2, pc, #4	@ (adr r2, c003ed8 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 c003ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c003ed6:	bf00      	nop
 c003ed8:	0c003f17 	.word	0x0c003f17
 c003edc:	0c003eed 	.word	0x0c003eed
 c003ee0:	0c003efb 	.word	0x0c003efb
 c003ee4:	0c003f17 	.word	0x0c003f17
 c003ee8:	0c003f17 	.word	0x0c003f17
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 c003eec:	4b40      	ldr	r3, [pc, #256]	@ (c003ff0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c003eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c003ef0:	4a3f      	ldr	r2, [pc, #252]	@ (c003ff0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c003ef2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c003ef6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 c003ef8:	e00e      	b.n	c003f18 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c003efa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003efe:	332c      	adds	r3, #44	@ 0x2c
 c003f00:	4618      	mov	r0, r3
 c003f02:	f002 f99b 	bl	c00623c <RCCEx_PLL3_Config>
 c003f06:	4603      	mov	r3, r0
 c003f08:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c003f0c:	e004      	b.n	c003f18 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 c003f0e:	2301      	movs	r3, #1
 c003f10:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c003f14:	e000      	b.n	c003f18 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 c003f16:	bf00      	nop
    }
    if (ret == HAL_OK)
 c003f18:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c003f1c:	2b00      	cmp	r3, #0
 c003f1e:	d10d      	bne.n	c003f3c <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 c003f20:	4b33      	ldr	r3, [pc, #204]	@ (c003ff0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c003f22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c003f26:	f023 0107 	bic.w	r1, r3, #7
 c003f2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c003f32:	4a2f      	ldr	r2, [pc, #188]	@ (c003ff0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c003f34:	430b      	orrs	r3, r1
 c003f36:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 c003f3a:	e003      	b.n	c003f44 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c003f3c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c003f40:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 c003f44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 c003f4c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 c003f50:	65bb      	str	r3, [r7, #88]	@ 0x58
 c003f52:	2300      	movs	r3, #0
 c003f54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 c003f56:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 c003f5a:	460b      	mov	r3, r1
 c003f5c:	4313      	orrs	r3, r2
 c003f5e:	d04d      	beq.n	c003ffc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 c003f60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c003f68:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 c003f6c:	d028      	beq.n	c003fc0 <HAL_RCCEx_PeriphCLKConfig+0x614>
 c003f6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 c003f72:	d821      	bhi.n	c003fb8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 c003f74:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 c003f78:	d024      	beq.n	c003fc4 <HAL_RCCEx_PeriphCLKConfig+0x618>
 c003f7a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 c003f7e:	d81b      	bhi.n	c003fb8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 c003f80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c003f84:	d00e      	beq.n	c003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 c003f86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c003f8a:	d815      	bhi.n	c003fb8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 c003f8c:	2b00      	cmp	r3, #0
 c003f8e:	d01b      	beq.n	c003fc8 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 c003f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c003f94:	d110      	bne.n	c003fb8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 c003f96:	4b16      	ldr	r3, [pc, #88]	@ (c003ff0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c003f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c003f9a:	4a15      	ldr	r2, [pc, #84]	@ (c003ff0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c003f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c003fa0:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 c003fa2:	e012      	b.n	c003fca <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 c003fa4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003fa8:	332c      	adds	r3, #44	@ 0x2c
 c003faa:	4618      	mov	r0, r3
 c003fac:	f002 f946 	bl	c00623c <RCCEx_PLL3_Config>
 c003fb0:	4603      	mov	r3, r0
 c003fb2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c003fb6:	e008      	b.n	c003fca <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 c003fb8:	2301      	movs	r3, #1
 c003fba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c003fbe:	e004      	b.n	c003fca <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 c003fc0:	bf00      	nop
 c003fc2:	e002      	b.n	c003fca <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 c003fc4:	bf00      	nop
 c003fc6:	e000      	b.n	c003fca <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 c003fc8:	bf00      	nop
    }
    if (ret == HAL_OK)
 c003fca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c003fce:	2b00      	cmp	r3, #0
 c003fd0:	d110      	bne.n	c003ff4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 c003fd2:	4b07      	ldr	r3, [pc, #28]	@ (c003ff0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c003fd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c003fd8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 c003fdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c003fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c003fe4:	4a02      	ldr	r2, [pc, #8]	@ (c003ff0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 c003fe6:	430b      	orrs	r3, r1
 c003fe8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 c003fec:	e006      	b.n	c003ffc <HAL_RCCEx_PeriphCLKConfig+0x650>
 c003fee:	bf00      	nop
 c003ff0:	56020c00 	.word	0x56020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 c003ff4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c003ff8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 c003ffc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004000:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004004:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 c004008:	653b      	str	r3, [r7, #80]	@ 0x50
 c00400a:	2300      	movs	r3, #0
 c00400c:	657b      	str	r3, [r7, #84]	@ 0x54
 c00400e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 c004012:	460b      	mov	r3, r1
 c004014:	4313      	orrs	r3, r2
 c004016:	f000 80b5 	beq.w	c004184 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 c00401a:	2300      	movs	r3, #0
 c00401c:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c004020:	4b9d      	ldr	r3, [pc, #628]	@ (c004298 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c004022:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c004026:	f003 0304 	and.w	r3, r3, #4
 c00402a:	2b00      	cmp	r3, #0
 c00402c:	d113      	bne.n	c004056 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c00402e:	4b9a      	ldr	r3, [pc, #616]	@ (c004298 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c004030:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c004034:	4a98      	ldr	r2, [pc, #608]	@ (c004298 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c004036:	f043 0304 	orr.w	r3, r3, #4
 c00403a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c00403e:	4b96      	ldr	r3, [pc, #600]	@ (c004298 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c004040:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c004044:	f003 0304 	and.w	r3, r3, #4
 c004048:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 c00404c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 c004050:	2301      	movs	r3, #1
 c004052:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 c004056:	4b91      	ldr	r3, [pc, #580]	@ (c00429c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 c004058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00405a:	4a90      	ldr	r2, [pc, #576]	@ (c00429c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 c00405c:	f043 0301 	orr.w	r3, r3, #1
 c004060:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 c004062:	f7fd fabd 	bl	c0015e0 <HAL_GetTick>
 c004066:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c00406a:	e00b      	b.n	c004084 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c00406c:	f7fd fab8 	bl	c0015e0 <HAL_GetTick>
 c004070:	4602      	mov	r2, r0
 c004072:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 c004076:	1ad3      	subs	r3, r2, r3
 c004078:	2b02      	cmp	r3, #2
 c00407a:	d903      	bls.n	c004084 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 c00407c:	2303      	movs	r3, #3
 c00407e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c004082:	e005      	b.n	c004090 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 c004084:	4b85      	ldr	r3, [pc, #532]	@ (c00429c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 c004086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c004088:	f003 0301 	and.w	r3, r3, #1
 c00408c:	2b00      	cmp	r3, #0
 c00408e:	d0ed      	beq.n	c00406c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 c004090:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c004094:	2b00      	cmp	r3, #0
 c004096:	d165      	bne.n	c004164 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 c004098:	4b7f      	ldr	r3, [pc, #508]	@ (c004298 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c00409a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00409e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 c0040a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 c0040a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 c0040aa:	2b00      	cmp	r3, #0
 c0040ac:	d023      	beq.n	c0040f6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 c0040ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0040b2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 c0040b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 c0040ba:	4293      	cmp	r3, r2
 c0040bc:	d01b      	beq.n	c0040f6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 c0040be:	4b76      	ldr	r3, [pc, #472]	@ (c004298 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c0040c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0040c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 c0040c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 c0040cc:	4b72      	ldr	r3, [pc, #456]	@ (c004298 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c0040ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0040d2:	4a71      	ldr	r2, [pc, #452]	@ (c004298 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c0040d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c0040d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 c0040dc:	4b6e      	ldr	r3, [pc, #440]	@ (c004298 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c0040de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0040e2:	4a6d      	ldr	r2, [pc, #436]	@ (c004298 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c0040e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 c0040e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 c0040ec:	4a6a      	ldr	r2, [pc, #424]	@ (c004298 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c0040ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 c0040f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 c0040f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 c0040fa:	f003 0301 	and.w	r3, r3, #1
 c0040fe:	2b00      	cmp	r3, #0
 c004100:	d019      	beq.n	c004136 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c004102:	f7fd fa6d 	bl	c0015e0 <HAL_GetTick>
 c004106:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c00410a:	e00d      	b.n	c004128 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c00410c:	f7fd fa68 	bl	c0015e0 <HAL_GetTick>
 c004110:	4602      	mov	r2, r0
 c004112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 c004116:	1ad2      	subs	r2, r2, r3
 c004118:	f241 3388 	movw	r3, #5000	@ 0x1388
 c00411c:	429a      	cmp	r2, r3
 c00411e:	d903      	bls.n	c004128 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 c004120:	2303      	movs	r3, #3
 c004122:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 c004126:	e006      	b.n	c004136 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c004128:	4b5b      	ldr	r3, [pc, #364]	@ (c004298 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c00412a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00412e:	f003 0302 	and.w	r3, r3, #2
 c004132:	2b00      	cmp	r3, #0
 c004134:	d0ea      	beq.n	c00410c <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 c004136:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00413a:	2b00      	cmp	r3, #0
 c00413c:	d10d      	bne.n	c00415a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 c00413e:	4b56      	ldr	r3, [pc, #344]	@ (c004298 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c004140:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c004144:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 c004148:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00414c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 c004150:	4a51      	ldr	r2, [pc, #324]	@ (c004298 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c004152:	430b      	orrs	r3, r1
 c004154:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 c004158:	e008      	b.n	c00416c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 c00415a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00415e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 c004162:	e003      	b.n	c00416c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004164:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c004168:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c00416c:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 c004170:	2b01      	cmp	r3, #1
 c004172:	d107      	bne.n	c004184 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c004174:	4b48      	ldr	r3, [pc, #288]	@ (c004298 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c004176:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 c00417a:	4a47      	ldr	r2, [pc, #284]	@ (c004298 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c00417c:	f023 0304 	bic.w	r3, r3, #4
 c004180:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 c004184:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004188:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00418c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 c004190:	64bb      	str	r3, [r7, #72]	@ 0x48
 c004192:	2300      	movs	r3, #0
 c004194:	64fb      	str	r3, [r7, #76]	@ 0x4c
 c004196:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 c00419a:	460b      	mov	r3, r1
 c00419c:	4313      	orrs	r3, r2
 c00419e:	d042      	beq.n	c004226 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 c0041a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0041a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 c0041a8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 c0041ac:	d022      	beq.n	c0041f4 <HAL_RCCEx_PeriphCLKConfig+0x848>
 c0041ae:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 c0041b2:	d81b      	bhi.n	c0041ec <HAL_RCCEx_PeriphCLKConfig+0x840>
 c0041b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c0041b8:	d011      	beq.n	c0041de <HAL_RCCEx_PeriphCLKConfig+0x832>
 c0041ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c0041be:	d815      	bhi.n	c0041ec <HAL_RCCEx_PeriphCLKConfig+0x840>
 c0041c0:	2b00      	cmp	r3, #0
 c0041c2:	d019      	beq.n	c0041f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 c0041c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 c0041c8:	d110      	bne.n	c0041ec <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c0041ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0041ce:	3308      	adds	r3, #8
 c0041d0:	4618      	mov	r0, r3
 c0041d2:	f001 ff9b 	bl	c00610c <RCCEx_PLL2_Config>
 c0041d6:	4603      	mov	r3, r0
 c0041d8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c0041dc:	e00d      	b.n	c0041fa <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c0041de:	4b2e      	ldr	r3, [pc, #184]	@ (c004298 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c0041e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0041e2:	4a2d      	ldr	r2, [pc, #180]	@ (c004298 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c0041e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 c0041e8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 c0041ea:	e006      	b.n	c0041fa <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 c0041ec:	2301      	movs	r3, #1
 c0041ee:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c0041f2:	e002      	b.n	c0041fa <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 c0041f4:	bf00      	nop
 c0041f6:	e000      	b.n	c0041fa <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 c0041f8:	bf00      	nop
    }
    if (ret == HAL_OK)
 c0041fa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c0041fe:	2b00      	cmp	r3, #0
 c004200:	d10d      	bne.n	c00421e <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 c004202:	4b25      	ldr	r3, [pc, #148]	@ (c004298 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c004204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c004208:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 c00420c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004210:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 c004214:	4a20      	ldr	r2, [pc, #128]	@ (c004298 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c004216:	430b      	orrs	r3, r1
 c004218:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 c00421c:	e003      	b.n	c004226 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00421e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c004222:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 c004226:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00422a:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00422e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 c004232:	643b      	str	r3, [r7, #64]	@ 0x40
 c004234:	2300      	movs	r3, #0
 c004236:	647b      	str	r3, [r7, #68]	@ 0x44
 c004238:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 c00423c:	460b      	mov	r3, r1
 c00423e:	4313      	orrs	r3, r2
 c004240:	d032      	beq.n	c0042a8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 c004242:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004246:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 c00424a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c00424e:	d00b      	beq.n	c004268 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 c004250:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c004254:	d804      	bhi.n	c004260 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 c004256:	2b00      	cmp	r3, #0
 c004258:	d008      	beq.n	c00426c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 c00425a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 c00425e:	d007      	beq.n	c004270 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 c004260:	2301      	movs	r3, #1
 c004262:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c004266:	e004      	b.n	c004272 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 c004268:	bf00      	nop
 c00426a:	e002      	b.n	c004272 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 c00426c:	bf00      	nop
 c00426e:	e000      	b.n	c004272 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 c004270:	bf00      	nop
    }
    if (ret == HAL_OK)
 c004272:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c004276:	2b00      	cmp	r3, #0
 c004278:	d112      	bne.n	c0042a0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 c00427a:	4b07      	ldr	r3, [pc, #28]	@ (c004298 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c00427c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c004280:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 c004284:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004288:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 c00428c:	4a02      	ldr	r2, [pc, #8]	@ (c004298 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 c00428e:	430b      	orrs	r3, r1
 c004290:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 c004294:	e008      	b.n	c0042a8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 c004296:	bf00      	nop
 c004298:	56020c00 	.word	0x56020c00
 c00429c:	56020800 	.word	0x56020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0042a0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c0042a4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 c0042a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0042ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0042b0:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 c0042b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 c0042b6:	2300      	movs	r3, #0
 c0042b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 c0042ba:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 c0042be:	460b      	mov	r3, r1
 c0042c0:	4313      	orrs	r3, r2
 c0042c2:	d00c      	beq.n	c0042de <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 c0042c4:	4b98      	ldr	r3, [pc, #608]	@ (c004528 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c0042c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c0042ca:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 c0042ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0042d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 c0042d6:	4a94      	ldr	r2, [pc, #592]	@ (c004528 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c0042d8:	430b      	orrs	r3, r1
 c0042da:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 c0042de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0042e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0042e6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 c0042ea:	633b      	str	r3, [r7, #48]	@ 0x30
 c0042ec:	2300      	movs	r3, #0
 c0042ee:	637b      	str	r3, [r7, #52]	@ 0x34
 c0042f0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 c0042f4:	460b      	mov	r3, r1
 c0042f6:	4313      	orrs	r3, r2
 c0042f8:	d019      	beq.n	c00432e <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 c0042fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0042fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 c004302:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 c004306:	d105      	bne.n	c004314 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 c004308:	4b87      	ldr	r3, [pc, #540]	@ (c004528 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00430a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00430c:	4a86      	ldr	r2, [pc, #536]	@ (c004528 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00430e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c004312:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 c004314:	4b84      	ldr	r3, [pc, #528]	@ (c004528 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c004316:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c00431a:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 c00431e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004322:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 c004326:	4a80      	ldr	r2, [pc, #512]	@ (c004528 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c004328:	430b      	orrs	r3, r1
 c00432a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 c00432e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004332:	e9d3 2300 	ldrd	r2, r3, [r3]
 c004336:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 c00433a:	62bb      	str	r3, [r7, #40]	@ 0x28
 c00433c:	2300      	movs	r3, #0
 c00433e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 c004340:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 c004344:	460b      	mov	r3, r1
 c004346:	4313      	orrs	r3, r2
 c004348:	d00c      	beq.n	c004364 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 c00434a:	4b77      	ldr	r3, [pc, #476]	@ (c004528 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00434c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c004350:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 c004354:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004358:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 c00435c:	4972      	ldr	r1, [pc, #456]	@ (c004528 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00435e:	4313      	orrs	r3, r2
 c004360:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 c004364:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004368:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00436c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 c004370:	623b      	str	r3, [r7, #32]
 c004372:	2300      	movs	r3, #0
 c004374:	627b      	str	r3, [r7, #36]	@ 0x24
 c004376:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 c00437a:	460b      	mov	r3, r1
 c00437c:	4313      	orrs	r3, r2
 c00437e:	d00c      	beq.n	c00439a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 c004380:	4b69      	ldr	r3, [pc, #420]	@ (c004528 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c004382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c004386:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 c00438a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00438e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 c004392:	4965      	ldr	r1, [pc, #404]	@ (c004528 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c004394:	4313      	orrs	r3, r2
 c004396:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 c00439a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00439e:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0043a2:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 c0043a6:	61bb      	str	r3, [r7, #24]
 c0043a8:	2300      	movs	r3, #0
 c0043aa:	61fb      	str	r3, [r7, #28]
 c0043ac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 c0043b0:	460b      	mov	r3, r1
 c0043b2:	4313      	orrs	r3, r2
 c0043b4:	d00c      	beq.n	c0043d0 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 c0043b6:	4b5c      	ldr	r3, [pc, #368]	@ (c004528 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c0043b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c0043bc:	f023 0218 	bic.w	r2, r3, #24
 c0043c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0043c4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 c0043c8:	4957      	ldr	r1, [pc, #348]	@ (c004528 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c0043ca:	4313      	orrs	r3, r2
 c0043cc:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 c0043d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0043d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0043d8:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 c0043dc:	613b      	str	r3, [r7, #16]
 c0043de:	2300      	movs	r3, #0
 c0043e0:	617b      	str	r3, [r7, #20]
 c0043e2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 c0043e6:	460b      	mov	r3, r1
 c0043e8:	4313      	orrs	r3, r2
 c0043ea:	d032      	beq.n	c004452 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 c0043ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0043f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 c0043f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 c0043f8:	d105      	bne.n	c004406 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c0043fa:	4b4b      	ldr	r3, [pc, #300]	@ (c004528 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c0043fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0043fe:	4a4a      	ldr	r2, [pc, #296]	@ (c004528 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c004400:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 c004404:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 c004406:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00440a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 c00440e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 c004412:	d108      	bne.n	c004426 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c004414:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004418:	3308      	adds	r3, #8
 c00441a:	4618      	mov	r0, r3
 c00441c:	f001 fe76 	bl	c00610c <RCCEx_PLL2_Config>
 c004420:	4603      	mov	r3, r0
 c004422:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 c004426:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00442a:	2b00      	cmp	r3, #0
 c00442c:	d10d      	bne.n	c00444a <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 c00442e:	4b3e      	ldr	r3, [pc, #248]	@ (c004528 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c004430:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c004434:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 c004438:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00443c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 c004440:	4939      	ldr	r1, [pc, #228]	@ (c004528 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c004442:	4313      	orrs	r3, r2
 c004444:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 c004448:	e003      	b.n	c004452 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00444a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c00444e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 c004452:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004456:	e9d3 2300 	ldrd	r2, r3, [r3]
 c00445a:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 c00445e:	60bb      	str	r3, [r7, #8]
 c004460:	2300      	movs	r3, #0
 c004462:	60fb      	str	r3, [r7, #12]
 c004464:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 c004468:	460b      	mov	r3, r1
 c00446a:	4313      	orrs	r3, r2
 c00446c:	d03a      	beq.n	c0044e4 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 c00446e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c004472:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 c004476:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 c00447a:	d00e      	beq.n	c00449a <HAL_RCCEx_PeriphCLKConfig+0xaee>
 c00447c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 c004480:	d815      	bhi.n	c0044ae <HAL_RCCEx_PeriphCLKConfig+0xb02>
 c004482:	2b00      	cmp	r3, #0
 c004484:	d017      	beq.n	c0044b6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 c004486:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 c00448a:	d110      	bne.n	c0044ae <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 c00448c:	4b26      	ldr	r3, [pc, #152]	@ (c004528 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c00448e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c004490:	4a25      	ldr	r2, [pc, #148]	@ (c004528 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c004492:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 c004496:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 c004498:	e00e      	b.n	c0044b8 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 c00449a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00449e:	3308      	adds	r3, #8
 c0044a0:	4618      	mov	r0, r3
 c0044a2:	f001 fe33 	bl	c00610c <RCCEx_PLL2_Config>
 c0044a6:	4603      	mov	r3, r0
 c0044a8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 c0044ac:	e004      	b.n	c0044b8 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 c0044ae:	2301      	movs	r3, #1
 c0044b0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 c0044b4:	e000      	b.n	c0044b8 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 c0044b6:	bf00      	nop
    }
    if (ret == HAL_OK)
 c0044b8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c0044bc:	2b00      	cmp	r3, #0
 c0044be:	d10d      	bne.n	c0044dc <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 c0044c0:	4b19      	ldr	r3, [pc, #100]	@ (c004528 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c0044c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c0044c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 c0044ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0044ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 c0044d2:	4915      	ldr	r1, [pc, #84]	@ (c004528 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c0044d4:	4313      	orrs	r3, r2
 c0044d6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 c0044da:	e003      	b.n	c0044e4 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0044dc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 c0044e0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 c0044e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c0044e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 c0044ec:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 c0044f0:	603b      	str	r3, [r7, #0]
 c0044f2:	2300      	movs	r3, #0
 c0044f4:	607b      	str	r3, [r7, #4]
 c0044f6:	e9d7 1200 	ldrd	r1, r2, [r7]
 c0044fa:	460b      	mov	r3, r1
 c0044fc:	4313      	orrs	r3, r2
 c0044fe:	d00c      	beq.n	c00451a <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 c004500:	4b09      	ldr	r3, [pc, #36]	@ (c004528 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c004502:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c004506:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 c00450a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 c00450e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 c004512:	4905      	ldr	r1, [pc, #20]	@ (c004528 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 c004514:	4313      	orrs	r3, r2
 c004516:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 c00451a:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 c00451e:	4618      	mov	r0, r3
 c004520:	37e8      	adds	r7, #232	@ 0xe8
 c004522:	46bd      	mov	sp, r7
 c004524:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 c004528:	56020c00 	.word	0x56020c00

0c00452c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 c00452c:	b480      	push	{r7}
 c00452e:	b089      	sub	sp, #36	@ 0x24
 c004530:	af00      	add	r7, sp, #0
 c004532:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 c004534:	4ba6      	ldr	r3, [pc, #664]	@ (c0047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c004536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c004538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c00453c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 c00453e:	4ba4      	ldr	r3, [pc, #656]	@ (c0047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c004540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c004542:	f003 0303 	and.w	r3, r3, #3
 c004546:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 c004548:	4ba1      	ldr	r3, [pc, #644]	@ (c0047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c00454a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00454c:	0a1b      	lsrs	r3, r3, #8
 c00454e:	f003 030f 	and.w	r3, r3, #15
 c004552:	3301      	adds	r3, #1
 c004554:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 c004556:	4b9e      	ldr	r3, [pc, #632]	@ (c0047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c004558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00455a:	091b      	lsrs	r3, r3, #4
 c00455c:	f003 0301 	and.w	r3, r3, #1
 c004560:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 c004562:	4b9b      	ldr	r3, [pc, #620]	@ (c0047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c004564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 c004566:	08db      	lsrs	r3, r3, #3
 c004568:	f3c3 030c 	ubfx	r3, r3, #0, #13
 c00456c:	68fa      	ldr	r2, [r7, #12]
 c00456e:	fb02 f303 	mul.w	r3, r2, r3
 c004572:	ee07 3a90 	vmov	s15, r3
 c004576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c00457a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 c00457e:	697b      	ldr	r3, [r7, #20]
 c004580:	2b03      	cmp	r3, #3
 c004582:	d062      	beq.n	c00464a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 c004584:	697b      	ldr	r3, [r7, #20]
 c004586:	2b03      	cmp	r3, #3
 c004588:	f200 8081 	bhi.w	c00468e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 c00458c:	697b      	ldr	r3, [r7, #20]
 c00458e:	2b01      	cmp	r3, #1
 c004590:	d024      	beq.n	c0045dc <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 c004592:	697b      	ldr	r3, [r7, #20]
 c004594:	2b02      	cmp	r3, #2
 c004596:	d17a      	bne.n	c00468e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c004598:	693b      	ldr	r3, [r7, #16]
 c00459a:	ee07 3a90 	vmov	s15, r3
 c00459e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c0045a2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ c0047d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 c0045a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c0045aa:	4b89      	ldr	r3, [pc, #548]	@ (c0047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c0045ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c0045ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c0045b2:	ee07 3a90 	vmov	s15, r3
 c0045b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 c0045ba:	ed97 6a02 	vldr	s12, [r7, #8]
 c0045be:	eddf 5a86 	vldr	s11, [pc, #536]	@ c0047d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 c0045c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0045c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 c0045ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c0045ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c0045d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 c0045d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c0045da:	e08f      	b.n	c0046fc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 c0045dc:	4b7c      	ldr	r3, [pc, #496]	@ (c0047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c0045de:	689b      	ldr	r3, [r3, #8]
 c0045e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c0045e4:	2b00      	cmp	r3, #0
 c0045e6:	d005      	beq.n	c0045f4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 c0045e8:	4b79      	ldr	r3, [pc, #484]	@ (c0047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c0045ea:	689b      	ldr	r3, [r3, #8]
 c0045ec:	0f1b      	lsrs	r3, r3, #28
 c0045ee:	f003 030f 	and.w	r3, r3, #15
 c0045f2:	e006      	b.n	c004602 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 c0045f4:	4b76      	ldr	r3, [pc, #472]	@ (c0047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c0045f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c0045fa:	041b      	lsls	r3, r3, #16
 c0045fc:	0f1b      	lsrs	r3, r3, #28
 c0045fe:	f003 030f 	and.w	r3, r3, #15
 c004602:	4a76      	ldr	r2, [pc, #472]	@ (c0047dc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 c004604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c004608:	ee07 3a90 	vmov	s15, r3
 c00460c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c004610:	693b      	ldr	r3, [r7, #16]
 c004612:	ee07 3a90 	vmov	s15, r3
 c004616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c00461a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 c00461e:	69bb      	ldr	r3, [r7, #24]
 c004620:	ee07 3a90 	vmov	s15, r3
 c004624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c004628:	ed97 6a02 	vldr	s12, [r7, #8]
 c00462c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ c0047d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 c004630:	eec6 7a25 	vdiv.f32	s15, s12, s11
 c004634:	ee76 7aa7 	vadd.f32	s15, s13, s15
 c004638:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c00463c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 c004640:	ee67 7a27 	vmul.f32	s15, s14, s15
 c004644:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c004648:	e058      	b.n	c0046fc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c00464a:	693b      	ldr	r3, [r7, #16]
 c00464c:	ee07 3a90 	vmov	s15, r3
 c004650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c004654:	eddf 6a5f 	vldr	s13, [pc, #380]	@ c0047d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 c004658:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c00465c:	4b5c      	ldr	r3, [pc, #368]	@ (c0047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c00465e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c004660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c004664:	ee07 3a90 	vmov	s15, r3
 c004668:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 c00466c:	ed97 6a02 	vldr	s12, [r7, #8]
 c004670:	eddf 5a59 	vldr	s11, [pc, #356]	@ c0047d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 c004674:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c004678:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 c00467c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c004680:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 c004684:	ee67 7a27 	vmul.f32	s15, s14, s15
 c004688:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c00468c:	e036      	b.n	c0046fc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 c00468e:	4b50      	ldr	r3, [pc, #320]	@ (c0047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c004690:	689b      	ldr	r3, [r3, #8]
 c004692:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c004696:	2b00      	cmp	r3, #0
 c004698:	d005      	beq.n	c0046a6 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 c00469a:	4b4d      	ldr	r3, [pc, #308]	@ (c0047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c00469c:	689b      	ldr	r3, [r3, #8]
 c00469e:	0f1b      	lsrs	r3, r3, #28
 c0046a0:	f003 030f 	and.w	r3, r3, #15
 c0046a4:	e006      	b.n	c0046b4 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 c0046a6:	4b4a      	ldr	r3, [pc, #296]	@ (c0047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c0046a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c0046ac:	041b      	lsls	r3, r3, #16
 c0046ae:	0f1b      	lsrs	r3, r3, #28
 c0046b0:	f003 030f 	and.w	r3, r3, #15
 c0046b4:	4a49      	ldr	r2, [pc, #292]	@ (c0047dc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 c0046b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0046ba:	ee07 3a90 	vmov	s15, r3
 c0046be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c0046c2:	693b      	ldr	r3, [r7, #16]
 c0046c4:	ee07 3a90 	vmov	s15, r3
 c0046c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c0046cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 c0046d0:	69bb      	ldr	r3, [r7, #24]
 c0046d2:	ee07 3a90 	vmov	s15, r3
 c0046d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c0046da:	ed97 6a02 	vldr	s12, [r7, #8]
 c0046de:	eddf 5a3e 	vldr	s11, [pc, #248]	@ c0047d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 c0046e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 c0046e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 c0046ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c0046ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 c0046f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 c0046f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c0046fa:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 c0046fc:	4b34      	ldr	r3, [pc, #208]	@ (c0047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c0046fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c004700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 c004704:	2b00      	cmp	r3, #0
 c004706:	d017      	beq.n	c004738 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 c004708:	4b31      	ldr	r3, [pc, #196]	@ (c0047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c00470a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c00470c:	0a5b      	lsrs	r3, r3, #9
 c00470e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c004712:	ee07 3a90 	vmov	s15, r3
 c004716:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 c00471a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c00471e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 c004722:	edd7 6a07 	vldr	s13, [r7, #28]
 c004726:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c00472a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c00472e:	ee17 2a90 	vmov	r2, s15
 c004732:	687b      	ldr	r3, [r7, #4]
 c004734:	601a      	str	r2, [r3, #0]
 c004736:	e002      	b.n	c00473e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 c004738:	687b      	ldr	r3, [r7, #4]
 c00473a:	2200      	movs	r2, #0
 c00473c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 c00473e:	4b24      	ldr	r3, [pc, #144]	@ (c0047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c004740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c004742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c004746:	2b00      	cmp	r3, #0
 c004748:	d017      	beq.n	c00477a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 c00474a:	4b21      	ldr	r3, [pc, #132]	@ (c0047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c00474c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c00474e:	0c1b      	lsrs	r3, r3, #16
 c004750:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c004754:	ee07 3a90 	vmov	s15, r3
 c004758:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 c00475c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c004760:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 c004764:	edd7 6a07 	vldr	s13, [r7, #28]
 c004768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c00476c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c004770:	ee17 2a90 	vmov	r2, s15
 c004774:	687b      	ldr	r3, [r7, #4]
 c004776:	605a      	str	r2, [r3, #4]
 c004778:	e002      	b.n	c004780 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 c00477a:	687b      	ldr	r3, [r7, #4]
 c00477c:	2200      	movs	r2, #0
 c00477e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 c004780:	4b13      	ldr	r3, [pc, #76]	@ (c0047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c004782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c004784:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 c004788:	2b00      	cmp	r3, #0
 c00478a:	d017      	beq.n	c0047bc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 c00478c:	4b10      	ldr	r3, [pc, #64]	@ (c0047d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 c00478e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 c004790:	0e1b      	lsrs	r3, r3, #24
 c004792:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c004796:	ee07 3a90 	vmov	s15, r3
 c00479a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 c00479e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c0047a2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 c0047a6:	edd7 6a07 	vldr	s13, [r7, #28]
 c0047aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c0047ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c0047b2:	ee17 2a90 	vmov	r2, s15
 c0047b6:	687b      	ldr	r3, [r7, #4]
 c0047b8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 c0047ba:	e002      	b.n	c0047c2 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 c0047bc:	687b      	ldr	r3, [r7, #4]
 c0047be:	2200      	movs	r2, #0
 c0047c0:	609a      	str	r2, [r3, #8]
}
 c0047c2:	bf00      	nop
 c0047c4:	3724      	adds	r7, #36	@ 0x24
 c0047c6:	46bd      	mov	sp, r7
 c0047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0047cc:	4770      	bx	lr
 c0047ce:	bf00      	nop
 c0047d0:	56020c00 	.word	0x56020c00
 c0047d4:	4b742400 	.word	0x4b742400
 c0047d8:	46000000 	.word	0x46000000
 c0047dc:	0c006fc8 	.word	0x0c006fc8

0c0047e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 c0047e0:	b480      	push	{r7}
 c0047e2:	b089      	sub	sp, #36	@ 0x24
 c0047e4:	af00      	add	r7, sp, #0
 c0047e6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 c0047e8:	4ba6      	ldr	r3, [pc, #664]	@ (c004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c0047ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c0047ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c0047f0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 c0047f2:	4ba4      	ldr	r3, [pc, #656]	@ (c004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c0047f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c0047f6:	f003 0303 	and.w	r3, r3, #3
 c0047fa:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 c0047fc:	4ba1      	ldr	r3, [pc, #644]	@ (c004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c0047fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c004800:	0a1b      	lsrs	r3, r3, #8
 c004802:	f003 030f 	and.w	r3, r3, #15
 c004806:	3301      	adds	r3, #1
 c004808:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 c00480a:	4b9e      	ldr	r3, [pc, #632]	@ (c004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c00480c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c00480e:	091b      	lsrs	r3, r3, #4
 c004810:	f003 0301 	and.w	r3, r3, #1
 c004814:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 c004816:	4b9b      	ldr	r3, [pc, #620]	@ (c004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c004818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 c00481a:	08db      	lsrs	r3, r3, #3
 c00481c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 c004820:	68fa      	ldr	r2, [r7, #12]
 c004822:	fb02 f303 	mul.w	r3, r2, r3
 c004826:	ee07 3a90 	vmov	s15, r3
 c00482a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c00482e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 c004832:	697b      	ldr	r3, [r7, #20]
 c004834:	2b03      	cmp	r3, #3
 c004836:	d062      	beq.n	c0048fe <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 c004838:	697b      	ldr	r3, [r7, #20]
 c00483a:	2b03      	cmp	r3, #3
 c00483c:	f200 8081 	bhi.w	c004942 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 c004840:	697b      	ldr	r3, [r7, #20]
 c004842:	2b01      	cmp	r3, #1
 c004844:	d024      	beq.n	c004890 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 c004846:	697b      	ldr	r3, [r7, #20]
 c004848:	2b02      	cmp	r3, #2
 c00484a:	d17a      	bne.n	c004942 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 c00484c:	693b      	ldr	r3, [r7, #16]
 c00484e:	ee07 3a90 	vmov	s15, r3
 c004852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c004856:	eddf 6a8c 	vldr	s13, [pc, #560]	@ c004a88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 c00485a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c00485e:	4b89      	ldr	r3, [pc, #548]	@ (c004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c004860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c004862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c004866:	ee07 3a90 	vmov	s15, r3
 c00486a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 c00486e:	ed97 6a02 	vldr	s12, [r7, #8]
 c004872:	eddf 5a86 	vldr	s11, [pc, #536]	@ c004a8c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 c004876:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 c00487a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 c00487e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c004882:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 c004886:	ee67 7a27 	vmul.f32	s15, s14, s15
 c00488a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c00488e:	e08f      	b.n	c0049b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 c004890:	4b7c      	ldr	r3, [pc, #496]	@ (c004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c004892:	689b      	ldr	r3, [r3, #8]
 c004894:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c004898:	2b00      	cmp	r3, #0
 c00489a:	d005      	beq.n	c0048a8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 c00489c:	4b79      	ldr	r3, [pc, #484]	@ (c004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c00489e:	689b      	ldr	r3, [r3, #8]
 c0048a0:	0f1b      	lsrs	r3, r3, #28
 c0048a2:	f003 030f 	and.w	r3, r3, #15
 c0048a6:	e006      	b.n	c0048b6 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 c0048a8:	4b76      	ldr	r3, [pc, #472]	@ (c004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c0048aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c0048ae:	041b      	lsls	r3, r3, #16
 c0048b0:	0f1b      	lsrs	r3, r3, #28
 c0048b2:	f003 030f 	and.w	r3, r3, #15
 c0048b6:	4a76      	ldr	r2, [pc, #472]	@ (c004a90 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 c0048b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0048bc:	ee07 3a90 	vmov	s15, r3
 c0048c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c0048c4:	693b      	ldr	r3, [r7, #16]
 c0048c6:	ee07 3a90 	vmov	s15, r3
 c0048ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c0048ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 c0048d2:	69bb      	ldr	r3, [r7, #24]
 c0048d4:	ee07 3a90 	vmov	s15, r3
 c0048d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c0048dc:	ed97 6a02 	vldr	s12, [r7, #8]
 c0048e0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ c004a8c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 c0048e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 c0048e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 c0048ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c0048f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 c0048f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 c0048f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c0048fc:	e058      	b.n	c0049b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 c0048fe:	693b      	ldr	r3, [r7, #16]
 c004900:	ee07 3a90 	vmov	s15, r3
 c004904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c004908:	eddf 6a5f 	vldr	s13, [pc, #380]	@ c004a88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 c00490c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c004910:	4b5c      	ldr	r3, [pc, #368]	@ (c004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c004912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c004914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c004918:	ee07 3a90 	vmov	s15, r3
 c00491c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 c004920:	ed97 6a02 	vldr	s12, [r7, #8]
 c004924:	eddf 5a59 	vldr	s11, [pc, #356]	@ c004a8c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 c004928:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 c00492c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 c004930:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c004934:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 c004938:	ee67 7a27 	vmul.f32	s15, s14, s15
 c00493c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c004940:	e036      	b.n	c0049b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 c004942:	4b50      	ldr	r3, [pc, #320]	@ (c004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c004944:	689b      	ldr	r3, [r3, #8]
 c004946:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00494a:	2b00      	cmp	r3, #0
 c00494c:	d005      	beq.n	c00495a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 c00494e:	4b4d      	ldr	r3, [pc, #308]	@ (c004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c004950:	689b      	ldr	r3, [r3, #8]
 c004952:	0f1b      	lsrs	r3, r3, #28
 c004954:	f003 030f 	and.w	r3, r3, #15
 c004958:	e006      	b.n	c004968 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 c00495a:	4b4a      	ldr	r3, [pc, #296]	@ (c004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c00495c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c004960:	041b      	lsls	r3, r3, #16
 c004962:	0f1b      	lsrs	r3, r3, #28
 c004964:	f003 030f 	and.w	r3, r3, #15
 c004968:	4a49      	ldr	r2, [pc, #292]	@ (c004a90 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 c00496a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00496e:	ee07 3a90 	vmov	s15, r3
 c004972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c004976:	693b      	ldr	r3, [r7, #16]
 c004978:	ee07 3a90 	vmov	s15, r3
 c00497c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c004980:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 c004984:	69bb      	ldr	r3, [r7, #24]
 c004986:	ee07 3a90 	vmov	s15, r3
 c00498a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c00498e:	ed97 6a02 	vldr	s12, [r7, #8]
 c004992:	eddf 5a3e 	vldr	s11, [pc, #248]	@ c004a8c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 c004996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 c00499a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 c00499e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c0049a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 c0049a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 c0049aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c0049ae:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 c0049b0:	4b34      	ldr	r3, [pc, #208]	@ (c004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c0049b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c0049b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 c0049b8:	2b00      	cmp	r3, #0
 c0049ba:	d017      	beq.n	c0049ec <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 c0049bc:	4b31      	ldr	r3, [pc, #196]	@ (c004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c0049be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c0049c0:	0a5b      	lsrs	r3, r3, #9
 c0049c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c0049c6:	ee07 3a90 	vmov	s15, r3
 c0049ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 c0049ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c0049d2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 c0049d6:	edd7 6a07 	vldr	s13, [r7, #28]
 c0049da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c0049de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c0049e2:	ee17 2a90 	vmov	r2, s15
 c0049e6:	687b      	ldr	r3, [r7, #4]
 c0049e8:	601a      	str	r2, [r3, #0]
 c0049ea:	e002      	b.n	c0049f2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 c0049ec:	687b      	ldr	r3, [r7, #4]
 c0049ee:	2200      	movs	r2, #0
 c0049f0:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 c0049f2:	4b24      	ldr	r3, [pc, #144]	@ (c004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c0049f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c0049f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c0049fa:	2b00      	cmp	r3, #0
 c0049fc:	d017      	beq.n	c004a2e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 c0049fe:	4b21      	ldr	r3, [pc, #132]	@ (c004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c004a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c004a02:	0c1b      	lsrs	r3, r3, #16
 c004a04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c004a08:	ee07 3a90 	vmov	s15, r3
 c004a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 c004a10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c004a14:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 c004a18:	edd7 6a07 	vldr	s13, [r7, #28]
 c004a1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c004a20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c004a24:	ee17 2a90 	vmov	r2, s15
 c004a28:	687b      	ldr	r3, [r7, #4]
 c004a2a:	605a      	str	r2, [r3, #4]
 c004a2c:	e002      	b.n	c004a34 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 c004a2e:	687b      	ldr	r3, [r7, #4]
 c004a30:	2200      	movs	r2, #0
 c004a32:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 c004a34:	4b13      	ldr	r3, [pc, #76]	@ (c004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c004a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c004a38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 c004a3c:	2b00      	cmp	r3, #0
 c004a3e:	d017      	beq.n	c004a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 c004a40:	4b10      	ldr	r3, [pc, #64]	@ (c004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 c004a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 c004a44:	0e1b      	lsrs	r3, r3, #24
 c004a46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c004a4a:	ee07 3a90 	vmov	s15, r3
 c004a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 c004a52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c004a56:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 c004a5a:	edd7 6a07 	vldr	s13, [r7, #28]
 c004a5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c004a62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c004a66:	ee17 2a90 	vmov	r2, s15
 c004a6a:	687b      	ldr	r3, [r7, #4]
 c004a6c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 c004a6e:	e002      	b.n	c004a76 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 c004a70:	687b      	ldr	r3, [r7, #4]
 c004a72:	2200      	movs	r2, #0
 c004a74:	609a      	str	r2, [r3, #8]
}
 c004a76:	bf00      	nop
 c004a78:	3724      	adds	r7, #36	@ 0x24
 c004a7a:	46bd      	mov	sp, r7
 c004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004a80:	4770      	bx	lr
 c004a82:	bf00      	nop
 c004a84:	56020c00 	.word	0x56020c00
 c004a88:	4b742400 	.word	0x4b742400
 c004a8c:	46000000 	.word	0x46000000
 c004a90:	0c006fc8 	.word	0x0c006fc8

0c004a94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 c004a94:	b480      	push	{r7}
 c004a96:	b089      	sub	sp, #36	@ 0x24
 c004a98:	af00      	add	r7, sp, #0
 c004a9a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 c004a9c:	4ba6      	ldr	r3, [pc, #664]	@ (c004d38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c004a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 c004aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c004aa4:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 c004aa6:	4ba4      	ldr	r3, [pc, #656]	@ (c004d38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c004aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c004aaa:	f003 0303 	and.w	r3, r3, #3
 c004aae:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 c004ab0:	4ba1      	ldr	r3, [pc, #644]	@ (c004d38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c004ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c004ab4:	0a1b      	lsrs	r3, r3, #8
 c004ab6:	f003 030f 	and.w	r3, r3, #15
 c004aba:	3301      	adds	r3, #1
 c004abc:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 c004abe:	4b9e      	ldr	r3, [pc, #632]	@ (c004d38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c004ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c004ac2:	091b      	lsrs	r3, r3, #4
 c004ac4:	f003 0301 	and.w	r3, r3, #1
 c004ac8:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 c004aca:	4b9b      	ldr	r3, [pc, #620]	@ (c004d38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c004acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 c004ace:	08db      	lsrs	r3, r3, #3
 c004ad0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 c004ad4:	68fa      	ldr	r2, [r7, #12]
 c004ad6:	fb02 f303 	mul.w	r3, r2, r3
 c004ada:	ee07 3a90 	vmov	s15, r3
 c004ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c004ae2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 c004ae6:	697b      	ldr	r3, [r7, #20]
 c004ae8:	2b03      	cmp	r3, #3
 c004aea:	d062      	beq.n	c004bb2 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 c004aec:	697b      	ldr	r3, [r7, #20]
 c004aee:	2b03      	cmp	r3, #3
 c004af0:	f200 8081 	bhi.w	c004bf6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 c004af4:	697b      	ldr	r3, [r7, #20]
 c004af6:	2b01      	cmp	r3, #1
 c004af8:	d024      	beq.n	c004b44 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 c004afa:	697b      	ldr	r3, [r7, #20]
 c004afc:	2b02      	cmp	r3, #2
 c004afe:	d17a      	bne.n	c004bf6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 c004b00:	693b      	ldr	r3, [r7, #16]
 c004b02:	ee07 3a90 	vmov	s15, r3
 c004b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c004b0a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ c004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 c004b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c004b12:	4b89      	ldr	r3, [pc, #548]	@ (c004d38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c004b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 c004b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c004b1a:	ee07 3a90 	vmov	s15, r3
 c004b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 c004b22:	ed97 6a02 	vldr	s12, [r7, #8]
 c004b26:	eddf 5a86 	vldr	s11, [pc, #536]	@ c004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 c004b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 c004b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 c004b32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c004b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 c004b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 c004b3e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 c004b42:	e08f      	b.n	c004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 c004b44:	4b7c      	ldr	r3, [pc, #496]	@ (c004d38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c004b46:	689b      	ldr	r3, [r3, #8]
 c004b48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c004b4c:	2b00      	cmp	r3, #0
 c004b4e:	d005      	beq.n	c004b5c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 c004b50:	4b79      	ldr	r3, [pc, #484]	@ (c004d38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c004b52:	689b      	ldr	r3, [r3, #8]
 c004b54:	0f1b      	lsrs	r3, r3, #28
 c004b56:	f003 030f 	and.w	r3, r3, #15
 c004b5a:	e006      	b.n	c004b6a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 c004b5c:	4b76      	ldr	r3, [pc, #472]	@ (c004d38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c004b5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c004b62:	041b      	lsls	r3, r3, #16
 c004b64:	0f1b      	lsrs	r3, r3, #28
 c004b66:	f003 030f 	and.w	r3, r3, #15
 c004b6a:	4a76      	ldr	r2, [pc, #472]	@ (c004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 c004b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c004b70:	ee07 3a90 	vmov	s15, r3
 c004b74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c004b78:	693b      	ldr	r3, [r7, #16]
 c004b7a:	ee07 3a90 	vmov	s15, r3
 c004b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c004b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 c004b86:	69bb      	ldr	r3, [r7, #24]
 c004b88:	ee07 3a90 	vmov	s15, r3
 c004b8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c004b90:	ed97 6a02 	vldr	s12, [r7, #8]
 c004b94:	eddf 5a6a 	vldr	s11, [pc, #424]	@ c004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 c004b98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 c004b9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 c004ba0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c004ba4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 c004ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 c004bac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c004bb0:	e058      	b.n	c004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 c004bb2:	693b      	ldr	r3, [r7, #16]
 c004bb4:	ee07 3a90 	vmov	s15, r3
 c004bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c004bbc:	eddf 6a5f 	vldr	s13, [pc, #380]	@ c004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 c004bc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 c004bc4:	4b5c      	ldr	r3, [pc, #368]	@ (c004d38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c004bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 c004bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 c004bcc:	ee07 3a90 	vmov	s15, r3
 c004bd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 c004bd4:	ed97 6a02 	vldr	s12, [r7, #8]
 c004bd8:	eddf 5a59 	vldr	s11, [pc, #356]	@ c004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 c004bdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 c004be0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 c004be4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c004be8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 c004bec:	ee67 7a27 	vmul.f32	s15, s14, s15
 c004bf0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c004bf4:	e036      	b.n	c004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 c004bf6:	4b50      	ldr	r3, [pc, #320]	@ (c004d38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c004bf8:	689b      	ldr	r3, [r3, #8]
 c004bfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c004bfe:	2b00      	cmp	r3, #0
 c004c00:	d005      	beq.n	c004c0e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 c004c02:	4b4d      	ldr	r3, [pc, #308]	@ (c004d38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c004c04:	689b      	ldr	r3, [r3, #8]
 c004c06:	0f1b      	lsrs	r3, r3, #28
 c004c08:	f003 030f 	and.w	r3, r3, #15
 c004c0c:	e006      	b.n	c004c1c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 c004c0e:	4b4a      	ldr	r3, [pc, #296]	@ (c004d38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c004c10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c004c14:	041b      	lsls	r3, r3, #16
 c004c16:	0f1b      	lsrs	r3, r3, #28
 c004c18:	f003 030f 	and.w	r3, r3, #15
 c004c1c:	4a49      	ldr	r2, [pc, #292]	@ (c004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 c004c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c004c22:	ee07 3a90 	vmov	s15, r3
 c004c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c004c2a:	693b      	ldr	r3, [r7, #16]
 c004c2c:	ee07 3a90 	vmov	s15, r3
 c004c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 c004c34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 c004c38:	69bb      	ldr	r3, [r7, #24]
 c004c3a:	ee07 3a90 	vmov	s15, r3
 c004c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 c004c42:	ed97 6a02 	vldr	s12, [r7, #8]
 c004c46:	eddf 5a3e 	vldr	s11, [pc, #248]	@ c004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 c004c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 c004c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 c004c52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c004c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 c004c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 c004c5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 c004c62:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 c004c64:	4b34      	ldr	r3, [pc, #208]	@ (c004d38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c004c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c004c68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 c004c6c:	2b00      	cmp	r3, #0
 c004c6e:	d017      	beq.n	c004ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 c004c70:	4b31      	ldr	r3, [pc, #196]	@ (c004d38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c004c72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 c004c74:	0a5b      	lsrs	r3, r3, #9
 c004c76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c004c7a:	ee07 3a90 	vmov	s15, r3
 c004c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 c004c82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c004c86:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 c004c8a:	edd7 6a07 	vldr	s13, [r7, #28]
 c004c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c004c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c004c96:	ee17 2a90 	vmov	r2, s15
 c004c9a:	687b      	ldr	r3, [r7, #4]
 c004c9c:	601a      	str	r2, [r3, #0]
 c004c9e:	e002      	b.n	c004ca6 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 c004ca0:	687b      	ldr	r3, [r7, #4]
 c004ca2:	2200      	movs	r2, #0
 c004ca4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 c004ca6:	4b24      	ldr	r3, [pc, #144]	@ (c004d38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c004ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c004caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c004cae:	2b00      	cmp	r3, #0
 c004cb0:	d017      	beq.n	c004ce2 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 c004cb2:	4b21      	ldr	r3, [pc, #132]	@ (c004d38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c004cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 c004cb6:	0c1b      	lsrs	r3, r3, #16
 c004cb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c004cbc:	ee07 3a90 	vmov	s15, r3
 c004cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 c004cc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c004cc8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 c004ccc:	edd7 6a07 	vldr	s13, [r7, #28]
 c004cd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c004cd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c004cd8:	ee17 2a90 	vmov	r2, s15
 c004cdc:	687b      	ldr	r3, [r7, #4]
 c004cde:	605a      	str	r2, [r3, #4]
 c004ce0:	e002      	b.n	c004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 c004ce2:	687b      	ldr	r3, [r7, #4]
 c004ce4:	2200      	movs	r2, #0
 c004ce6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 c004ce8:	4b13      	ldr	r3, [pc, #76]	@ (c004d38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c004cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c004cec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 c004cf0:	2b00      	cmp	r3, #0
 c004cf2:	d017      	beq.n	c004d24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 c004cf4:	4b10      	ldr	r3, [pc, #64]	@ (c004d38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 c004cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 c004cf8:	0e1b      	lsrs	r3, r3, #24
 c004cfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 c004cfe:	ee07 3a90 	vmov	s15, r3
 c004d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 c004d06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c004d0a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 c004d0e:	edd7 6a07 	vldr	s13, [r7, #28]
 c004d12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 c004d16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 c004d1a:	ee17 2a90 	vmov	r2, s15
 c004d1e:	687b      	ldr	r3, [r7, #4]
 c004d20:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 c004d22:	e002      	b.n	c004d2a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 c004d24:	687b      	ldr	r3, [r7, #4]
 c004d26:	2200      	movs	r2, #0
 c004d28:	609a      	str	r2, [r3, #8]
}
 c004d2a:	bf00      	nop
 c004d2c:	3724      	adds	r7, #36	@ 0x24
 c004d2e:	46bd      	mov	sp, r7
 c004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004d34:	4770      	bx	lr
 c004d36:	bf00      	nop
 c004d38:	56020c00 	.word	0x56020c00
 c004d3c:	4b742400 	.word	0x4b742400
 c004d40:	46000000 	.word	0x46000000
 c004d44:	0c006fc8 	.word	0x0c006fc8

0c004d48 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 c004d48:	b580      	push	{r7, lr}
 c004d4a:	b08e      	sub	sp, #56	@ 0x38
 c004d4c:	af00      	add	r7, sp, #0
 c004d4e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 c004d52:	e9d7 2300 	ldrd	r2, r3, [r7]
 c004d56:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 c004d5a:	430b      	orrs	r3, r1
 c004d5c:	d145      	bne.n	c004dea <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 c004d5e:	4ba7      	ldr	r3, [pc, #668]	@ (c004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 c004d60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c004d64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 c004d68:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 c004d6a:	4ba4      	ldr	r3, [pc, #656]	@ (c004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 c004d6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c004d70:	f003 0302 	and.w	r3, r3, #2
 c004d74:	2b02      	cmp	r3, #2
 c004d76:	d108      	bne.n	c004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 c004d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c004d7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 c004d7e:	d104      	bne.n	c004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 c004d80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c004d84:	637b      	str	r3, [r7, #52]	@ 0x34
 c004d86:	f001 b9b3 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 c004d8a:	4b9c      	ldr	r3, [pc, #624]	@ (c004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 c004d8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c004d90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c004d94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c004d98:	d114      	bne.n	c004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 c004d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c004d9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 c004da0:	d110      	bne.n	c004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c004da2:	4b96      	ldr	r3, [pc, #600]	@ (c004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 c004da4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c004da8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c004dac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c004db0:	d103      	bne.n	c004dba <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 c004db2:	23fa      	movs	r3, #250	@ 0xfa
 c004db4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c004db6:	f001 b99b 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 c004dba:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 c004dbe:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c004dc0:	f001 b996 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 c004dc4:	4b8d      	ldr	r3, [pc, #564]	@ (c004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 c004dc6:	681b      	ldr	r3, [r3, #0]
 c004dc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c004dcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c004dd0:	d107      	bne.n	c004de2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 c004dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c004dd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c004dd8:	d103      	bne.n	c004de2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 c004dda:	4b89      	ldr	r3, [pc, #548]	@ (c005000 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 c004ddc:	637b      	str	r3, [r7, #52]	@ 0x34
 c004dde:	f001 b987 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 c004de2:	2300      	movs	r3, #0
 c004de4:	637b      	str	r3, [r7, #52]	@ 0x34
 c004de6:	f001 b983 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 c004dea:	e9d7 2300 	ldrd	r2, r3, [r7]
 c004dee:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 c004df2:	430b      	orrs	r3, r1
 c004df4:	d151      	bne.n	c004e9a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 c004df6:	4b81      	ldr	r3, [pc, #516]	@ (c004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 c004df8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c004dfc:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 c004e00:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 c004e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c004e04:	2b80      	cmp	r3, #128	@ 0x80
 c004e06:	d035      	beq.n	c004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 c004e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c004e0a:	2b80      	cmp	r3, #128	@ 0x80
 c004e0c:	d841      	bhi.n	c004e92 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 c004e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c004e10:	2b60      	cmp	r3, #96	@ 0x60
 c004e12:	d02a      	beq.n	c004e6a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 c004e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c004e16:	2b60      	cmp	r3, #96	@ 0x60
 c004e18:	d83b      	bhi.n	c004e92 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 c004e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c004e1c:	2b40      	cmp	r3, #64	@ 0x40
 c004e1e:	d009      	beq.n	c004e34 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 c004e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c004e22:	2b40      	cmp	r3, #64	@ 0x40
 c004e24:	d835      	bhi.n	c004e92 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 c004e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c004e28:	2b00      	cmp	r3, #0
 c004e2a:	d00c      	beq.n	c004e46 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 c004e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c004e2e:	2b20      	cmp	r3, #32
 c004e30:	d012      	beq.n	c004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 c004e32:	e02e      	b.n	c004e92 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 c004e34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 c004e38:	4618      	mov	r0, r3
 c004e3a:	f7ff fb77 	bl	c00452c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 c004e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c004e40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c004e42:	f001 b955 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 c004e46:	f107 0318 	add.w	r3, r7, #24
 c004e4a:	4618      	mov	r0, r3
 c004e4c:	f7ff fcc8 	bl	c0047e0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 c004e50:	69bb      	ldr	r3, [r7, #24]
 c004e52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c004e54:	f001 b94c 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 c004e58:	f107 030c 	add.w	r3, r7, #12
 c004e5c:	4618      	mov	r0, r3
 c004e5e:	f7ff fe19 	bl	c004a94 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 c004e62:	68fb      	ldr	r3, [r7, #12]
 c004e64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c004e66:	f001 b943 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 c004e6a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 c004e6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c004e70:	f001 b93e 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c004e74:	4b61      	ldr	r3, [pc, #388]	@ (c004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 c004e76:	681b      	ldr	r3, [r3, #0]
 c004e78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c004e7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c004e80:	d103      	bne.n	c004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 c004e82:	4b60      	ldr	r3, [pc, #384]	@ (c005004 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 c004e84:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c004e86:	f001 b933 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 c004e8a:	2300      	movs	r3, #0
 c004e8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c004e8e:	f001 b92f 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 c004e92:	2300      	movs	r3, #0
 c004e94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c004e96:	f001 b92b 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 c004e9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 c004e9e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 c004ea2:	430b      	orrs	r3, r1
 c004ea4:	d158      	bne.n	c004f58 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 c004ea6:	4b55      	ldr	r3, [pc, #340]	@ (c004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 c004ea8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c004eac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 c004eb0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 c004eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c004eb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c004eb8:	d03b      	beq.n	c004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 c004eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c004ebc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c004ec0:	d846      	bhi.n	c004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 c004ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c004ec4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c004ec8:	d02e      	beq.n	c004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 c004eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c004ecc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c004ed0:	d83e      	bhi.n	c004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 c004ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c004ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 c004ed8:	d00b      	beq.n	c004ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 c004eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c004edc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 c004ee0:	d836      	bhi.n	c004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 c004ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c004ee4:	2b00      	cmp	r3, #0
 c004ee6:	d00d      	beq.n	c004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 c004ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c004eea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 c004eee:	d012      	beq.n	c004f16 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 c004ef0:	e02e      	b.n	c004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 c004ef2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 c004ef6:	4618      	mov	r0, r3
 c004ef8:	f7ff fb18 	bl	c00452c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 c004efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c004efe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c004f00:	f001 b8f6 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 c004f04:	f107 0318 	add.w	r3, r7, #24
 c004f08:	4618      	mov	r0, r3
 c004f0a:	f7ff fc69 	bl	c0047e0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 c004f0e:	69bb      	ldr	r3, [r7, #24]
 c004f10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c004f12:	f001 b8ed 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 c004f16:	f107 030c 	add.w	r3, r7, #12
 c004f1a:	4618      	mov	r0, r3
 c004f1c:	f7ff fdba 	bl	c004a94 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 c004f20:	68fb      	ldr	r3, [r7, #12]
 c004f22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c004f24:	f001 b8e4 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 c004f28:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 c004f2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c004f2e:	f001 b8df 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c004f32:	4b32      	ldr	r3, [pc, #200]	@ (c004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 c004f34:	681b      	ldr	r3, [r3, #0]
 c004f36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c004f3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c004f3e:	d103      	bne.n	c004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 c004f40:	4b30      	ldr	r3, [pc, #192]	@ (c005004 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 c004f42:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c004f44:	f001 b8d4 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 c004f48:	2300      	movs	r3, #0
 c004f4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c004f4c:	f001 b8d0 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 c004f50:	2300      	movs	r3, #0
 c004f52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c004f54:	f001 b8cc 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 c004f58:	e9d7 2300 	ldrd	r2, r3, [r7]
 c004f5c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 c004f60:	430b      	orrs	r3, r1
 c004f62:	d126      	bne.n	c004fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 c004f64:	4b25      	ldr	r3, [pc, #148]	@ (c004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 c004f66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c004f6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 c004f6e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 c004f70:	4b22      	ldr	r3, [pc, #136]	@ (c004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 c004f72:	681b      	ldr	r3, [r3, #0]
 c004f74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c004f78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c004f7c:	d106      	bne.n	c004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 c004f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c004f80:	2b00      	cmp	r3, #0
 c004f82:	d103      	bne.n	c004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 c004f84:	4b1f      	ldr	r3, [pc, #124]	@ (c005004 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 c004f86:	637b      	str	r3, [r7, #52]	@ 0x34
 c004f88:	f001 b8b2 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 c004f8c:	4b1b      	ldr	r3, [pc, #108]	@ (c004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 c004f8e:	681b      	ldr	r3, [r3, #0]
 c004f90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c004f94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c004f98:	d107      	bne.n	c004faa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 c004f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c004f9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 c004fa0:	d103      	bne.n	c004faa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 c004fa2:	4b19      	ldr	r3, [pc, #100]	@ (c005008 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 c004fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 c004fa6:	f001 b8a3 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 c004faa:	2300      	movs	r3, #0
 c004fac:	637b      	str	r3, [r7, #52]	@ 0x34
 c004fae:	f001 b89f 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 c004fb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 c004fb6:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 c004fba:	430b      	orrs	r3, r1
 c004fbc:	d16e      	bne.n	c00509c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 c004fbe:	4b0f      	ldr	r3, [pc, #60]	@ (c004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 c004fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c004fc4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 c004fc8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 c004fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c004fcc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 c004fd0:	d03d      	beq.n	c00504e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 c004fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c004fd4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 c004fd8:	d85c      	bhi.n	c005094 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 c004fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c004fdc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c004fe0:	d014      	beq.n	c00500c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 c004fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c004fe4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c004fe8:	d854      	bhi.n	c005094 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 c004fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c004fec:	2b00      	cmp	r3, #0
 c004fee:	d01f      	beq.n	c005030 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 c004ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c004ff2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 c004ff6:	d012      	beq.n	c00501e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 c004ff8:	e04c      	b.n	c005094 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 c004ffa:	bf00      	nop
 c004ffc:	56020c00 	.word	0x56020c00
 c005000:	0007a120 	.word	0x0007a120
 c005004:	00f42400 	.word	0x00f42400
 c005008:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 c00500c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 c005010:	4618      	mov	r0, r3
 c005012:	f7ff fa8b 	bl	c00452c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 c005016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c005018:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00501a:	f001 b869 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 c00501e:	f107 0318 	add.w	r3, r7, #24
 c005022:	4618      	mov	r0, r3
 c005024:	f7ff fbdc 	bl	c0047e0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 c005028:	69fb      	ldr	r3, [r7, #28]
 c00502a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00502c:	f001 b860 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 c005030:	4ba7      	ldr	r3, [pc, #668]	@ (c0052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c005032:	681b      	ldr	r3, [r3, #0]
 c005034:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 c005038:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c00503c:	d103      	bne.n	c005046 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 c00503e:	4ba5      	ldr	r3, [pc, #660]	@ (c0052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 c005040:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c005042:	f001 b855 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 c005046:	2300      	movs	r3, #0
 c005048:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00504a:	f001 b851 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c00504e:	4ba0      	ldr	r3, [pc, #640]	@ (c0052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c005050:	681b      	ldr	r3, [r3, #0]
 c005052:	f003 0320 	and.w	r3, r3, #32
 c005056:	2b20      	cmp	r3, #32
 c005058:	d118      	bne.n	c00508c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c00505a:	4b9d      	ldr	r3, [pc, #628]	@ (c0052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c00505c:	689b      	ldr	r3, [r3, #8]
 c00505e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c005062:	2b00      	cmp	r3, #0
 c005064:	d005      	beq.n	c005072 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 c005066:	4b9a      	ldr	r3, [pc, #616]	@ (c0052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c005068:	689b      	ldr	r3, [r3, #8]
 c00506a:	0e1b      	lsrs	r3, r3, #24
 c00506c:	f003 030f 	and.w	r3, r3, #15
 c005070:	e006      	b.n	c005080 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 c005072:	4b97      	ldr	r3, [pc, #604]	@ (c0052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c005074:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c005078:	041b      	lsls	r3, r3, #16
 c00507a:	0e1b      	lsrs	r3, r3, #24
 c00507c:	f003 030f 	and.w	r3, r3, #15
 c005080:	4a95      	ldr	r2, [pc, #596]	@ (c0052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 c005082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c005086:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c005088:	f001 b832 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 c00508c:	2300      	movs	r3, #0
 c00508e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005090:	f001 b82e 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 c005094:	2300      	movs	r3, #0
 c005096:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005098:	f001 b82a 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 c00509c:	e9d7 2300 	ldrd	r2, r3, [r7]
 c0050a0:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 c0050a4:	430b      	orrs	r3, r1
 c0050a6:	d17f      	bne.n	c0051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 c0050a8:	4b89      	ldr	r3, [pc, #548]	@ (c0052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c0050aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c0050ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 c0050b2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 c0050b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0050b6:	2b00      	cmp	r3, #0
 c0050b8:	d165      	bne.n	c005186 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 c0050ba:	4b85      	ldr	r3, [pc, #532]	@ (c0052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c0050bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c0050c0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 c0050c4:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 c0050c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0050c8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 c0050cc:	d034      	beq.n	c005138 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 c0050ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0050d0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 c0050d4:	d853      	bhi.n	c00517e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 c0050d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0050d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c0050dc:	d00b      	beq.n	c0050f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 c0050de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0050e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c0050e4:	d84b      	bhi.n	c00517e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 c0050e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0050e8:	2b00      	cmp	r3, #0
 c0050ea:	d016      	beq.n	c00511a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 c0050ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0050ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 c0050f2:	d009      	beq.n	c005108 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 c0050f4:	e043      	b.n	c00517e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 c0050f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 c0050fa:	4618      	mov	r0, r3
 c0050fc:	f7ff fa16 	bl	c00452c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 c005100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c005102:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 c005104:	f000 bff4 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 c005108:	f107 0318 	add.w	r3, r7, #24
 c00510c:	4618      	mov	r0, r3
 c00510e:	f7ff fb67 	bl	c0047e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 c005112:	69fb      	ldr	r3, [r7, #28]
 c005114:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 c005116:	f000 bfeb 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 c00511a:	4b6d      	ldr	r3, [pc, #436]	@ (c0052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c00511c:	681b      	ldr	r3, [r3, #0]
 c00511e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 c005122:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c005126:	d103      	bne.n	c005130 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 c005128:	4b6a      	ldr	r3, [pc, #424]	@ (c0052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 c00512a:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 c00512c:	f000 bfe0 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 c005130:	2300      	movs	r3, #0
 c005132:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 c005134:	f000 bfdc 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c005138:	4b65      	ldr	r3, [pc, #404]	@ (c0052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c00513a:	681b      	ldr	r3, [r3, #0]
 c00513c:	f003 0320 	and.w	r3, r3, #32
 c005140:	2b20      	cmp	r3, #32
 c005142:	d118      	bne.n	c005176 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c005144:	4b62      	ldr	r3, [pc, #392]	@ (c0052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c005146:	689b      	ldr	r3, [r3, #8]
 c005148:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00514c:	2b00      	cmp	r3, #0
 c00514e:	d005      	beq.n	c00515c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 c005150:	4b5f      	ldr	r3, [pc, #380]	@ (c0052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c005152:	689b      	ldr	r3, [r3, #8]
 c005154:	0e1b      	lsrs	r3, r3, #24
 c005156:	f003 030f 	and.w	r3, r3, #15
 c00515a:	e006      	b.n	c00516a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 c00515c:	4b5c      	ldr	r3, [pc, #368]	@ (c0052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c00515e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c005162:	041b      	lsls	r3, r3, #16
 c005164:	0e1b      	lsrs	r3, r3, #24
 c005166:	f003 030f 	and.w	r3, r3, #15
 c00516a:	4a5b      	ldr	r2, [pc, #364]	@ (c0052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 c00516c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c005170:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 c005172:	f000 bfbd 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 c005176:	2300      	movs	r3, #0
 c005178:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 c00517a:	f000 bfb9 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 c00517e:	2300      	movs	r3, #0
 c005180:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 c005182:	f000 bfb5 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 c005186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005188:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 c00518c:	d108      	bne.n	c0051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 c00518e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 c005192:	4618      	mov	r0, r3
 c005194:	f7ff f9ca 	bl	c00452c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 c005198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c00519a:	637b      	str	r3, [r7, #52]	@ 0x34
 c00519c:	f000 bfa8 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 c0051a0:	2300      	movs	r3, #0
 c0051a2:	637b      	str	r3, [r7, #52]	@ 0x34
 c0051a4:	f000 bfa4 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 c0051a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 c0051ac:	1e51      	subs	r1, r2, #1
 c0051ae:	430b      	orrs	r3, r1
 c0051b0:	d136      	bne.n	c005220 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 c0051b2:	4b47      	ldr	r3, [pc, #284]	@ (c0052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c0051b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c0051b8:	f003 0303 	and.w	r3, r3, #3
 c0051bc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 c0051be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0051c0:	2b00      	cmp	r3, #0
 c0051c2:	d104      	bne.n	c0051ce <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 c0051c4:	f7fe fb44 	bl	c003850 <HAL_RCC_GetPCLK2Freq>
 c0051c8:	6378      	str	r0, [r7, #52]	@ 0x34
 c0051ca:	f000 bf91 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 c0051ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0051d0:	2b01      	cmp	r3, #1
 c0051d2:	d104      	bne.n	c0051de <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 c0051d4:	f7fe fa0c 	bl	c0035f0 <HAL_RCC_GetSysClockFreq>
 c0051d8:	6378      	str	r0, [r7, #52]	@ 0x34
 c0051da:	f000 bf89 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 c0051de:	4b3c      	ldr	r3, [pc, #240]	@ (c0052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c0051e0:	681b      	ldr	r3, [r3, #0]
 c0051e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c0051e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c0051ea:	d106      	bne.n	c0051fa <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 c0051ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0051ee:	2b02      	cmp	r3, #2
 c0051f0:	d103      	bne.n	c0051fa <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 c0051f2:	4b3a      	ldr	r3, [pc, #232]	@ (c0052dc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 c0051f4:	637b      	str	r3, [r7, #52]	@ 0x34
 c0051f6:	f000 bf7b 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 c0051fa:	4b35      	ldr	r3, [pc, #212]	@ (c0052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c0051fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c005200:	f003 0302 	and.w	r3, r3, #2
 c005204:	2b02      	cmp	r3, #2
 c005206:	d107      	bne.n	c005218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 c005208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00520a:	2b03      	cmp	r3, #3
 c00520c:	d104      	bne.n	c005218 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 c00520e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c005212:	637b      	str	r3, [r7, #52]	@ 0x34
 c005214:	f000 bf6c 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 c005218:	2300      	movs	r3, #0
 c00521a:	637b      	str	r3, [r7, #52]	@ 0x34
 c00521c:	f000 bf68 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 c005220:	e9d7 2300 	ldrd	r2, r3, [r7]
 c005224:	1e91      	subs	r1, r2, #2
 c005226:	430b      	orrs	r3, r1
 c005228:	d136      	bne.n	c005298 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 c00522a:	4b29      	ldr	r3, [pc, #164]	@ (c0052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c00522c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c005230:	f003 030c 	and.w	r3, r3, #12
 c005234:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 c005236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005238:	2b00      	cmp	r3, #0
 c00523a:	d104      	bne.n	c005246 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 c00523c:	f7fe faf4 	bl	c003828 <HAL_RCC_GetPCLK1Freq>
 c005240:	6378      	str	r0, [r7, #52]	@ 0x34
 c005242:	f000 bf55 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 c005246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005248:	2b04      	cmp	r3, #4
 c00524a:	d104      	bne.n	c005256 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 c00524c:	f7fe f9d0 	bl	c0035f0 <HAL_RCC_GetSysClockFreq>
 c005250:	6378      	str	r0, [r7, #52]	@ 0x34
 c005252:	f000 bf4d 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 c005256:	4b1e      	ldr	r3, [pc, #120]	@ (c0052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c005258:	681b      	ldr	r3, [r3, #0]
 c00525a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00525e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c005262:	d106      	bne.n	c005272 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 c005264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005266:	2b08      	cmp	r3, #8
 c005268:	d103      	bne.n	c005272 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 c00526a:	4b1c      	ldr	r3, [pc, #112]	@ (c0052dc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 c00526c:	637b      	str	r3, [r7, #52]	@ 0x34
 c00526e:	f000 bf3f 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 c005272:	4b17      	ldr	r3, [pc, #92]	@ (c0052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c005274:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c005278:	f003 0302 	and.w	r3, r3, #2
 c00527c:	2b02      	cmp	r3, #2
 c00527e:	d107      	bne.n	c005290 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 c005280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005282:	2b0c      	cmp	r3, #12
 c005284:	d104      	bne.n	c005290 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 c005286:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c00528a:	637b      	str	r3, [r7, #52]	@ 0x34
 c00528c:	f000 bf30 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 c005290:	2300      	movs	r3, #0
 c005292:	637b      	str	r3, [r7, #52]	@ 0x34
 c005294:	f000 bf2c 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 c005298:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00529c:	1f11      	subs	r1, r2, #4
 c00529e:	430b      	orrs	r3, r1
 c0052a0:	d13f      	bne.n	c005322 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 c0052a2:	4b0b      	ldr	r3, [pc, #44]	@ (c0052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 c0052a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c0052a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 c0052ac:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 c0052ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0052b0:	2b00      	cmp	r3, #0
 c0052b2:	d104      	bne.n	c0052be <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 c0052b4:	f7fe fab8 	bl	c003828 <HAL_RCC_GetPCLK1Freq>
 c0052b8:	6378      	str	r0, [r7, #52]	@ 0x34
 c0052ba:	f000 bf19 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 c0052be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0052c0:	2b10      	cmp	r3, #16
 c0052c2:	d10d      	bne.n	c0052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 c0052c4:	f7fe f994 	bl	c0035f0 <HAL_RCC_GetSysClockFreq>
 c0052c8:	6378      	str	r0, [r7, #52]	@ 0x34
 c0052ca:	f000 bf11 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 c0052ce:	bf00      	nop
 c0052d0:	56020c00 	.word	0x56020c00
 c0052d4:	02dc6c00 	.word	0x02dc6c00
 c0052d8:	0c006fc8 	.word	0x0c006fc8
 c0052dc:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 c0052e0:	4ba6      	ldr	r3, [pc, #664]	@ (c00557c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c0052e2:	681b      	ldr	r3, [r3, #0]
 c0052e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c0052e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c0052ec:	d106      	bne.n	c0052fc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 c0052ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0052f0:	2b20      	cmp	r3, #32
 c0052f2:	d103      	bne.n	c0052fc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 c0052f4:	4ba2      	ldr	r3, [pc, #648]	@ (c005580 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 c0052f6:	637b      	str	r3, [r7, #52]	@ 0x34
 c0052f8:	f000 befa 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 c0052fc:	4b9f      	ldr	r3, [pc, #636]	@ (c00557c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c0052fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c005302:	f003 0302 	and.w	r3, r3, #2
 c005306:	2b02      	cmp	r3, #2
 c005308:	d107      	bne.n	c00531a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 c00530a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00530c:	2b30      	cmp	r3, #48	@ 0x30
 c00530e:	d104      	bne.n	c00531a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 c005310:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c005314:	637b      	str	r3, [r7, #52]	@ 0x34
 c005316:	f000 beeb 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 c00531a:	2300      	movs	r3, #0
 c00531c:	637b      	str	r3, [r7, #52]	@ 0x34
 c00531e:	f000 bee7 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 c005322:	e9d7 2300 	ldrd	r2, r3, [r7]
 c005326:	f1a2 0108 	sub.w	r1, r2, #8
 c00532a:	430b      	orrs	r3, r1
 c00532c:	d136      	bne.n	c00539c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 c00532e:	4b93      	ldr	r3, [pc, #588]	@ (c00557c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c005330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c005334:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 c005338:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 c00533a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00533c:	2b00      	cmp	r3, #0
 c00533e:	d104      	bne.n	c00534a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 c005340:	f7fe fa72 	bl	c003828 <HAL_RCC_GetPCLK1Freq>
 c005344:	6378      	str	r0, [r7, #52]	@ 0x34
 c005346:	f000 bed3 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 c00534a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00534c:	2b40      	cmp	r3, #64	@ 0x40
 c00534e:	d104      	bne.n	c00535a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 c005350:	f7fe f94e 	bl	c0035f0 <HAL_RCC_GetSysClockFreq>
 c005354:	6378      	str	r0, [r7, #52]	@ 0x34
 c005356:	f000 becb 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 c00535a:	4b88      	ldr	r3, [pc, #544]	@ (c00557c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c00535c:	681b      	ldr	r3, [r3, #0]
 c00535e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c005362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c005366:	d106      	bne.n	c005376 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 c005368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00536a:	2b80      	cmp	r3, #128	@ 0x80
 c00536c:	d103      	bne.n	c005376 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 c00536e:	4b84      	ldr	r3, [pc, #528]	@ (c005580 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 c005370:	637b      	str	r3, [r7, #52]	@ 0x34
 c005372:	f000 bebd 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 c005376:	4b81      	ldr	r3, [pc, #516]	@ (c00557c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c005378:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00537c:	f003 0302 	and.w	r3, r3, #2
 c005380:	2b02      	cmp	r3, #2
 c005382:	d107      	bne.n	c005394 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 c005384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005386:	2bc0      	cmp	r3, #192	@ 0xc0
 c005388:	d104      	bne.n	c005394 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 c00538a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c00538e:	637b      	str	r3, [r7, #52]	@ 0x34
 c005390:	f000 beae 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 c005394:	2300      	movs	r3, #0
 c005396:	637b      	str	r3, [r7, #52]	@ 0x34
 c005398:	f000 beaa 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 c00539c:	e9d7 2300 	ldrd	r2, r3, [r7]
 c0053a0:	f1a2 0110 	sub.w	r1, r2, #16
 c0053a4:	430b      	orrs	r3, r1
 c0053a6:	d139      	bne.n	c00541c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 c0053a8:	4b74      	ldr	r3, [pc, #464]	@ (c00557c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c0053aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c0053ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 c0053b2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 c0053b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0053b6:	2b00      	cmp	r3, #0
 c0053b8:	d104      	bne.n	c0053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 c0053ba:	f7fe fa35 	bl	c003828 <HAL_RCC_GetPCLK1Freq>
 c0053be:	6378      	str	r0, [r7, #52]	@ 0x34
 c0053c0:	f000 be96 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 c0053c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0053c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 c0053ca:	d104      	bne.n	c0053d6 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 c0053cc:	f7fe f910 	bl	c0035f0 <HAL_RCC_GetSysClockFreq>
 c0053d0:	6378      	str	r0, [r7, #52]	@ 0x34
 c0053d2:	f000 be8d 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 c0053d6:	4b69      	ldr	r3, [pc, #420]	@ (c00557c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c0053d8:	681b      	ldr	r3, [r3, #0]
 c0053da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c0053de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c0053e2:	d107      	bne.n	c0053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 c0053e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0053e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 c0053ea:	d103      	bne.n	c0053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 c0053ec:	4b64      	ldr	r3, [pc, #400]	@ (c005580 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 c0053ee:	637b      	str	r3, [r7, #52]	@ 0x34
 c0053f0:	f000 be7e 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 c0053f4:	4b61      	ldr	r3, [pc, #388]	@ (c00557c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c0053f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c0053fa:	f003 0302 	and.w	r3, r3, #2
 c0053fe:	2b02      	cmp	r3, #2
 c005400:	d108      	bne.n	c005414 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 c005402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005404:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c005408:	d104      	bne.n	c005414 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 c00540a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c00540e:	637b      	str	r3, [r7, #52]	@ 0x34
 c005410:	f000 be6e 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 c005414:	2300      	movs	r3, #0
 c005416:	637b      	str	r3, [r7, #52]	@ 0x34
 c005418:	f000 be6a 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 c00541c:	e9d7 2300 	ldrd	r2, r3, [r7]
 c005420:	f1a2 0120 	sub.w	r1, r2, #32
 c005424:	430b      	orrs	r3, r1
 c005426:	d158      	bne.n	c0054da <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 c005428:	4b54      	ldr	r3, [pc, #336]	@ (c00557c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c00542a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c00542e:	f003 0307 	and.w	r3, r3, #7
 c005432:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 c005434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005436:	2b00      	cmp	r3, #0
 c005438:	d104      	bne.n	c005444 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 c00543a:	f7fe fa1d 	bl	c003878 <HAL_RCC_GetPCLK3Freq>
 c00543e:	6378      	str	r0, [r7, #52]	@ 0x34
 c005440:	f000 be56 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 c005444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005446:	2b01      	cmp	r3, #1
 c005448:	d104      	bne.n	c005454 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 c00544a:	f7fe f8d1 	bl	c0035f0 <HAL_RCC_GetSysClockFreq>
 c00544e:	6378      	str	r0, [r7, #52]	@ 0x34
 c005450:	f000 be4e 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 c005454:	4b49      	ldr	r3, [pc, #292]	@ (c00557c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c005456:	681b      	ldr	r3, [r3, #0]
 c005458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00545c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c005460:	d106      	bne.n	c005470 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 c005462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005464:	2b02      	cmp	r3, #2
 c005466:	d103      	bne.n	c005470 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 c005468:	4b45      	ldr	r3, [pc, #276]	@ (c005580 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 c00546a:	637b      	str	r3, [r7, #52]	@ 0x34
 c00546c:	f000 be40 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 c005470:	4b42      	ldr	r3, [pc, #264]	@ (c00557c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c005472:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c005476:	f003 0302 	and.w	r3, r3, #2
 c00547a:	2b02      	cmp	r3, #2
 c00547c:	d107      	bne.n	c00548e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 c00547e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005480:	2b03      	cmp	r3, #3
 c005482:	d104      	bne.n	c00548e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 c005484:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c005488:	637b      	str	r3, [r7, #52]	@ 0x34
 c00548a:	f000 be31 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 c00548e:	4b3b      	ldr	r3, [pc, #236]	@ (c00557c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c005490:	681b      	ldr	r3, [r3, #0]
 c005492:	f003 0320 	and.w	r3, r3, #32
 c005496:	2b20      	cmp	r3, #32
 c005498:	d11b      	bne.n	c0054d2 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 c00549a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00549c:	2b04      	cmp	r3, #4
 c00549e:	d118      	bne.n	c0054d2 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c0054a0:	4b36      	ldr	r3, [pc, #216]	@ (c00557c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c0054a2:	689b      	ldr	r3, [r3, #8]
 c0054a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c0054a8:	2b00      	cmp	r3, #0
 c0054aa:	d005      	beq.n	c0054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 c0054ac:	4b33      	ldr	r3, [pc, #204]	@ (c00557c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c0054ae:	689b      	ldr	r3, [r3, #8]
 c0054b0:	0e1b      	lsrs	r3, r3, #24
 c0054b2:	f003 030f 	and.w	r3, r3, #15
 c0054b6:	e006      	b.n	c0054c6 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 c0054b8:	4b30      	ldr	r3, [pc, #192]	@ (c00557c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c0054ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c0054be:	041b      	lsls	r3, r3, #16
 c0054c0:	0e1b      	lsrs	r3, r3, #24
 c0054c2:	f003 030f 	and.w	r3, r3, #15
 c0054c6:	4a2f      	ldr	r2, [pc, #188]	@ (c005584 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 c0054c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0054cc:	637b      	str	r3, [r7, #52]	@ 0x34
 c0054ce:	f000 be0f 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 c0054d2:	2300      	movs	r3, #0
 c0054d4:	637b      	str	r3, [r7, #52]	@ 0x34
 c0054d6:	f000 be0b 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 c0054da:	e9d7 2300 	ldrd	r2, r3, [r7]
 c0054de:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 c0054e2:	430b      	orrs	r3, r1
 c0054e4:	d172      	bne.n	c0055cc <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 c0054e6:	4b25      	ldr	r3, [pc, #148]	@ (c00557c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c0054e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c0054ec:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 c0054f0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 c0054f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0054f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 c0054f8:	d104      	bne.n	c005504 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 c0054fa:	f7fe f879 	bl	c0035f0 <HAL_RCC_GetSysClockFreq>
 c0054fe:	6378      	str	r0, [r7, #52]	@ 0x34
 c005500:	f000 bdf6 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 c005504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005506:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c00550a:	d108      	bne.n	c00551e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 c00550c:	f107 0318 	add.w	r3, r7, #24
 c005510:	4618      	mov	r0, r3
 c005512:	f7ff f965 	bl	c0047e0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 c005516:	6a3b      	ldr	r3, [r7, #32]
 c005518:	637b      	str	r3, [r7, #52]	@ 0x34
 c00551a:	f000 bde9 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 c00551e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005520:	2b00      	cmp	r3, #0
 c005522:	d104      	bne.n	c00552e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 c005524:	f7fe f966 	bl	c0037f4 <HAL_RCC_GetHCLKFreq>
 c005528:	6378      	str	r0, [r7, #52]	@ 0x34
 c00552a:	f000 bde1 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 c00552e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005530:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 c005534:	d128      	bne.n	c005588 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c005536:	4b11      	ldr	r3, [pc, #68]	@ (c00557c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c005538:	681b      	ldr	r3, [r3, #0]
 c00553a:	f003 0320 	and.w	r3, r3, #32
 c00553e:	2b20      	cmp	r3, #32
 c005540:	d118      	bne.n	c005574 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c005542:	4b0e      	ldr	r3, [pc, #56]	@ (c00557c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c005544:	689b      	ldr	r3, [r3, #8]
 c005546:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00554a:	2b00      	cmp	r3, #0
 c00554c:	d005      	beq.n	c00555a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 c00554e:	4b0b      	ldr	r3, [pc, #44]	@ (c00557c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c005550:	689b      	ldr	r3, [r3, #8]
 c005552:	0e1b      	lsrs	r3, r3, #24
 c005554:	f003 030f 	and.w	r3, r3, #15
 c005558:	e006      	b.n	c005568 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 c00555a:	4b08      	ldr	r3, [pc, #32]	@ (c00557c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 c00555c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c005560:	041b      	lsls	r3, r3, #16
 c005562:	0e1b      	lsrs	r3, r3, #24
 c005564:	f003 030f 	and.w	r3, r3, #15
 c005568:	4a06      	ldr	r2, [pc, #24]	@ (c005584 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 c00556a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00556e:	637b      	str	r3, [r7, #52]	@ 0x34
 c005570:	f000 bdbe 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 c005574:	2300      	movs	r3, #0
 c005576:	637b      	str	r3, [r7, #52]	@ 0x34
 c005578:	f000 bdba 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 c00557c:	56020c00 	.word	0x56020c00
 c005580:	00f42400 	.word	0x00f42400
 c005584:	0c006fc8 	.word	0x0c006fc8
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 c005588:	4baf      	ldr	r3, [pc, #700]	@ (c005848 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c00558a:	681b      	ldr	r3, [r3, #0]
 c00558c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c005590:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c005594:	d107      	bne.n	c0055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 c005596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005598:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 c00559c:	d103      	bne.n	c0055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 c00559e:	4bab      	ldr	r3, [pc, #684]	@ (c00584c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 c0055a0:	637b      	str	r3, [r7, #52]	@ 0x34
 c0055a2:	f000 bda5 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 c0055a6:	4ba8      	ldr	r3, [pc, #672]	@ (c005848 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c0055a8:	681b      	ldr	r3, [r3, #0]
 c0055aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c0055ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c0055b2:	d107      	bne.n	c0055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 c0055b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0055b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 c0055ba:	d103      	bne.n	c0055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 c0055bc:	4ba3      	ldr	r3, [pc, #652]	@ (c00584c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 c0055be:	637b      	str	r3, [r7, #52]	@ 0x34
 c0055c0:	f000 bd96 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 c0055c4:	2300      	movs	r3, #0
 c0055c6:	637b      	str	r3, [r7, #52]	@ 0x34
 c0055c8:	f000 bd92 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 c0055cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 c0055d0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 c0055d4:	430b      	orrs	r3, r1
 c0055d6:	d158      	bne.n	c00568a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 c0055d8:	4b9b      	ldr	r3, [pc, #620]	@ (c005848 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c0055da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c0055de:	f003 0307 	and.w	r3, r3, #7
 c0055e2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 c0055e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0055e6:	2b04      	cmp	r3, #4
 c0055e8:	d84b      	bhi.n	c005682 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 c0055ea:	a201      	add	r2, pc, #4	@ (adr r2, c0055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 c0055ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c0055f0:	0c005629 	.word	0x0c005629
 c0055f4:	0c005605 	.word	0x0c005605
 c0055f8:	0c005617 	.word	0x0c005617
 c0055fc:	0c005633 	.word	0x0c005633
 c005600:	0c00563d 	.word	0x0c00563d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 c005604:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 c005608:	4618      	mov	r0, r3
 c00560a:	f7fe ff8f 	bl	c00452c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 c00560e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c005610:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005612:	f000 bd6d 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 c005616:	f107 030c 	add.w	r3, r7, #12
 c00561a:	4618      	mov	r0, r3
 c00561c:	f7ff fa3a 	bl	c004a94 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 c005620:	693b      	ldr	r3, [r7, #16]
 c005622:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005624:	f000 bd64 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 c005628:	f7fe f8e4 	bl	c0037f4 <HAL_RCC_GetHCLKFreq>
 c00562c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c00562e:	f000 bd5f 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 c005632:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 c005636:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005638:	f000 bd5a 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c00563c:	4b82      	ldr	r3, [pc, #520]	@ (c005848 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c00563e:	681b      	ldr	r3, [r3, #0]
 c005640:	f003 0320 	and.w	r3, r3, #32
 c005644:	2b20      	cmp	r3, #32
 c005646:	d118      	bne.n	c00567a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c005648:	4b7f      	ldr	r3, [pc, #508]	@ (c005848 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c00564a:	689b      	ldr	r3, [r3, #8]
 c00564c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c005650:	2b00      	cmp	r3, #0
 c005652:	d005      	beq.n	c005660 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 c005654:	4b7c      	ldr	r3, [pc, #496]	@ (c005848 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c005656:	689b      	ldr	r3, [r3, #8]
 c005658:	0e1b      	lsrs	r3, r3, #24
 c00565a:	f003 030f 	and.w	r3, r3, #15
 c00565e:	e006      	b.n	c00566e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 c005660:	4b79      	ldr	r3, [pc, #484]	@ (c005848 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c005662:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c005666:	041b      	lsls	r3, r3, #16
 c005668:	0e1b      	lsrs	r3, r3, #24
 c00566a:	f003 030f 	and.w	r3, r3, #15
 c00566e:	4a78      	ldr	r2, [pc, #480]	@ (c005850 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 c005670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c005674:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c005676:	f000 bd3b 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 c00567a:	2300      	movs	r3, #0
 c00567c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00567e:	f000 bd37 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 c005682:	2300      	movs	r3, #0
 c005684:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005686:	f000 bd33 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 c00568a:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00568e:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 c005692:	430b      	orrs	r3, r1
 c005694:	d167      	bne.n	c005766 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 c005696:	4b6c      	ldr	r3, [pc, #432]	@ (c005848 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c005698:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c00569c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 c0056a0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 c0056a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0056a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 c0056a8:	d036      	beq.n	c005718 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 c0056aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0056ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 c0056b0:	d855      	bhi.n	c00575e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 c0056b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0056b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 c0056b8:	d029      	beq.n	c00570e <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 c0056ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0056bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 c0056c0:	d84d      	bhi.n	c00575e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 c0056c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0056c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c0056c8:	d013      	beq.n	c0056f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 c0056ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0056cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c0056d0:	d845      	bhi.n	c00575e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 c0056d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0056d4:	2b00      	cmp	r3, #0
 c0056d6:	d015      	beq.n	c005704 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 c0056d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0056da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c0056de:	d13e      	bne.n	c00575e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 c0056e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 c0056e4:	4618      	mov	r0, r3
 c0056e6:	f7fe ff21 	bl	c00452c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 c0056ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c0056ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c0056ee:	f000 bcff 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 c0056f2:	f107 030c 	add.w	r3, r7, #12
 c0056f6:	4618      	mov	r0, r3
 c0056f8:	f7ff f9cc 	bl	c004a94 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 c0056fc:	693b      	ldr	r3, [r7, #16]
 c0056fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005700:	f000 bcf6 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 c005704:	f7fe f876 	bl	c0037f4 <HAL_RCC_GetHCLKFreq>
 c005708:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c00570a:	f000 bcf1 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 c00570e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 c005712:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005714:	f000 bcec 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c005718:	4b4b      	ldr	r3, [pc, #300]	@ (c005848 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c00571a:	681b      	ldr	r3, [r3, #0]
 c00571c:	f003 0320 	and.w	r3, r3, #32
 c005720:	2b20      	cmp	r3, #32
 c005722:	d118      	bne.n	c005756 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c005724:	4b48      	ldr	r3, [pc, #288]	@ (c005848 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c005726:	689b      	ldr	r3, [r3, #8]
 c005728:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00572c:	2b00      	cmp	r3, #0
 c00572e:	d005      	beq.n	c00573c <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 c005730:	4b45      	ldr	r3, [pc, #276]	@ (c005848 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c005732:	689b      	ldr	r3, [r3, #8]
 c005734:	0e1b      	lsrs	r3, r3, #24
 c005736:	f003 030f 	and.w	r3, r3, #15
 c00573a:	e006      	b.n	c00574a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 c00573c:	4b42      	ldr	r3, [pc, #264]	@ (c005848 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c00573e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c005742:	041b      	lsls	r3, r3, #16
 c005744:	0e1b      	lsrs	r3, r3, #24
 c005746:	f003 030f 	and.w	r3, r3, #15
 c00574a:	4a41      	ldr	r2, [pc, #260]	@ (c005850 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 c00574c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c005750:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c005752:	f000 bccd 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 c005756:	2300      	movs	r3, #0
 c005758:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00575a:	f000 bcc9 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 c00575e:	2300      	movs	r3, #0
 c005760:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005762:	f000 bcc5 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 c005766:	e9d7 2300 	ldrd	r2, r3, [r7]
 c00576a:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 c00576e:	430b      	orrs	r3, r1
 c005770:	d14c      	bne.n	c00580c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 c005772:	4b35      	ldr	r3, [pc, #212]	@ (c005848 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c005774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c005778:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 c00577c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 c00577e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005780:	2b00      	cmp	r3, #0
 c005782:	d104      	bne.n	c00578e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 c005784:	f7fe f850 	bl	c003828 <HAL_RCC_GetPCLK1Freq>
 c005788:	6378      	str	r0, [r7, #52]	@ 0x34
 c00578a:	f000 bcb1 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 c00578e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005790:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c005794:	d104      	bne.n	c0057a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 c005796:	f7fd ff2b 	bl	c0035f0 <HAL_RCC_GetSysClockFreq>
 c00579a:	6378      	str	r0, [r7, #52]	@ 0x34
 c00579c:	f000 bca8 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 c0057a0:	4b29      	ldr	r3, [pc, #164]	@ (c005848 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c0057a2:	681b      	ldr	r3, [r3, #0]
 c0057a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c0057a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c0057ac:	d107      	bne.n	c0057be <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 c0057ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0057b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 c0057b4:	d103      	bne.n	c0057be <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 c0057b6:	4b25      	ldr	r3, [pc, #148]	@ (c00584c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 c0057b8:	637b      	str	r3, [r7, #52]	@ 0x34
 c0057ba:	f000 bc99 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 c0057be:	4b22      	ldr	r3, [pc, #136]	@ (c005848 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c0057c0:	681b      	ldr	r3, [r3, #0]
 c0057c2:	f003 0320 	and.w	r3, r3, #32
 c0057c6:	2b20      	cmp	r3, #32
 c0057c8:	d11c      	bne.n	c005804 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 c0057ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0057cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 c0057d0:	d118      	bne.n	c005804 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c0057d2:	4b1d      	ldr	r3, [pc, #116]	@ (c005848 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c0057d4:	689b      	ldr	r3, [r3, #8]
 c0057d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c0057da:	2b00      	cmp	r3, #0
 c0057dc:	d005      	beq.n	c0057ea <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 c0057de:	4b1a      	ldr	r3, [pc, #104]	@ (c005848 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c0057e0:	689b      	ldr	r3, [r3, #8]
 c0057e2:	0e1b      	lsrs	r3, r3, #24
 c0057e4:	f003 030f 	and.w	r3, r3, #15
 c0057e8:	e006      	b.n	c0057f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 c0057ea:	4b17      	ldr	r3, [pc, #92]	@ (c005848 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c0057ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c0057f0:	041b      	lsls	r3, r3, #16
 c0057f2:	0e1b      	lsrs	r3, r3, #24
 c0057f4:	f003 030f 	and.w	r3, r3, #15
 c0057f8:	4a15      	ldr	r2, [pc, #84]	@ (c005850 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 c0057fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0057fe:	637b      	str	r3, [r7, #52]	@ 0x34
 c005800:	f000 bc76 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 c005804:	2300      	movs	r3, #0
 c005806:	637b      	str	r3, [r7, #52]	@ 0x34
 c005808:	f000 bc72 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 c00580c:	e9d7 2300 	ldrd	r2, r3, [r7]
 c005810:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 c005814:	430b      	orrs	r3, r1
 c005816:	d153      	bne.n	c0058c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 c005818:	4b0b      	ldr	r3, [pc, #44]	@ (c005848 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 c00581a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c00581e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 c005822:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 c005824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005826:	2b00      	cmp	r3, #0
 c005828:	d104      	bne.n	c005834 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 c00582a:	f7fd fffd 	bl	c003828 <HAL_RCC_GetPCLK1Freq>
 c00582e:	6378      	str	r0, [r7, #52]	@ 0x34
 c005830:	f000 bc5e 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 c005834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005836:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 c00583a:	d10b      	bne.n	c005854 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 c00583c:	f7fd fed8 	bl	c0035f0 <HAL_RCC_GetSysClockFreq>
 c005840:	6378      	str	r0, [r7, #52]	@ 0x34
 c005842:	f000 bc55 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 c005846:	bf00      	nop
 c005848:	56020c00 	.word	0x56020c00
 c00584c:	00f42400 	.word	0x00f42400
 c005850:	0c006fc8 	.word	0x0c006fc8
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 c005854:	4ba1      	ldr	r3, [pc, #644]	@ (c005adc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c005856:	681b      	ldr	r3, [r3, #0]
 c005858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00585c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c005860:	d107      	bne.n	c005872 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 c005862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005864:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c005868:	d103      	bne.n	c005872 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 c00586a:	4b9d      	ldr	r3, [pc, #628]	@ (c005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 c00586c:	637b      	str	r3, [r7, #52]	@ 0x34
 c00586e:	f000 bc3f 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 c005872:	4b9a      	ldr	r3, [pc, #616]	@ (c005adc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c005874:	681b      	ldr	r3, [r3, #0]
 c005876:	f003 0320 	and.w	r3, r3, #32
 c00587a:	2b20      	cmp	r3, #32
 c00587c:	d11c      	bne.n	c0058b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 c00587e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005880:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 c005884:	d118      	bne.n	c0058b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c005886:	4b95      	ldr	r3, [pc, #596]	@ (c005adc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c005888:	689b      	ldr	r3, [r3, #8]
 c00588a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00588e:	2b00      	cmp	r3, #0
 c005890:	d005      	beq.n	c00589e <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 c005892:	4b92      	ldr	r3, [pc, #584]	@ (c005adc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c005894:	689b      	ldr	r3, [r3, #8]
 c005896:	0e1b      	lsrs	r3, r3, #24
 c005898:	f003 030f 	and.w	r3, r3, #15
 c00589c:	e006      	b.n	c0058ac <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 c00589e:	4b8f      	ldr	r3, [pc, #572]	@ (c005adc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c0058a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c0058a4:	041b      	lsls	r3, r3, #16
 c0058a6:	0e1b      	lsrs	r3, r3, #24
 c0058a8:	f003 030f 	and.w	r3, r3, #15
 c0058ac:	4a8d      	ldr	r2, [pc, #564]	@ (c005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 c0058ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0058b2:	637b      	str	r3, [r7, #52]	@ 0x34
 c0058b4:	f000 bc1c 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 c0058b8:	2300      	movs	r3, #0
 c0058ba:	637b      	str	r3, [r7, #52]	@ 0x34
 c0058bc:	f000 bc18 	b.w	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 c0058c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 c0058c4:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 c0058c8:	430b      	orrs	r3, r1
 c0058ca:	d151      	bne.n	c005970 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 c0058cc:	4b83      	ldr	r3, [pc, #524]	@ (c005adc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c0058ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c0058d2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 c0058d6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 c0058d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0058da:	2bc0      	cmp	r3, #192	@ 0xc0
 c0058dc:	d024      	beq.n	c005928 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 c0058de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0058e0:	2bc0      	cmp	r3, #192	@ 0xc0
 c0058e2:	d842      	bhi.n	c00596a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 c0058e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0058e6:	2b80      	cmp	r3, #128	@ 0x80
 c0058e8:	d00d      	beq.n	c005906 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 c0058ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0058ec:	2b80      	cmp	r3, #128	@ 0x80
 c0058ee:	d83c      	bhi.n	c00596a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 c0058f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0058f2:	2b00      	cmp	r3, #0
 c0058f4:	d003      	beq.n	c0058fe <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 c0058f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0058f8:	2b40      	cmp	r3, #64	@ 0x40
 c0058fa:	d011      	beq.n	c005920 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 c0058fc:	e035      	b.n	c00596a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 c0058fe:	f7fd ffbb 	bl	c003878 <HAL_RCC_GetPCLK3Freq>
 c005902:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c005904:	e3f4      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c005906:	4b75      	ldr	r3, [pc, #468]	@ (c005adc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c005908:	681b      	ldr	r3, [r3, #0]
 c00590a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c00590e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c005912:	d102      	bne.n	c00591a <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 c005914:	4b72      	ldr	r3, [pc, #456]	@ (c005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 c005916:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c005918:	e3ea      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 c00591a:	2300      	movs	r3, #0
 c00591c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00591e:	e3e7      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 c005920:	f7fd fe66 	bl	c0035f0 <HAL_RCC_GetSysClockFreq>
 c005924:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c005926:	e3e3      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c005928:	4b6c      	ldr	r3, [pc, #432]	@ (c005adc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c00592a:	681b      	ldr	r3, [r3, #0]
 c00592c:	f003 0320 	and.w	r3, r3, #32
 c005930:	2b20      	cmp	r3, #32
 c005932:	d117      	bne.n	c005964 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c005934:	4b69      	ldr	r3, [pc, #420]	@ (c005adc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c005936:	689b      	ldr	r3, [r3, #8]
 c005938:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c00593c:	2b00      	cmp	r3, #0
 c00593e:	d005      	beq.n	c00594c <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 c005940:	4b66      	ldr	r3, [pc, #408]	@ (c005adc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c005942:	689b      	ldr	r3, [r3, #8]
 c005944:	0e1b      	lsrs	r3, r3, #24
 c005946:	f003 030f 	and.w	r3, r3, #15
 c00594a:	e006      	b.n	c00595a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 c00594c:	4b63      	ldr	r3, [pc, #396]	@ (c005adc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c00594e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c005952:	041b      	lsls	r3, r3, #16
 c005954:	0e1b      	lsrs	r3, r3, #24
 c005956:	f003 030f 	and.w	r3, r3, #15
 c00595a:	4a62      	ldr	r2, [pc, #392]	@ (c005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 c00595c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c005960:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c005962:	e3c5      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 c005964:	2300      	movs	r3, #0
 c005966:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005968:	e3c2      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 c00596a:	2300      	movs	r3, #0
 c00596c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c00596e:	e3bf      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 c005970:	e9d7 2300 	ldrd	r2, r3, [r7]
 c005974:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 c005978:	430b      	orrs	r3, r1
 c00597a:	d147      	bne.n	c005a0c <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 c00597c:	4b57      	ldr	r3, [pc, #348]	@ (c005adc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c00597e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c005982:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 c005986:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 c005988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c00598a:	2b00      	cmp	r3, #0
 c00598c:	d103      	bne.n	c005996 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 c00598e:	f7fd ff4b 	bl	c003828 <HAL_RCC_GetPCLK1Freq>
 c005992:	6378      	str	r0, [r7, #52]	@ 0x34
 c005994:	e3ac      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 c005996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005998:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 c00599c:	d103      	bne.n	c0059a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 c00599e:	f7fd fe27 	bl	c0035f0 <HAL_RCC_GetSysClockFreq>
 c0059a2:	6378      	str	r0, [r7, #52]	@ 0x34
 c0059a4:	e3a4      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 c0059a6:	4b4d      	ldr	r3, [pc, #308]	@ (c005adc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c0059a8:	681b      	ldr	r3, [r3, #0]
 c0059aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c0059ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c0059b2:	d106      	bne.n	c0059c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 c0059b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0059b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 c0059ba:	d102      	bne.n	c0059c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 c0059bc:	4b48      	ldr	r3, [pc, #288]	@ (c005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 c0059be:	637b      	str	r3, [r7, #52]	@ 0x34
 c0059c0:	e396      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 c0059c2:	4b46      	ldr	r3, [pc, #280]	@ (c005adc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c0059c4:	681b      	ldr	r3, [r3, #0]
 c0059c6:	f003 0320 	and.w	r3, r3, #32
 c0059ca:	2b20      	cmp	r3, #32
 c0059cc:	d11b      	bne.n	c005a06 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 c0059ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0059d0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 c0059d4:	d117      	bne.n	c005a06 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c0059d6:	4b41      	ldr	r3, [pc, #260]	@ (c005adc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c0059d8:	689b      	ldr	r3, [r3, #8]
 c0059da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c0059de:	2b00      	cmp	r3, #0
 c0059e0:	d005      	beq.n	c0059ee <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 c0059e2:	4b3e      	ldr	r3, [pc, #248]	@ (c005adc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c0059e4:	689b      	ldr	r3, [r3, #8]
 c0059e6:	0e1b      	lsrs	r3, r3, #24
 c0059e8:	f003 030f 	and.w	r3, r3, #15
 c0059ec:	e006      	b.n	c0059fc <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 c0059ee:	4b3b      	ldr	r3, [pc, #236]	@ (c005adc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c0059f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c0059f4:	041b      	lsls	r3, r3, #16
 c0059f6:	0e1b      	lsrs	r3, r3, #24
 c0059f8:	f003 030f 	and.w	r3, r3, #15
 c0059fc:	4a39      	ldr	r2, [pc, #228]	@ (c005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 c0059fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c005a02:	637b      	str	r3, [r7, #52]	@ 0x34
 c005a04:	e374      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 c005a06:	2300      	movs	r3, #0
 c005a08:	637b      	str	r3, [r7, #52]	@ 0x34
 c005a0a:	e371      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 c005a0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 c005a10:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 c005a14:	430b      	orrs	r3, r1
 c005a16:	d16a      	bne.n	c005aee <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 c005a18:	4b30      	ldr	r3, [pc, #192]	@ (c005adc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c005a1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c005a1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 c005a22:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 c005a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005a26:	2b00      	cmp	r3, #0
 c005a28:	d120      	bne.n	c005a6c <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c005a2a:	4b2c      	ldr	r3, [pc, #176]	@ (c005adc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c005a2c:	681b      	ldr	r3, [r3, #0]
 c005a2e:	f003 0320 	and.w	r3, r3, #32
 c005a32:	2b20      	cmp	r3, #32
 c005a34:	d117      	bne.n	c005a66 <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c005a36:	4b29      	ldr	r3, [pc, #164]	@ (c005adc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c005a38:	689b      	ldr	r3, [r3, #8]
 c005a3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c005a3e:	2b00      	cmp	r3, #0
 c005a40:	d005      	beq.n	c005a4e <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 c005a42:	4b26      	ldr	r3, [pc, #152]	@ (c005adc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c005a44:	689b      	ldr	r3, [r3, #8]
 c005a46:	0e1b      	lsrs	r3, r3, #24
 c005a48:	f003 030f 	and.w	r3, r3, #15
 c005a4c:	e006      	b.n	c005a5c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 c005a4e:	4b23      	ldr	r3, [pc, #140]	@ (c005adc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c005a50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c005a54:	041b      	lsls	r3, r3, #16
 c005a56:	0e1b      	lsrs	r3, r3, #24
 c005a58:	f003 030f 	and.w	r3, r3, #15
 c005a5c:	4a21      	ldr	r2, [pc, #132]	@ (c005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 c005a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c005a62:	637b      	str	r3, [r7, #52]	@ 0x34
 c005a64:	e344      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 c005a66:	2300      	movs	r3, #0
 c005a68:	637b      	str	r3, [r7, #52]	@ 0x34
 c005a6a:	e341      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 c005a6c:	4b1b      	ldr	r3, [pc, #108]	@ (c005adc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c005a6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c005a72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c005a76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c005a7a:	d112      	bne.n	c005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 c005a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005a7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 c005a82:	d10e      	bne.n	c005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c005a84:	4b15      	ldr	r3, [pc, #84]	@ (c005adc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c005a86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c005a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c005a8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c005a92:	d102      	bne.n	c005a9a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 c005a94:	23fa      	movs	r3, #250	@ 0xfa
 c005a96:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c005a98:	e32a      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 c005a9a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 c005a9e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c005aa0:	e326      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 c005aa2:	4b0e      	ldr	r3, [pc, #56]	@ (c005adc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c005aa4:	681b      	ldr	r3, [r3, #0]
 c005aa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c005aaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c005aae:	d106      	bne.n	c005abe <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 c005ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005ab2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 c005ab6:	d102      	bne.n	c005abe <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 c005ab8:	4b09      	ldr	r3, [pc, #36]	@ (c005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 c005aba:	637b      	str	r3, [r7, #52]	@ 0x34
 c005abc:	e318      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 c005abe:	4b07      	ldr	r3, [pc, #28]	@ (c005adc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 c005ac0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c005ac4:	f003 0302 	and.w	r3, r3, #2
 c005ac8:	2b02      	cmp	r3, #2
 c005aca:	d10d      	bne.n	c005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 c005acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005ace:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c005ad2:	d109      	bne.n	c005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 c005ad4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c005ad8:	637b      	str	r3, [r7, #52]	@ 0x34
 c005ada:	e309      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 c005adc:	56020c00 	.word	0x56020c00
 c005ae0:	00f42400 	.word	0x00f42400
 c005ae4:	0c006fc8 	.word	0x0c006fc8
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 c005ae8:	2300      	movs	r3, #0
 c005aea:	637b      	str	r3, [r7, #52]	@ 0x34
 c005aec:	e300      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 c005aee:	e9d7 2300 	ldrd	r2, r3, [r7]
 c005af2:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 c005af6:	430b      	orrs	r3, r1
 c005af8:	d164      	bne.n	c005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 c005afa:	4ba2      	ldr	r3, [pc, #648]	@ (c005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c005afc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c005b00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 c005b04:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 c005b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005b08:	2b00      	cmp	r3, #0
 c005b0a:	d120      	bne.n	c005b4e <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c005b0c:	4b9d      	ldr	r3, [pc, #628]	@ (c005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c005b0e:	681b      	ldr	r3, [r3, #0]
 c005b10:	f003 0320 	and.w	r3, r3, #32
 c005b14:	2b20      	cmp	r3, #32
 c005b16:	d117      	bne.n	c005b48 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c005b18:	4b9a      	ldr	r3, [pc, #616]	@ (c005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c005b1a:	689b      	ldr	r3, [r3, #8]
 c005b1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c005b20:	2b00      	cmp	r3, #0
 c005b22:	d005      	beq.n	c005b30 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 c005b24:	4b97      	ldr	r3, [pc, #604]	@ (c005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c005b26:	689b      	ldr	r3, [r3, #8]
 c005b28:	0e1b      	lsrs	r3, r3, #24
 c005b2a:	f003 030f 	and.w	r3, r3, #15
 c005b2e:	e006      	b.n	c005b3e <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 c005b30:	4b94      	ldr	r3, [pc, #592]	@ (c005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c005b32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c005b36:	041b      	lsls	r3, r3, #16
 c005b38:	0e1b      	lsrs	r3, r3, #24
 c005b3a:	f003 030f 	and.w	r3, r3, #15
 c005b3e:	4a92      	ldr	r2, [pc, #584]	@ (c005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 c005b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c005b44:	637b      	str	r3, [r7, #52]	@ 0x34
 c005b46:	e2d3      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 c005b48:	2300      	movs	r3, #0
 c005b4a:	637b      	str	r3, [r7, #52]	@ 0x34
 c005b4c:	e2d0      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 c005b4e:	4b8d      	ldr	r3, [pc, #564]	@ (c005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c005b50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c005b54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c005b58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c005b5c:	d112      	bne.n	c005b84 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 c005b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005b60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c005b64:	d10e      	bne.n	c005b84 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c005b66:	4b87      	ldr	r3, [pc, #540]	@ (c005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c005b68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c005b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c005b70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c005b74:	d102      	bne.n	c005b7c <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 c005b76:	23fa      	movs	r3, #250	@ 0xfa
 c005b78:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c005b7a:	e2b9      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 c005b7c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 c005b80:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c005b82:	e2b5      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 c005b84:	4b7f      	ldr	r3, [pc, #508]	@ (c005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c005b86:	681b      	ldr	r3, [r3, #0]
 c005b88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c005b8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c005b90:	d106      	bne.n	c005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 c005b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005b94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 c005b98:	d102      	bne.n	c005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 c005b9a:	4b7c      	ldr	r3, [pc, #496]	@ (c005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 c005b9c:	637b      	str	r3, [r7, #52]	@ 0x34
 c005b9e:	e2a7      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 c005ba0:	4b78      	ldr	r3, [pc, #480]	@ (c005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c005ba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c005ba6:	f003 0302 	and.w	r3, r3, #2
 c005baa:	2b02      	cmp	r3, #2
 c005bac:	d107      	bne.n	c005bbe <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 c005bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005bb0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 c005bb4:	d103      	bne.n	c005bbe <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 c005bb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c005bba:	637b      	str	r3, [r7, #52]	@ 0x34
 c005bbc:	e298      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 c005bbe:	2300      	movs	r3, #0
 c005bc0:	637b      	str	r3, [r7, #52]	@ 0x34
 c005bc2:	e295      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 c005bc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 c005bc8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 c005bcc:	430b      	orrs	r3, r1
 c005bce:	d147      	bne.n	c005c60 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 c005bd0:	4b6c      	ldr	r3, [pc, #432]	@ (c005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c005bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c005bd6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 c005bda:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 c005bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005bde:	2b00      	cmp	r3, #0
 c005be0:	d103      	bne.n	c005bea <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 c005be2:	f7fd fe21 	bl	c003828 <HAL_RCC_GetPCLK1Freq>
 c005be6:	6378      	str	r0, [r7, #52]	@ 0x34
 c005be8:	e282      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 c005bea:	4b66      	ldr	r3, [pc, #408]	@ (c005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c005bec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c005bf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c005bf4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c005bf8:	d112      	bne.n	c005c20 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 c005bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005bfc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 c005c00:	d10e      	bne.n	c005c20 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c005c02:	4b60      	ldr	r3, [pc, #384]	@ (c005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c005c04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c005c08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c005c0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c005c10:	d102      	bne.n	c005c18 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 c005c12:	23fa      	movs	r3, #250	@ 0xfa
 c005c14:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c005c16:	e26b      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 c005c18:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 c005c1c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c005c1e:	e267      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 c005c20:	4b58      	ldr	r3, [pc, #352]	@ (c005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c005c22:	681b      	ldr	r3, [r3, #0]
 c005c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c005c28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c005c2c:	d106      	bne.n	c005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 c005c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005c30:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 c005c34:	d102      	bne.n	c005c3c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 c005c36:	4b55      	ldr	r3, [pc, #340]	@ (c005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 c005c38:	637b      	str	r3, [r7, #52]	@ 0x34
 c005c3a:	e259      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 c005c3c:	4b51      	ldr	r3, [pc, #324]	@ (c005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c005c3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c005c42:	f003 0302 	and.w	r3, r3, #2
 c005c46:	2b02      	cmp	r3, #2
 c005c48:	d107      	bne.n	c005c5a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 c005c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005c4c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 c005c50:	d103      	bne.n	c005c5a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 c005c52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c005c56:	637b      	str	r3, [r7, #52]	@ 0x34
 c005c58:	e24a      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 c005c5a:	2300      	movs	r3, #0
 c005c5c:	637b      	str	r3, [r7, #52]	@ 0x34
 c005c5e:	e247      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 c005c60:	e9d7 2300 	ldrd	r2, r3, [r7]
 c005c64:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 c005c68:	430b      	orrs	r3, r1
 c005c6a:	d12d      	bne.n	c005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 c005c6c:	4b45      	ldr	r3, [pc, #276]	@ (c005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c005c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c005c72:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 c005c76:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 c005c78:	4b42      	ldr	r3, [pc, #264]	@ (c005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c005c7a:	681b      	ldr	r3, [r3, #0]
 c005c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 c005c80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c005c84:	d105      	bne.n	c005c92 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 c005c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005c88:	2b00      	cmp	r3, #0
 c005c8a:	d102      	bne.n	c005c92 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 c005c8c:	4b3f      	ldr	r3, [pc, #252]	@ (c005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 c005c8e:	637b      	str	r3, [r7, #52]	@ 0x34
 c005c90:	e22e      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 c005c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005c94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 c005c98:	d107      	bne.n	c005caa <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 c005c9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 c005c9e:	4618      	mov	r0, r3
 c005ca0:	f7fe fc44 	bl	c00452c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 c005ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c005ca6:	637b      	str	r3, [r7, #52]	@ 0x34
 c005ca8:	e222      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 c005caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005cac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 c005cb0:	d107      	bne.n	c005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 c005cb2:	f107 0318 	add.w	r3, r7, #24
 c005cb6:	4618      	mov	r0, r3
 c005cb8:	f7fe fd92 	bl	c0047e0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 c005cbc:	69bb      	ldr	r3, [r7, #24]
 c005cbe:	637b      	str	r3, [r7, #52]	@ 0x34
 c005cc0:	e216      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 c005cc2:	2300      	movs	r3, #0
 c005cc4:	637b      	str	r3, [r7, #52]	@ 0x34
 c005cc6:	e213      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 c005cc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 c005ccc:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 c005cd0:	430b      	orrs	r3, r1
 c005cd2:	d15d      	bne.n	c005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 c005cd4:	4b2b      	ldr	r3, [pc, #172]	@ (c005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c005cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c005cda:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 c005cde:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 c005ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005ce2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 c005ce6:	d028      	beq.n	c005d3a <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 c005ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005cea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 c005cee:	d845      	bhi.n	c005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 c005cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005cf2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 c005cf6:	d013      	beq.n	c005d20 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 c005cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005cfa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 c005cfe:	d83d      	bhi.n	c005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 c005d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005d02:	2b00      	cmp	r3, #0
 c005d04:	d004      	beq.n	c005d10 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 c005d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005d08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 c005d0c:	d004      	beq.n	c005d18 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 c005d0e:	e035      	b.n	c005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 c005d10:	f7fd fd9e 	bl	c003850 <HAL_RCC_GetPCLK2Freq>
 c005d14:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c005d16:	e1eb      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 c005d18:	f7fd fc6a 	bl	c0035f0 <HAL_RCC_GetSysClockFreq>
 c005d1c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c005d1e:	e1e7      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c005d20:	4b18      	ldr	r3, [pc, #96]	@ (c005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c005d22:	681b      	ldr	r3, [r3, #0]
 c005d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c005d28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c005d2c:	d102      	bne.n	c005d34 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 c005d2e:	4b17      	ldr	r3, [pc, #92]	@ (c005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 c005d30:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c005d32:	e1dd      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 c005d34:	2300      	movs	r3, #0
 c005d36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005d38:	e1da      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c005d3a:	4b12      	ldr	r3, [pc, #72]	@ (c005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c005d3c:	681b      	ldr	r3, [r3, #0]
 c005d3e:	f003 0320 	and.w	r3, r3, #32
 c005d42:	2b20      	cmp	r3, #32
 c005d44:	d117      	bne.n	c005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c005d46:	4b0f      	ldr	r3, [pc, #60]	@ (c005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c005d48:	689b      	ldr	r3, [r3, #8]
 c005d4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c005d4e:	2b00      	cmp	r3, #0
 c005d50:	d005      	beq.n	c005d5e <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 c005d52:	4b0c      	ldr	r3, [pc, #48]	@ (c005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c005d54:	689b      	ldr	r3, [r3, #8]
 c005d56:	0e1b      	lsrs	r3, r3, #24
 c005d58:	f003 030f 	and.w	r3, r3, #15
 c005d5c:	e006      	b.n	c005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 c005d5e:	4b09      	ldr	r3, [pc, #36]	@ (c005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 c005d60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c005d64:	041b      	lsls	r3, r3, #16
 c005d66:	0e1b      	lsrs	r3, r3, #24
 c005d68:	f003 030f 	and.w	r3, r3, #15
 c005d6c:	4a06      	ldr	r2, [pc, #24]	@ (c005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 c005d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c005d72:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c005d74:	e1bc      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 c005d76:	2300      	movs	r3, #0
 c005d78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005d7a:	e1b9      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 c005d7c:	2300      	movs	r3, #0
 c005d7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005d80:	e1b6      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 c005d82:	bf00      	nop
 c005d84:	56020c00 	.word	0x56020c00
 c005d88:	0c006fc8 	.word	0x0c006fc8
 c005d8c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 c005d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 c005d94:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 c005d98:	430b      	orrs	r3, r1
 c005d9a:	d156      	bne.n	c005e4a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 c005d9c:	4ba5      	ldr	r3, [pc, #660]	@ (c006034 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c005d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 c005da2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 c005da6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 c005da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005daa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 c005dae:	d028      	beq.n	c005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 c005db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005db2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 c005db6:	d845      	bhi.n	c005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 c005db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005dba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c005dbe:	d013      	beq.n	c005de8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 c005dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005dc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 c005dc6:	d83d      	bhi.n	c005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 c005dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005dca:	2b00      	cmp	r3, #0
 c005dcc:	d004      	beq.n	c005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 c005dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c005dd4:	d004      	beq.n	c005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 c005dd6:	e035      	b.n	c005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 c005dd8:	f7fd fd26 	bl	c003828 <HAL_RCC_GetPCLK1Freq>
 c005ddc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c005dde:	e187      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 c005de0:	f7fd fc06 	bl	c0035f0 <HAL_RCC_GetSysClockFreq>
 c005de4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c005de6:	e183      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c005de8:	4b92      	ldr	r3, [pc, #584]	@ (c006034 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c005dea:	681b      	ldr	r3, [r3, #0]
 c005dec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c005df0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c005df4:	d102      	bne.n	c005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 c005df6:	4b90      	ldr	r3, [pc, #576]	@ (c006038 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 c005df8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c005dfa:	e179      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 c005dfc:	2300      	movs	r3, #0
 c005dfe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005e00:	e176      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c005e02:	4b8c      	ldr	r3, [pc, #560]	@ (c006034 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c005e04:	681b      	ldr	r3, [r3, #0]
 c005e06:	f003 0320 	and.w	r3, r3, #32
 c005e0a:	2b20      	cmp	r3, #32
 c005e0c:	d117      	bne.n	c005e3e <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c005e0e:	4b89      	ldr	r3, [pc, #548]	@ (c006034 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c005e10:	689b      	ldr	r3, [r3, #8]
 c005e12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c005e16:	2b00      	cmp	r3, #0
 c005e18:	d005      	beq.n	c005e26 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 c005e1a:	4b86      	ldr	r3, [pc, #536]	@ (c006034 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c005e1c:	689b      	ldr	r3, [r3, #8]
 c005e1e:	0e1b      	lsrs	r3, r3, #24
 c005e20:	f003 030f 	and.w	r3, r3, #15
 c005e24:	e006      	b.n	c005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 c005e26:	4b83      	ldr	r3, [pc, #524]	@ (c006034 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c005e28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c005e2c:	041b      	lsls	r3, r3, #16
 c005e2e:	0e1b      	lsrs	r3, r3, #24
 c005e30:	f003 030f 	and.w	r3, r3, #15
 c005e34:	4a81      	ldr	r2, [pc, #516]	@ (c00603c <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 c005e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c005e3a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c005e3c:	e158      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 c005e3e:	2300      	movs	r3, #0
 c005e40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005e42:	e155      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 c005e44:	2300      	movs	r3, #0
 c005e46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005e48:	e152      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 c005e4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 c005e4e:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 c005e52:	430b      	orrs	r3, r1
 c005e54:	d177      	bne.n	c005f46 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 c005e56:	4b77      	ldr	r3, [pc, #476]	@ (c006034 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c005e58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c005e5c:	f003 0318 	and.w	r3, r3, #24
 c005e60:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 c005e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005e64:	2b18      	cmp	r3, #24
 c005e66:	d86b      	bhi.n	c005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 c005e68:	a201      	add	r2, pc, #4	@ (adr r2, c005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 c005e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c005e6e:	bf00      	nop
 c005e70:	0c005ed5 	.word	0x0c005ed5
 c005e74:	0c005f41 	.word	0x0c005f41
 c005e78:	0c005f41 	.word	0x0c005f41
 c005e7c:	0c005f41 	.word	0x0c005f41
 c005e80:	0c005f41 	.word	0x0c005f41
 c005e84:	0c005f41 	.word	0x0c005f41
 c005e88:	0c005f41 	.word	0x0c005f41
 c005e8c:	0c005f41 	.word	0x0c005f41
 c005e90:	0c005edd 	.word	0x0c005edd
 c005e94:	0c005f41 	.word	0x0c005f41
 c005e98:	0c005f41 	.word	0x0c005f41
 c005e9c:	0c005f41 	.word	0x0c005f41
 c005ea0:	0c005f41 	.word	0x0c005f41
 c005ea4:	0c005f41 	.word	0x0c005f41
 c005ea8:	0c005f41 	.word	0x0c005f41
 c005eac:	0c005f41 	.word	0x0c005f41
 c005eb0:	0c005ee5 	.word	0x0c005ee5
 c005eb4:	0c005f41 	.word	0x0c005f41
 c005eb8:	0c005f41 	.word	0x0c005f41
 c005ebc:	0c005f41 	.word	0x0c005f41
 c005ec0:	0c005f41 	.word	0x0c005f41
 c005ec4:	0c005f41 	.word	0x0c005f41
 c005ec8:	0c005f41 	.word	0x0c005f41
 c005ecc:	0c005f41 	.word	0x0c005f41
 c005ed0:	0c005eff 	.word	0x0c005eff
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 c005ed4:	f7fd fcd0 	bl	c003878 <HAL_RCC_GetPCLK3Freq>
 c005ed8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c005eda:	e109      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 c005edc:	f7fd fb88 	bl	c0035f0 <HAL_RCC_GetSysClockFreq>
 c005ee0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c005ee2:	e105      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 c005ee4:	4b53      	ldr	r3, [pc, #332]	@ (c006034 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c005ee6:	681b      	ldr	r3, [r3, #0]
 c005ee8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c005eec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c005ef0:	d102      	bne.n	c005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 c005ef2:	4b51      	ldr	r3, [pc, #324]	@ (c006038 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 c005ef4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c005ef6:	e0fb      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 c005ef8:	2300      	movs	r3, #0
 c005efa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005efc:	e0f8      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c005efe:	4b4d      	ldr	r3, [pc, #308]	@ (c006034 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c005f00:	681b      	ldr	r3, [r3, #0]
 c005f02:	f003 0320 	and.w	r3, r3, #32
 c005f06:	2b20      	cmp	r3, #32
 c005f08:	d117      	bne.n	c005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c005f0a:	4b4a      	ldr	r3, [pc, #296]	@ (c006034 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c005f0c:	689b      	ldr	r3, [r3, #8]
 c005f0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c005f12:	2b00      	cmp	r3, #0
 c005f14:	d005      	beq.n	c005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 c005f16:	4b47      	ldr	r3, [pc, #284]	@ (c006034 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c005f18:	689b      	ldr	r3, [r3, #8]
 c005f1a:	0e1b      	lsrs	r3, r3, #24
 c005f1c:	f003 030f 	and.w	r3, r3, #15
 c005f20:	e006      	b.n	c005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 c005f22:	4b44      	ldr	r3, [pc, #272]	@ (c006034 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c005f24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c005f28:	041b      	lsls	r3, r3, #16
 c005f2a:	0e1b      	lsrs	r3, r3, #24
 c005f2c:	f003 030f 	and.w	r3, r3, #15
 c005f30:	4a42      	ldr	r2, [pc, #264]	@ (c00603c <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 c005f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c005f36:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c005f38:	e0da      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 c005f3a:	2300      	movs	r3, #0
 c005f3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005f3e:	e0d7      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 c005f40:	2300      	movs	r3, #0
 c005f42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005f44:	e0d4      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 c005f46:	e9d7 2300 	ldrd	r2, r3, [r7]
 c005f4a:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 c005f4e:	430b      	orrs	r3, r1
 c005f50:	d155      	bne.n	c005ffe <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 c005f52:	4b38      	ldr	r3, [pc, #224]	@ (c006034 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c005f54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c005f58:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 c005f5c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 c005f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005f60:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 c005f64:	d013      	beq.n	c005f8e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 c005f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005f68:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 c005f6c:	d844      	bhi.n	c005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 c005f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005f70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 c005f74:	d013      	beq.n	c005f9e <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 c005f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005f78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 c005f7c:	d83c      	bhi.n	c005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 c005f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005f80:	2b00      	cmp	r3, #0
 c005f82:	d014      	beq.n	c005fae <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 c005f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c005f86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 c005f8a:	d014      	beq.n	c005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 c005f8c:	e034      	b.n	c005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 c005f8e:	f107 0318 	add.w	r3, r7, #24
 c005f92:	4618      	mov	r0, r3
 c005f94:	f7fe fc24 	bl	c0047e0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 c005f98:	69fb      	ldr	r3, [r7, #28]
 c005f9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005f9c:	e0a8      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 c005f9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 c005fa2:	4618      	mov	r0, r3
 c005fa4:	f7fe fac2 	bl	c00452c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 c005fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c005faa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005fac:	e0a0      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 c005fae:	f7fd fb1f 	bl	c0035f0 <HAL_RCC_GetSysClockFreq>
 c005fb2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 c005fb4:	e09c      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 c005fb6:	4b1f      	ldr	r3, [pc, #124]	@ (c006034 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c005fb8:	681b      	ldr	r3, [r3, #0]
 c005fba:	f003 0320 	and.w	r3, r3, #32
 c005fbe:	2b20      	cmp	r3, #32
 c005fc0:	d117      	bne.n	c005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 c005fc2:	4b1c      	ldr	r3, [pc, #112]	@ (c006034 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c005fc4:	689b      	ldr	r3, [r3, #8]
 c005fc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 c005fca:	2b00      	cmp	r3, #0
 c005fcc:	d005      	beq.n	c005fda <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 c005fce:	4b19      	ldr	r3, [pc, #100]	@ (c006034 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c005fd0:	689b      	ldr	r3, [r3, #8]
 c005fd2:	0e1b      	lsrs	r3, r3, #24
 c005fd4:	f003 030f 	and.w	r3, r3, #15
 c005fd8:	e006      	b.n	c005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 c005fda:	4b16      	ldr	r3, [pc, #88]	@ (c006034 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c005fdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 c005fe0:	041b      	lsls	r3, r3, #16
 c005fe2:	0e1b      	lsrs	r3, r3, #24
 c005fe4:	f003 030f 	and.w	r3, r3, #15
 c005fe8:	4a14      	ldr	r2, [pc, #80]	@ (c00603c <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 c005fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c005fee:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 c005ff0:	e07e      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 c005ff2:	2300      	movs	r3, #0
 c005ff4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005ff6:	e07b      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 c005ff8:	2300      	movs	r3, #0
 c005ffa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 c005ffc:	e078      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 c005ffe:	e9d7 2300 	ldrd	r2, r3, [r7]
 c006002:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 c006006:	430b      	orrs	r3, r1
 c006008:	d138      	bne.n	c00607c <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 c00600a:	4b0a      	ldr	r3, [pc, #40]	@ (c006034 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c00600c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 c006010:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 c006014:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 c006016:	4b07      	ldr	r3, [pc, #28]	@ (c006034 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 c006018:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00601c:	f003 0302 	and.w	r3, r3, #2
 c006020:	2b02      	cmp	r3, #2
 c006022:	d10d      	bne.n	c006040 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 c006024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006026:	2b00      	cmp	r3, #0
 c006028:	d10a      	bne.n	c006040 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 c00602a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 c00602e:	637b      	str	r3, [r7, #52]	@ 0x34
 c006030:	e05e      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 c006032:	bf00      	nop
 c006034:	56020c00 	.word	0x56020c00
 c006038:	00f42400 	.word	0x00f42400
 c00603c:	0c006fc8 	.word	0x0c006fc8
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 c006040:	4b2e      	ldr	r3, [pc, #184]	@ (c0060fc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 c006042:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c006046:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c00604a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 c00604e:	d112      	bne.n	c006076 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 c006050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006052:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 c006056:	d10e      	bne.n	c006076 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c006058:	4b28      	ldr	r3, [pc, #160]	@ (c0060fc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 c00605a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 c00605e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c006062:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c006066:	d102      	bne.n	c00606e <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 c006068:	23fa      	movs	r3, #250	@ 0xfa
 c00606a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c00606c:	e040      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 c00606e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 c006072:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 c006074:	e03c      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 c006076:	2300      	movs	r3, #0
 c006078:	637b      	str	r3, [r7, #52]	@ 0x34
 c00607a:	e039      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 c00607c:	e9d7 2300 	ldrd	r2, r3, [r7]
 c006080:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 c006084:	430b      	orrs	r3, r1
 c006086:	d131      	bne.n	c0060ec <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 c006088:	4b1c      	ldr	r3, [pc, #112]	@ (c0060fc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 c00608a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 c00608e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 c006092:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 c006094:	4b19      	ldr	r3, [pc, #100]	@ (c0060fc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 c006096:	681b      	ldr	r3, [r3, #0]
 c006098:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 c00609c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c0060a0:	d105      	bne.n	c0060ae <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 c0060a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0060a4:	2b00      	cmp	r3, #0
 c0060a6:	d102      	bne.n	c0060ae <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 c0060a8:	4b15      	ldr	r3, [pc, #84]	@ (c006100 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 c0060aa:	637b      	str	r3, [r7, #52]	@ 0x34
 c0060ac:	e020      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 c0060ae:	4b13      	ldr	r3, [pc, #76]	@ (c0060fc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 c0060b0:	681b      	ldr	r3, [r3, #0]
 c0060b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 c0060b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c0060ba:	d106      	bne.n	c0060ca <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 c0060bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0060be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 c0060c2:	d102      	bne.n	c0060ca <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 c0060c4:	4b0f      	ldr	r3, [pc, #60]	@ (c006104 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 c0060c6:	637b      	str	r3, [r7, #52]	@ 0x34
 c0060c8:	e012      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 c0060ca:	4b0c      	ldr	r3, [pc, #48]	@ (c0060fc <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 c0060cc:	681b      	ldr	r3, [r3, #0]
 c0060ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 c0060d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c0060d6:	d106      	bne.n	c0060e6 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 c0060d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c0060da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 c0060de:	d102      	bne.n	c0060e6 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 c0060e0:	4b09      	ldr	r3, [pc, #36]	@ (c006108 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 c0060e2:	637b      	str	r3, [r7, #52]	@ 0x34
 c0060e4:	e004      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 c0060e6:	2300      	movs	r3, #0
 c0060e8:	637b      	str	r3, [r7, #52]	@ 0x34
 c0060ea:	e001      	b.n	c0060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 c0060ec:	2300      	movs	r3, #0
 c0060ee:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 c0060f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 c0060f2:	4618      	mov	r0, r3
 c0060f4:	3738      	adds	r7, #56	@ 0x38
 c0060f6:	46bd      	mov	sp, r7
 c0060f8:	bd80      	pop	{r7, pc}
 c0060fa:	bf00      	nop
 c0060fc:	56020c00 	.word	0x56020c00
 c006100:	02dc6c00 	.word	0x02dc6c00
 c006104:	016e3600 	.word	0x016e3600
 c006108:	00f42400 	.word	0x00f42400

0c00610c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 c00610c:	b580      	push	{r7, lr}
 c00610e:	b084      	sub	sp, #16
 c006110:	af00      	add	r7, sp, #0
 c006112:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 c006114:	4b47      	ldr	r3, [pc, #284]	@ (c006234 <RCCEx_PLL2_Config+0x128>)
 c006116:	681b      	ldr	r3, [r3, #0]
 c006118:	4a46      	ldr	r2, [pc, #280]	@ (c006234 <RCCEx_PLL2_Config+0x128>)
 c00611a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 c00611e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 c006120:	f7fb fa5e 	bl	c0015e0 <HAL_GetTick>
 c006124:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 c006126:	e008      	b.n	c00613a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 c006128:	f7fb fa5a 	bl	c0015e0 <HAL_GetTick>
 c00612c:	4602      	mov	r2, r0
 c00612e:	68fb      	ldr	r3, [r7, #12]
 c006130:	1ad3      	subs	r3, r2, r3
 c006132:	2b02      	cmp	r3, #2
 c006134:	d901      	bls.n	c00613a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 c006136:	2303      	movs	r3, #3
 c006138:	e077      	b.n	c00622a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 c00613a:	4b3e      	ldr	r3, [pc, #248]	@ (c006234 <RCCEx_PLL2_Config+0x128>)
 c00613c:	681b      	ldr	r3, [r3, #0]
 c00613e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c006142:	2b00      	cmp	r3, #0
 c006144:	d1f0      	bne.n	c006128 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 c006146:	4b3b      	ldr	r3, [pc, #236]	@ (c006234 <RCCEx_PLL2_Config+0x128>)
 c006148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c00614a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 c00614e:	f023 0303 	bic.w	r3, r3, #3
 c006152:	687a      	ldr	r2, [r7, #4]
 c006154:	6811      	ldr	r1, [r2, #0]
 c006156:	687a      	ldr	r2, [r7, #4]
 c006158:	6852      	ldr	r2, [r2, #4]
 c00615a:	3a01      	subs	r2, #1
 c00615c:	0212      	lsls	r2, r2, #8
 c00615e:	430a      	orrs	r2, r1
 c006160:	4934      	ldr	r1, [pc, #208]	@ (c006234 <RCCEx_PLL2_Config+0x128>)
 c006162:	4313      	orrs	r3, r2
 c006164:	62cb      	str	r3, [r1, #44]	@ 0x2c
 c006166:	4b33      	ldr	r3, [pc, #204]	@ (c006234 <RCCEx_PLL2_Config+0x128>)
 c006168:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 c00616a:	4b33      	ldr	r3, [pc, #204]	@ (c006238 <RCCEx_PLL2_Config+0x12c>)
 c00616c:	4013      	ands	r3, r2
 c00616e:	687a      	ldr	r2, [r7, #4]
 c006170:	6892      	ldr	r2, [r2, #8]
 c006172:	3a01      	subs	r2, #1
 c006174:	f3c2 0108 	ubfx	r1, r2, #0, #9
 c006178:	687a      	ldr	r2, [r7, #4]
 c00617a:	68d2      	ldr	r2, [r2, #12]
 c00617c:	3a01      	subs	r2, #1
 c00617e:	0252      	lsls	r2, r2, #9
 c006180:	b292      	uxth	r2, r2
 c006182:	4311      	orrs	r1, r2
 c006184:	687a      	ldr	r2, [r7, #4]
 c006186:	6912      	ldr	r2, [r2, #16]
 c006188:	3a01      	subs	r2, #1
 c00618a:	0412      	lsls	r2, r2, #16
 c00618c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 c006190:	4311      	orrs	r1, r2
 c006192:	687a      	ldr	r2, [r7, #4]
 c006194:	6952      	ldr	r2, [r2, #20]
 c006196:	3a01      	subs	r2, #1
 c006198:	0612      	lsls	r2, r2, #24
 c00619a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 c00619e:	430a      	orrs	r2, r1
 c0061a0:	4924      	ldr	r1, [pc, #144]	@ (c006234 <RCCEx_PLL2_Config+0x128>)
 c0061a2:	4313      	orrs	r3, r2
 c0061a4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 c0061a6:	4b23      	ldr	r3, [pc, #140]	@ (c006234 <RCCEx_PLL2_Config+0x128>)
 c0061a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c0061aa:	f023 020c 	bic.w	r2, r3, #12
 c0061ae:	687b      	ldr	r3, [r7, #4]
 c0061b0:	699b      	ldr	r3, [r3, #24]
 c0061b2:	4920      	ldr	r1, [pc, #128]	@ (c006234 <RCCEx_PLL2_Config+0x128>)
 c0061b4:	4313      	orrs	r3, r2
 c0061b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 c0061b8:	4b1e      	ldr	r3, [pc, #120]	@ (c006234 <RCCEx_PLL2_Config+0x128>)
 c0061ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 c0061bc:	687b      	ldr	r3, [r7, #4]
 c0061be:	6a1b      	ldr	r3, [r3, #32]
 c0061c0:	491c      	ldr	r1, [pc, #112]	@ (c006234 <RCCEx_PLL2_Config+0x128>)
 c0061c2:	4313      	orrs	r3, r2
 c0061c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 c0061c6:	4b1b      	ldr	r3, [pc, #108]	@ (c006234 <RCCEx_PLL2_Config+0x128>)
 c0061c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c0061ca:	4a1a      	ldr	r2, [pc, #104]	@ (c006234 <RCCEx_PLL2_Config+0x128>)
 c0061cc:	f023 0310 	bic.w	r3, r3, #16
 c0061d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 c0061d2:	4b18      	ldr	r3, [pc, #96]	@ (c006234 <RCCEx_PLL2_Config+0x128>)
 c0061d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 c0061d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 c0061da:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 c0061de:	687a      	ldr	r2, [r7, #4]
 c0061e0:	69d2      	ldr	r2, [r2, #28]
 c0061e2:	00d2      	lsls	r2, r2, #3
 c0061e4:	4913      	ldr	r1, [pc, #76]	@ (c006234 <RCCEx_PLL2_Config+0x128>)
 c0061e6:	4313      	orrs	r3, r2
 c0061e8:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 c0061ea:	4b12      	ldr	r3, [pc, #72]	@ (c006234 <RCCEx_PLL2_Config+0x128>)
 c0061ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c0061ee:	4a11      	ldr	r2, [pc, #68]	@ (c006234 <RCCEx_PLL2_Config+0x128>)
 c0061f0:	f043 0310 	orr.w	r3, r3, #16
 c0061f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 c0061f6:	4b0f      	ldr	r3, [pc, #60]	@ (c006234 <RCCEx_PLL2_Config+0x128>)
 c0061f8:	681b      	ldr	r3, [r3, #0]
 c0061fa:	4a0e      	ldr	r2, [pc, #56]	@ (c006234 <RCCEx_PLL2_Config+0x128>)
 c0061fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 c006200:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 c006202:	f7fb f9ed 	bl	c0015e0 <HAL_GetTick>
 c006206:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 c006208:	e008      	b.n	c00621c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 c00620a:	f7fb f9e9 	bl	c0015e0 <HAL_GetTick>
 c00620e:	4602      	mov	r2, r0
 c006210:	68fb      	ldr	r3, [r7, #12]
 c006212:	1ad3      	subs	r3, r2, r3
 c006214:	2b02      	cmp	r3, #2
 c006216:	d901      	bls.n	c00621c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 c006218:	2303      	movs	r3, #3
 c00621a:	e006      	b.n	c00622a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 c00621c:	4b05      	ldr	r3, [pc, #20]	@ (c006234 <RCCEx_PLL2_Config+0x128>)
 c00621e:	681b      	ldr	r3, [r3, #0]
 c006220:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 c006224:	2b00      	cmp	r3, #0
 c006226:	d0f0      	beq.n	c00620a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 c006228:	2300      	movs	r3, #0

}
 c00622a:	4618      	mov	r0, r3
 c00622c:	3710      	adds	r7, #16
 c00622e:	46bd      	mov	sp, r7
 c006230:	bd80      	pop	{r7, pc}
 c006232:	bf00      	nop
 c006234:	56020c00 	.word	0x56020c00
 c006238:	80800000 	.word	0x80800000

0c00623c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 c00623c:	b580      	push	{r7, lr}
 c00623e:	b084      	sub	sp, #16
 c006240:	af00      	add	r7, sp, #0
 c006242:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 c006244:	4b47      	ldr	r3, [pc, #284]	@ (c006364 <RCCEx_PLL3_Config+0x128>)
 c006246:	681b      	ldr	r3, [r3, #0]
 c006248:	4a46      	ldr	r2, [pc, #280]	@ (c006364 <RCCEx_PLL3_Config+0x128>)
 c00624a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 c00624e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 c006250:	f7fb f9c6 	bl	c0015e0 <HAL_GetTick>
 c006254:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 c006256:	e008      	b.n	c00626a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 c006258:	f7fb f9c2 	bl	c0015e0 <HAL_GetTick>
 c00625c:	4602      	mov	r2, r0
 c00625e:	68fb      	ldr	r3, [r7, #12]
 c006260:	1ad3      	subs	r3, r2, r3
 c006262:	2b02      	cmp	r3, #2
 c006264:	d901      	bls.n	c00626a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 c006266:	2303      	movs	r3, #3
 c006268:	e077      	b.n	c00635a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 c00626a:	4b3e      	ldr	r3, [pc, #248]	@ (c006364 <RCCEx_PLL3_Config+0x128>)
 c00626c:	681b      	ldr	r3, [r3, #0]
 c00626e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 c006272:	2b00      	cmp	r3, #0
 c006274:	d1f0      	bne.n	c006258 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 c006276:	4b3b      	ldr	r3, [pc, #236]	@ (c006364 <RCCEx_PLL3_Config+0x128>)
 c006278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c00627a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 c00627e:	f023 0303 	bic.w	r3, r3, #3
 c006282:	687a      	ldr	r2, [r7, #4]
 c006284:	6811      	ldr	r1, [r2, #0]
 c006286:	687a      	ldr	r2, [r7, #4]
 c006288:	6852      	ldr	r2, [r2, #4]
 c00628a:	3a01      	subs	r2, #1
 c00628c:	0212      	lsls	r2, r2, #8
 c00628e:	430a      	orrs	r2, r1
 c006290:	4934      	ldr	r1, [pc, #208]	@ (c006364 <RCCEx_PLL3_Config+0x128>)
 c006292:	4313      	orrs	r3, r2
 c006294:	630b      	str	r3, [r1, #48]	@ 0x30
 c006296:	4b33      	ldr	r3, [pc, #204]	@ (c006364 <RCCEx_PLL3_Config+0x128>)
 c006298:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 c00629a:	4b33      	ldr	r3, [pc, #204]	@ (c006368 <RCCEx_PLL3_Config+0x12c>)
 c00629c:	4013      	ands	r3, r2
 c00629e:	687a      	ldr	r2, [r7, #4]
 c0062a0:	6892      	ldr	r2, [r2, #8]
 c0062a2:	3a01      	subs	r2, #1
 c0062a4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 c0062a8:	687a      	ldr	r2, [r7, #4]
 c0062aa:	68d2      	ldr	r2, [r2, #12]
 c0062ac:	3a01      	subs	r2, #1
 c0062ae:	0252      	lsls	r2, r2, #9
 c0062b0:	b292      	uxth	r2, r2
 c0062b2:	4311      	orrs	r1, r2
 c0062b4:	687a      	ldr	r2, [r7, #4]
 c0062b6:	6912      	ldr	r2, [r2, #16]
 c0062b8:	3a01      	subs	r2, #1
 c0062ba:	0412      	lsls	r2, r2, #16
 c0062bc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 c0062c0:	4311      	orrs	r1, r2
 c0062c2:	687a      	ldr	r2, [r7, #4]
 c0062c4:	6952      	ldr	r2, [r2, #20]
 c0062c6:	3a01      	subs	r2, #1
 c0062c8:	0612      	lsls	r2, r2, #24
 c0062ca:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 c0062ce:	430a      	orrs	r2, r1
 c0062d0:	4924      	ldr	r1, [pc, #144]	@ (c006364 <RCCEx_PLL3_Config+0x128>)
 c0062d2:	4313      	orrs	r3, r2
 c0062d4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 c0062d6:	4b23      	ldr	r3, [pc, #140]	@ (c006364 <RCCEx_PLL3_Config+0x128>)
 c0062d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c0062da:	f023 020c 	bic.w	r2, r3, #12
 c0062de:	687b      	ldr	r3, [r7, #4]
 c0062e0:	699b      	ldr	r3, [r3, #24]
 c0062e2:	4920      	ldr	r1, [pc, #128]	@ (c006364 <RCCEx_PLL3_Config+0x128>)
 c0062e4:	4313      	orrs	r3, r2
 c0062e6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 c0062e8:	4b1e      	ldr	r3, [pc, #120]	@ (c006364 <RCCEx_PLL3_Config+0x128>)
 c0062ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 c0062ec:	687b      	ldr	r3, [r7, #4]
 c0062ee:	6a1b      	ldr	r3, [r3, #32]
 c0062f0:	491c      	ldr	r1, [pc, #112]	@ (c006364 <RCCEx_PLL3_Config+0x128>)
 c0062f2:	4313      	orrs	r3, r2
 c0062f4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 c0062f6:	4b1b      	ldr	r3, [pc, #108]	@ (c006364 <RCCEx_PLL3_Config+0x128>)
 c0062f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c0062fa:	4a1a      	ldr	r2, [pc, #104]	@ (c006364 <RCCEx_PLL3_Config+0x128>)
 c0062fc:	f023 0310 	bic.w	r3, r3, #16
 c006300:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 c006302:	4b18      	ldr	r3, [pc, #96]	@ (c006364 <RCCEx_PLL3_Config+0x128>)
 c006304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 c006306:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 c00630a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 c00630e:	687a      	ldr	r2, [r7, #4]
 c006310:	69d2      	ldr	r2, [r2, #28]
 c006312:	00d2      	lsls	r2, r2, #3
 c006314:	4913      	ldr	r1, [pc, #76]	@ (c006364 <RCCEx_PLL3_Config+0x128>)
 c006316:	4313      	orrs	r3, r2
 c006318:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 c00631a:	4b12      	ldr	r3, [pc, #72]	@ (c006364 <RCCEx_PLL3_Config+0x128>)
 c00631c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 c00631e:	4a11      	ldr	r2, [pc, #68]	@ (c006364 <RCCEx_PLL3_Config+0x128>)
 c006320:	f043 0310 	orr.w	r3, r3, #16
 c006324:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 c006326:	4b0f      	ldr	r3, [pc, #60]	@ (c006364 <RCCEx_PLL3_Config+0x128>)
 c006328:	681b      	ldr	r3, [r3, #0]
 c00632a:	4a0e      	ldr	r2, [pc, #56]	@ (c006364 <RCCEx_PLL3_Config+0x128>)
 c00632c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 c006330:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 c006332:	f7fb f955 	bl	c0015e0 <HAL_GetTick>
 c006336:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 c006338:	e008      	b.n	c00634c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 c00633a:	f7fb f951 	bl	c0015e0 <HAL_GetTick>
 c00633e:	4602      	mov	r2, r0
 c006340:	68fb      	ldr	r3, [r7, #12]
 c006342:	1ad3      	subs	r3, r2, r3
 c006344:	2b02      	cmp	r3, #2
 c006346:	d901      	bls.n	c00634c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 c006348:	2303      	movs	r3, #3
 c00634a:	e006      	b.n	c00635a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 c00634c:	4b05      	ldr	r3, [pc, #20]	@ (c006364 <RCCEx_PLL3_Config+0x128>)
 c00634e:	681b      	ldr	r3, [r3, #0]
 c006350:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 c006354:	2b00      	cmp	r3, #0
 c006356:	d0f0      	beq.n	c00633a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 c006358:	2300      	movs	r3, #0
}
 c00635a:	4618      	mov	r0, r3
 c00635c:	3710      	adds	r7, #16
 c00635e:	46bd      	mov	sp, r7
 c006360:	bd80      	pop	{r7, pc}
 c006362:	bf00      	nop
 c006364:	56020c00 	.word	0x56020c00
 c006368:	80800000 	.word	0x80800000

0c00636c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 c00636c:	b580      	push	{r7, lr}
 c00636e:	b082      	sub	sp, #8
 c006370:	af00      	add	r7, sp, #0
 c006372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 c006374:	687b      	ldr	r3, [r7, #4]
 c006376:	2b00      	cmp	r3, #0
 c006378:	d101      	bne.n	c00637e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 c00637a:	2301      	movs	r3, #1
 c00637c:	e042      	b.n	c006404 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 c00637e:	687b      	ldr	r3, [r7, #4]
 c006380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c006384:	2b00      	cmp	r3, #0
 c006386:	d106      	bne.n	c006396 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 c006388:	687b      	ldr	r3, [r7, #4]
 c00638a:	2200      	movs	r2, #0
 c00638c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 c006390:	6878      	ldr	r0, [r7, #4]
 c006392:	f7fa fdf1 	bl	c000f78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 c006396:	687b      	ldr	r3, [r7, #4]
 c006398:	2224      	movs	r2, #36	@ 0x24
 c00639a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 c00639e:	687b      	ldr	r3, [r7, #4]
 c0063a0:	681b      	ldr	r3, [r3, #0]
 c0063a2:	681a      	ldr	r2, [r3, #0]
 c0063a4:	687b      	ldr	r3, [r7, #4]
 c0063a6:	681b      	ldr	r3, [r3, #0]
 c0063a8:	f022 0201 	bic.w	r2, r2, #1
 c0063ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 c0063ae:	687b      	ldr	r3, [r7, #4]
 c0063b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0063b2:	2b00      	cmp	r3, #0
 c0063b4:	d002      	beq.n	c0063bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 c0063b6:	6878      	ldr	r0, [r7, #4]
 c0063b8:	f000 faa0 	bl	c0068fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 c0063bc:	6878      	ldr	r0, [r7, #4]
 c0063be:	f000 f8fd 	bl	c0065bc <UART_SetConfig>
 c0063c2:	4603      	mov	r3, r0
 c0063c4:	2b01      	cmp	r3, #1
 c0063c6:	d101      	bne.n	c0063cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 c0063c8:	2301      	movs	r3, #1
 c0063ca:	e01b      	b.n	c006404 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 c0063cc:	687b      	ldr	r3, [r7, #4]
 c0063ce:	681b      	ldr	r3, [r3, #0]
 c0063d0:	685a      	ldr	r2, [r3, #4]
 c0063d2:	687b      	ldr	r3, [r7, #4]
 c0063d4:	681b      	ldr	r3, [r3, #0]
 c0063d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 c0063da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 c0063dc:	687b      	ldr	r3, [r7, #4]
 c0063de:	681b      	ldr	r3, [r3, #0]
 c0063e0:	689a      	ldr	r2, [r3, #8]
 c0063e2:	687b      	ldr	r3, [r7, #4]
 c0063e4:	681b      	ldr	r3, [r3, #0]
 c0063e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 c0063ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 c0063ec:	687b      	ldr	r3, [r7, #4]
 c0063ee:	681b      	ldr	r3, [r3, #0]
 c0063f0:	681a      	ldr	r2, [r3, #0]
 c0063f2:	687b      	ldr	r3, [r7, #4]
 c0063f4:	681b      	ldr	r3, [r3, #0]
 c0063f6:	f042 0201 	orr.w	r2, r2, #1
 c0063fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 c0063fc:	6878      	ldr	r0, [r7, #4]
 c0063fe:	f000 fb1f 	bl	c006a40 <UART_CheckIdleState>
 c006402:	4603      	mov	r3, r0
}
 c006404:	4618      	mov	r0, r3
 c006406:	3708      	adds	r7, #8
 c006408:	46bd      	mov	sp, r7
 c00640a:	bd80      	pop	{r7, pc}

0c00640c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 c00640c:	b580      	push	{r7, lr}
 c00640e:	b08a      	sub	sp, #40	@ 0x28
 c006410:	af02      	add	r7, sp, #8
 c006412:	60f8      	str	r0, [r7, #12]
 c006414:	60b9      	str	r1, [r7, #8]
 c006416:	603b      	str	r3, [r7, #0]
 c006418:	4613      	mov	r3, r2
 c00641a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 c00641c:	68fb      	ldr	r3, [r7, #12]
 c00641e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 c006422:	2b20      	cmp	r3, #32
 c006424:	f040 80c4 	bne.w	c0065b0 <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 c006428:	68bb      	ldr	r3, [r7, #8]
 c00642a:	2b00      	cmp	r3, #0
 c00642c:	d002      	beq.n	c006434 <HAL_UART_Receive+0x28>
 c00642e:	88fb      	ldrh	r3, [r7, #6]
 c006430:	2b00      	cmp	r3, #0
 c006432:	d101      	bne.n	c006438 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 c006434:	2301      	movs	r3, #1
 c006436:	e0bc      	b.n	c0065b2 <HAL_UART_Receive+0x1a6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 c006438:	68fb      	ldr	r3, [r7, #12]
 c00643a:	681b      	ldr	r3, [r3, #0]
 c00643c:	689b      	ldr	r3, [r3, #8]
 c00643e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 c006442:	2b40      	cmp	r3, #64	@ 0x40
 c006444:	d107      	bne.n	c006456 <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 c006446:	68fb      	ldr	r3, [r7, #12]
 c006448:	681b      	ldr	r3, [r3, #0]
 c00644a:	689a      	ldr	r2, [r3, #8]
 c00644c:	68fb      	ldr	r3, [r7, #12]
 c00644e:	681b      	ldr	r3, [r3, #0]
 c006450:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 c006454:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c006456:	68fb      	ldr	r3, [r7, #12]
 c006458:	2200      	movs	r2, #0
 c00645a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 c00645e:	68fb      	ldr	r3, [r7, #12]
 c006460:	2222      	movs	r2, #34	@ 0x22
 c006462:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c006466:	68fb      	ldr	r3, [r7, #12]
 c006468:	2200      	movs	r2, #0
 c00646a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 c00646c:	f7fb f8b8 	bl	c0015e0 <HAL_GetTick>
 c006470:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 c006472:	68fb      	ldr	r3, [r7, #12]
 c006474:	88fa      	ldrh	r2, [r7, #6]
 c006476:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 c00647a:	68fb      	ldr	r3, [r7, #12]
 c00647c:	88fa      	ldrh	r2, [r7, #6]
 c00647e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 c006482:	68fb      	ldr	r3, [r7, #12]
 c006484:	689b      	ldr	r3, [r3, #8]
 c006486:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 c00648a:	d10e      	bne.n	c0064aa <HAL_UART_Receive+0x9e>
 c00648c:	68fb      	ldr	r3, [r7, #12]
 c00648e:	691b      	ldr	r3, [r3, #16]
 c006490:	2b00      	cmp	r3, #0
 c006492:	d105      	bne.n	c0064a0 <HAL_UART_Receive+0x94>
 c006494:	68fb      	ldr	r3, [r7, #12]
 c006496:	f240 12ff 	movw	r2, #511	@ 0x1ff
 c00649a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 c00649e:	e02d      	b.n	c0064fc <HAL_UART_Receive+0xf0>
 c0064a0:	68fb      	ldr	r3, [r7, #12]
 c0064a2:	22ff      	movs	r2, #255	@ 0xff
 c0064a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 c0064a8:	e028      	b.n	c0064fc <HAL_UART_Receive+0xf0>
 c0064aa:	68fb      	ldr	r3, [r7, #12]
 c0064ac:	689b      	ldr	r3, [r3, #8]
 c0064ae:	2b00      	cmp	r3, #0
 c0064b0:	d10d      	bne.n	c0064ce <HAL_UART_Receive+0xc2>
 c0064b2:	68fb      	ldr	r3, [r7, #12]
 c0064b4:	691b      	ldr	r3, [r3, #16]
 c0064b6:	2b00      	cmp	r3, #0
 c0064b8:	d104      	bne.n	c0064c4 <HAL_UART_Receive+0xb8>
 c0064ba:	68fb      	ldr	r3, [r7, #12]
 c0064bc:	22ff      	movs	r2, #255	@ 0xff
 c0064be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 c0064c2:	e01b      	b.n	c0064fc <HAL_UART_Receive+0xf0>
 c0064c4:	68fb      	ldr	r3, [r7, #12]
 c0064c6:	227f      	movs	r2, #127	@ 0x7f
 c0064c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 c0064cc:	e016      	b.n	c0064fc <HAL_UART_Receive+0xf0>
 c0064ce:	68fb      	ldr	r3, [r7, #12]
 c0064d0:	689b      	ldr	r3, [r3, #8]
 c0064d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c0064d6:	d10d      	bne.n	c0064f4 <HAL_UART_Receive+0xe8>
 c0064d8:	68fb      	ldr	r3, [r7, #12]
 c0064da:	691b      	ldr	r3, [r3, #16]
 c0064dc:	2b00      	cmp	r3, #0
 c0064de:	d104      	bne.n	c0064ea <HAL_UART_Receive+0xde>
 c0064e0:	68fb      	ldr	r3, [r7, #12]
 c0064e2:	227f      	movs	r2, #127	@ 0x7f
 c0064e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 c0064e8:	e008      	b.n	c0064fc <HAL_UART_Receive+0xf0>
 c0064ea:	68fb      	ldr	r3, [r7, #12]
 c0064ec:	223f      	movs	r2, #63	@ 0x3f
 c0064ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 c0064f2:	e003      	b.n	c0064fc <HAL_UART_Receive+0xf0>
 c0064f4:	68fb      	ldr	r3, [r7, #12]
 c0064f6:	2200      	movs	r2, #0
 c0064f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 c0064fc:	68fb      	ldr	r3, [r7, #12]
 c0064fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 c006502:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c006504:	68fb      	ldr	r3, [r7, #12]
 c006506:	689b      	ldr	r3, [r3, #8]
 c006508:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 c00650c:	d108      	bne.n	c006520 <HAL_UART_Receive+0x114>
 c00650e:	68fb      	ldr	r3, [r7, #12]
 c006510:	691b      	ldr	r3, [r3, #16]
 c006512:	2b00      	cmp	r3, #0
 c006514:	d104      	bne.n	c006520 <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 c006516:	2300      	movs	r3, #0
 c006518:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 c00651a:	68bb      	ldr	r3, [r7, #8]
 c00651c:	61bb      	str	r3, [r7, #24]
 c00651e:	e003      	b.n	c006528 <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 c006520:	68bb      	ldr	r3, [r7, #8]
 c006522:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 c006524:	2300      	movs	r3, #0
 c006526:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 c006528:	e036      	b.n	c006598 <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 c00652a:	683b      	ldr	r3, [r7, #0]
 c00652c:	9300      	str	r3, [sp, #0]
 c00652e:	697b      	ldr	r3, [r7, #20]
 c006530:	2200      	movs	r2, #0
 c006532:	2120      	movs	r1, #32
 c006534:	68f8      	ldr	r0, [r7, #12]
 c006536:	f000 fb2d 	bl	c006b94 <UART_WaitOnFlagUntilTimeout>
 c00653a:	4603      	mov	r3, r0
 c00653c:	2b00      	cmp	r3, #0
 c00653e:	d005      	beq.n	c00654c <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 c006540:	68fb      	ldr	r3, [r7, #12]
 c006542:	2220      	movs	r2, #32
 c006544:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 c006548:	2303      	movs	r3, #3
 c00654a:	e032      	b.n	c0065b2 <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 c00654c:	69fb      	ldr	r3, [r7, #28]
 c00654e:	2b00      	cmp	r3, #0
 c006550:	d10c      	bne.n	c00656c <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 c006552:	68fb      	ldr	r3, [r7, #12]
 c006554:	681b      	ldr	r3, [r3, #0]
 c006556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c006558:	b29a      	uxth	r2, r3
 c00655a:	8a7b      	ldrh	r3, [r7, #18]
 c00655c:	4013      	ands	r3, r2
 c00655e:	b29a      	uxth	r2, r3
 c006560:	69bb      	ldr	r3, [r7, #24]
 c006562:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 c006564:	69bb      	ldr	r3, [r7, #24]
 c006566:	3302      	adds	r3, #2
 c006568:	61bb      	str	r3, [r7, #24]
 c00656a:	e00c      	b.n	c006586 <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 c00656c:	68fb      	ldr	r3, [r7, #12]
 c00656e:	681b      	ldr	r3, [r3, #0]
 c006570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c006572:	b2da      	uxtb	r2, r3
 c006574:	8a7b      	ldrh	r3, [r7, #18]
 c006576:	b2db      	uxtb	r3, r3
 c006578:	4013      	ands	r3, r2
 c00657a:	b2da      	uxtb	r2, r3
 c00657c:	69fb      	ldr	r3, [r7, #28]
 c00657e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 c006580:	69fb      	ldr	r3, [r7, #28]
 c006582:	3301      	adds	r3, #1
 c006584:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 c006586:	68fb      	ldr	r3, [r7, #12]
 c006588:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 c00658c:	b29b      	uxth	r3, r3
 c00658e:	3b01      	subs	r3, #1
 c006590:	b29a      	uxth	r2, r3
 c006592:	68fb      	ldr	r3, [r7, #12]
 c006594:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 c006598:	68fb      	ldr	r3, [r7, #12]
 c00659a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 c00659e:	b29b      	uxth	r3, r3
 c0065a0:	2b00      	cmp	r3, #0
 c0065a2:	d1c2      	bne.n	c00652a <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 c0065a4:	68fb      	ldr	r3, [r7, #12]
 c0065a6:	2220      	movs	r2, #32
 c0065a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 c0065ac:	2300      	movs	r3, #0
 c0065ae:	e000      	b.n	c0065b2 <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 c0065b0:	2302      	movs	r3, #2
  }
}
 c0065b2:	4618      	mov	r0, r3
 c0065b4:	3720      	adds	r7, #32
 c0065b6:	46bd      	mov	sp, r7
 c0065b8:	bd80      	pop	{r7, pc}
	...

0c0065bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 c0065bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 c0065c0:	b094      	sub	sp, #80	@ 0x50
 c0065c2:	af00      	add	r7, sp, #0
 c0065c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 c0065c6:	2300      	movs	r3, #0
 c0065c8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 c0065cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0065ce:	681a      	ldr	r2, [r3, #0]
 c0065d0:	4b7e      	ldr	r3, [pc, #504]	@ (c0067cc <UART_SetConfig+0x210>)
 c0065d2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c0065d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0065d6:	689a      	ldr	r2, [r3, #8]
 c0065d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0065da:	691b      	ldr	r3, [r3, #16]
 c0065dc:	431a      	orrs	r2, r3
 c0065de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0065e0:	695b      	ldr	r3, [r3, #20]
 c0065e2:	431a      	orrs	r2, r3
 c0065e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0065e6:	69db      	ldr	r3, [r3, #28]
 c0065e8:	4313      	orrs	r3, r2
 c0065ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 c0065ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0065ee:	681b      	ldr	r3, [r3, #0]
 c0065f0:	681b      	ldr	r3, [r3, #0]
 c0065f2:	4977      	ldr	r1, [pc, #476]	@ (c0067d0 <UART_SetConfig+0x214>)
 c0065f4:	4019      	ands	r1, r3
 c0065f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0065f8:	681a      	ldr	r2, [r3, #0]
 c0065fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 c0065fc:	430b      	orrs	r3, r1
 c0065fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 c006600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c006602:	681b      	ldr	r3, [r3, #0]
 c006604:	685b      	ldr	r3, [r3, #4]
 c006606:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 c00660a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00660c:	68d9      	ldr	r1, [r3, #12]
 c00660e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c006610:	681a      	ldr	r2, [r3, #0]
 c006612:	ea40 0301 	orr.w	r3, r0, r1
 c006616:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 c006618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00661a:	699b      	ldr	r3, [r3, #24]
 c00661c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 c00661e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c006620:	681a      	ldr	r2, [r3, #0]
 c006622:	4b6a      	ldr	r3, [pc, #424]	@ (c0067cc <UART_SetConfig+0x210>)
 c006624:	429a      	cmp	r2, r3
 c006626:	d009      	beq.n	c00663c <UART_SetConfig+0x80>
 c006628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00662a:	681a      	ldr	r2, [r3, #0]
 c00662c:	4b69      	ldr	r3, [pc, #420]	@ (c0067d4 <UART_SetConfig+0x218>)
 c00662e:	429a      	cmp	r2, r3
 c006630:	d004      	beq.n	c00663c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 c006632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c006634:	6a1a      	ldr	r2, [r3, #32]
 c006636:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 c006638:	4313      	orrs	r3, r2
 c00663a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 c00663c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00663e:	681b      	ldr	r3, [r3, #0]
 c006640:	689b      	ldr	r3, [r3, #8]
 c006642:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 c006646:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 c00664a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00664c:	681a      	ldr	r2, [r3, #0]
 c00664e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 c006650:	430b      	orrs	r3, r1
 c006652:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 c006654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c006656:	681b      	ldr	r3, [r3, #0]
 c006658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 c00665a:	f023 000f 	bic.w	r0, r3, #15
 c00665e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c006660:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 c006662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c006664:	681a      	ldr	r2, [r3, #0]
 c006666:	ea40 0301 	orr.w	r3, r0, r1
 c00666a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 c00666c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00666e:	681a      	ldr	r2, [r3, #0]
 c006670:	4b59      	ldr	r3, [pc, #356]	@ (c0067d8 <UART_SetConfig+0x21c>)
 c006672:	429a      	cmp	r2, r3
 c006674:	d102      	bne.n	c00667c <UART_SetConfig+0xc0>
 c006676:	2301      	movs	r3, #1
 c006678:	64bb      	str	r3, [r7, #72]	@ 0x48
 c00667a:	e029      	b.n	c0066d0 <UART_SetConfig+0x114>
 c00667c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00667e:	681a      	ldr	r2, [r3, #0]
 c006680:	4b56      	ldr	r3, [pc, #344]	@ (c0067dc <UART_SetConfig+0x220>)
 c006682:	429a      	cmp	r2, r3
 c006684:	d102      	bne.n	c00668c <UART_SetConfig+0xd0>
 c006686:	2302      	movs	r3, #2
 c006688:	64bb      	str	r3, [r7, #72]	@ 0x48
 c00668a:	e021      	b.n	c0066d0 <UART_SetConfig+0x114>
 c00668c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00668e:	681a      	ldr	r2, [r3, #0]
 c006690:	4b53      	ldr	r3, [pc, #332]	@ (c0067e0 <UART_SetConfig+0x224>)
 c006692:	429a      	cmp	r2, r3
 c006694:	d102      	bne.n	c00669c <UART_SetConfig+0xe0>
 c006696:	2304      	movs	r3, #4
 c006698:	64bb      	str	r3, [r7, #72]	@ 0x48
 c00669a:	e019      	b.n	c0066d0 <UART_SetConfig+0x114>
 c00669c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00669e:	681a      	ldr	r2, [r3, #0]
 c0066a0:	4b50      	ldr	r3, [pc, #320]	@ (c0067e4 <UART_SetConfig+0x228>)
 c0066a2:	429a      	cmp	r2, r3
 c0066a4:	d102      	bne.n	c0066ac <UART_SetConfig+0xf0>
 c0066a6:	2308      	movs	r3, #8
 c0066a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 c0066aa:	e011      	b.n	c0066d0 <UART_SetConfig+0x114>
 c0066ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0066ae:	681b      	ldr	r3, [r3, #0]
 c0066b0:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
 c0066b4:	d102      	bne.n	c0066bc <UART_SetConfig+0x100>
 c0066b6:	2310      	movs	r3, #16
 c0066b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 c0066ba:	e009      	b.n	c0066d0 <UART_SetConfig+0x114>
 c0066bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0066be:	681a      	ldr	r2, [r3, #0]
 c0066c0:	4b44      	ldr	r3, [pc, #272]	@ (c0067d4 <UART_SetConfig+0x218>)
 c0066c2:	429a      	cmp	r2, r3
 c0066c4:	d102      	bne.n	c0066cc <UART_SetConfig+0x110>
 c0066c6:	2320      	movs	r3, #32
 c0066c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 c0066ca:	e001      	b.n	c0066d0 <UART_SetConfig+0x114>
 c0066cc:	2300      	movs	r3, #0
 c0066ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 c0066d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0066d2:	681a      	ldr	r2, [r3, #0]
 c0066d4:	4b3d      	ldr	r3, [pc, #244]	@ (c0067cc <UART_SetConfig+0x210>)
 c0066d6:	429a      	cmp	r2, r3
 c0066d8:	d005      	beq.n	c0066e6 <UART_SetConfig+0x12a>
 c0066da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0066dc:	681a      	ldr	r2, [r3, #0]
 c0066de:	4b3d      	ldr	r3, [pc, #244]	@ (c0067d4 <UART_SetConfig+0x218>)
 c0066e0:	429a      	cmp	r2, r3
 c0066e2:	f040 8083 	bne.w	c0067ec <UART_SetConfig+0x230>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 c0066e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 c0066e8:	2200      	movs	r2, #0
 c0066ea:	623b      	str	r3, [r7, #32]
 c0066ec:	627a      	str	r2, [r7, #36]	@ 0x24
 c0066ee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 c0066f2:	f7fe fb29 	bl	c004d48 <HAL_RCCEx_GetPeriphCLKFreq>
 c0066f6:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 c0066f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c0066fa:	2b00      	cmp	r3, #0
 c0066fc:	f000 80e6 	beq.w	c0068cc <UART_SetConfig+0x310>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 c006700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c006702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c006704:	4a38      	ldr	r2, [pc, #224]	@ (c0067e8 <UART_SetConfig+0x22c>)
 c006706:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c00670a:	461a      	mov	r2, r3
 c00670c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c00670e:	fbb3 f3f2 	udiv	r3, r3, r2
 c006712:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c006714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c006716:	685a      	ldr	r2, [r3, #4]
 c006718:	4613      	mov	r3, r2
 c00671a:	005b      	lsls	r3, r3, #1
 c00671c:	4413      	add	r3, r2
 c00671e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 c006720:	429a      	cmp	r2, r3
 c006722:	d305      	bcc.n	c006730 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 c006724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c006726:	685b      	ldr	r3, [r3, #4]
 c006728:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c00672a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 c00672c:	429a      	cmp	r2, r3
 c00672e:	d903      	bls.n	c006738 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 c006730:	2301      	movs	r3, #1
 c006732:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 c006736:	e048      	b.n	c0067ca <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c006738:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c00673a:	2200      	movs	r2, #0
 c00673c:	61bb      	str	r3, [r7, #24]
 c00673e:	61fa      	str	r2, [r7, #28]
 c006740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c006742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c006744:	4a28      	ldr	r2, [pc, #160]	@ (c0067e8 <UART_SetConfig+0x22c>)
 c006746:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c00674a:	b29b      	uxth	r3, r3
 c00674c:	2200      	movs	r2, #0
 c00674e:	613b      	str	r3, [r7, #16]
 c006750:	617a      	str	r2, [r7, #20]
 c006752:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 c006756:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 c00675a:	f7f9 fdbb 	bl	c0002d4 <__aeabi_uldivmod>
 c00675e:	4602      	mov	r2, r0
 c006760:	460b      	mov	r3, r1
 c006762:	4610      	mov	r0, r2
 c006764:	4619      	mov	r1, r3
 c006766:	f04f 0200 	mov.w	r2, #0
 c00676a:	f04f 0300 	mov.w	r3, #0
 c00676e:	020b      	lsls	r3, r1, #8
 c006770:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 c006774:	0202      	lsls	r2, r0, #8
 c006776:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 c006778:	6849      	ldr	r1, [r1, #4]
 c00677a:	0849      	lsrs	r1, r1, #1
 c00677c:	2000      	movs	r0, #0
 c00677e:	460c      	mov	r4, r1
 c006780:	4605      	mov	r5, r0
 c006782:	eb12 0804 	adds.w	r8, r2, r4
 c006786:	eb43 0905 	adc.w	r9, r3, r5
 c00678a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00678c:	685b      	ldr	r3, [r3, #4]
 c00678e:	2200      	movs	r2, #0
 c006790:	60bb      	str	r3, [r7, #8]
 c006792:	60fa      	str	r2, [r7, #12]
 c006794:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 c006798:	4640      	mov	r0, r8
 c00679a:	4649      	mov	r1, r9
 c00679c:	f7f9 fd9a 	bl	c0002d4 <__aeabi_uldivmod>
 c0067a0:	4602      	mov	r2, r0
 c0067a2:	460b      	mov	r3, r1
 c0067a4:	4613      	mov	r3, r2
 c0067a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 c0067a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c0067aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c0067ae:	d308      	bcc.n	c0067c2 <UART_SetConfig+0x206>
 c0067b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c0067b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 c0067b6:	d204      	bcs.n	c0067c2 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 c0067b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0067ba:	681b      	ldr	r3, [r3, #0]
 c0067bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 c0067be:	60da      	str	r2, [r3, #12]
 c0067c0:	e003      	b.n	c0067ca <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 c0067c2:	2301      	movs	r3, #1
 c0067c4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 c0067c8:	e080      	b.n	c0068cc <UART_SetConfig+0x310>
 c0067ca:	e07f      	b.n	c0068cc <UART_SetConfig+0x310>
 c0067cc:	46002400 	.word	0x46002400
 c0067d0:	cfff69f3 	.word	0xcfff69f3
 c0067d4:	56002400 	.word	0x56002400
 c0067d8:	50013800 	.word	0x50013800
 c0067dc:	50004400 	.word	0x50004400
 c0067e0:	50004800 	.word	0x50004800
 c0067e4:	50004c00 	.word	0x50004c00
 c0067e8:	0c007088 	.word	0x0c007088
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c0067ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0067ee:	69db      	ldr	r3, [r3, #28]
 c0067f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 c0067f4:	d13c      	bne.n	c006870 <UART_SetConfig+0x2b4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 c0067f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 c0067f8:	2200      	movs	r2, #0
 c0067fa:	603b      	str	r3, [r7, #0]
 c0067fc:	607a      	str	r2, [r7, #4]
 c0067fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 c006802:	f7fe faa1 	bl	c004d48 <HAL_RCCEx_GetPeriphCLKFreq>
 c006806:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 c006808:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c00680a:	2b00      	cmp	r3, #0
 c00680c:	d05e      	beq.n	c0068cc <UART_SetConfig+0x310>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c00680e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c006810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c006812:	4a39      	ldr	r2, [pc, #228]	@ (c0068f8 <UART_SetConfig+0x33c>)
 c006814:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c006818:	461a      	mov	r2, r3
 c00681a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c00681c:	fbb3 f3f2 	udiv	r3, r3, r2
 c006820:	005a      	lsls	r2, r3, #1
 c006822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c006824:	685b      	ldr	r3, [r3, #4]
 c006826:	085b      	lsrs	r3, r3, #1
 c006828:	441a      	add	r2, r3
 c00682a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00682c:	685b      	ldr	r3, [r3, #4]
 c00682e:	fbb2 f3f3 	udiv	r3, r2, r3
 c006832:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c006834:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c006836:	2b0f      	cmp	r3, #15
 c006838:	d916      	bls.n	c006868 <UART_SetConfig+0x2ac>
 c00683a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c00683c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c006840:	d212      	bcs.n	c006868 <UART_SetConfig+0x2ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 c006842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c006844:	b29b      	uxth	r3, r3
 c006846:	f023 030f 	bic.w	r3, r3, #15
 c00684a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 c00684c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c00684e:	085b      	lsrs	r3, r3, #1
 c006850:	b29b      	uxth	r3, r3
 c006852:	f003 0307 	and.w	r3, r3, #7
 c006856:	b29a      	uxth	r2, r3
 c006858:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 c00685a:	4313      	orrs	r3, r2
 c00685c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 c00685e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c006860:	681b      	ldr	r3, [r3, #0]
 c006862:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 c006864:	60da      	str	r2, [r3, #12]
 c006866:	e031      	b.n	c0068cc <UART_SetConfig+0x310>
      }
      else
      {
        ret = HAL_ERROR;
 c006868:	2301      	movs	r3, #1
 c00686a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 c00686e:	e02d      	b.n	c0068cc <UART_SetConfig+0x310>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 c006870:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 c006872:	2200      	movs	r2, #0
 c006874:	469a      	mov	sl, r3
 c006876:	4693      	mov	fp, r2
 c006878:	4650      	mov	r0, sl
 c00687a:	4659      	mov	r1, fp
 c00687c:	f7fe fa64 	bl	c004d48 <HAL_RCCEx_GetPeriphCLKFreq>
 c006880:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 c006882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c006884:	2b00      	cmp	r3, #0
 c006886:	d021      	beq.n	c0068cc <UART_SetConfig+0x310>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c006888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00688a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c00688c:	4a1a      	ldr	r2, [pc, #104]	@ (c0068f8 <UART_SetConfig+0x33c>)
 c00688e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c006892:	461a      	mov	r2, r3
 c006894:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 c006896:	fbb3 f2f2 	udiv	r2, r3, r2
 c00689a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c00689c:	685b      	ldr	r3, [r3, #4]
 c00689e:	085b      	lsrs	r3, r3, #1
 c0068a0:	441a      	add	r2, r3
 c0068a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0068a4:	685b      	ldr	r3, [r3, #4]
 c0068a6:	fbb2 f3f3 	udiv	r3, r2, r3
 c0068aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c0068ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c0068ae:	2b0f      	cmp	r3, #15
 c0068b0:	d909      	bls.n	c0068c6 <UART_SetConfig+0x30a>
 c0068b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c0068b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c0068b8:	d205      	bcs.n	c0068c6 <UART_SetConfig+0x30a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 c0068ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c0068bc:	b29a      	uxth	r2, r3
 c0068be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0068c0:	681b      	ldr	r3, [r3, #0]
 c0068c2:	60da      	str	r2, [r3, #12]
 c0068c4:	e002      	b.n	c0068cc <UART_SetConfig+0x310>
      }
      else
      {
        ret = HAL_ERROR;
 c0068c6:	2301      	movs	r3, #1
 c0068c8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 c0068cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0068ce:	2201      	movs	r2, #1
 c0068d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 c0068d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0068d6:	2201      	movs	r2, #1
 c0068d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 c0068dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0068de:	2200      	movs	r2, #0
 c0068e0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 c0068e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 c0068e4:	2200      	movs	r2, #0
 c0068e6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 c0068e8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 c0068ec:	4618      	mov	r0, r3
 c0068ee:	3750      	adds	r7, #80	@ 0x50
 c0068f0:	46bd      	mov	sp, r7
 c0068f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 c0068f6:	bf00      	nop
 c0068f8:	0c007088 	.word	0x0c007088

0c0068fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 c0068fc:	b480      	push	{r7}
 c0068fe:	b083      	sub	sp, #12
 c006900:	af00      	add	r7, sp, #0
 c006902:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 c006904:	687b      	ldr	r3, [r7, #4]
 c006906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c006908:	f003 0308 	and.w	r3, r3, #8
 c00690c:	2b00      	cmp	r3, #0
 c00690e:	d00a      	beq.n	c006926 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 c006910:	687b      	ldr	r3, [r7, #4]
 c006912:	681b      	ldr	r3, [r3, #0]
 c006914:	685b      	ldr	r3, [r3, #4]
 c006916:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 c00691a:	687b      	ldr	r3, [r7, #4]
 c00691c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 c00691e:	687b      	ldr	r3, [r7, #4]
 c006920:	681b      	ldr	r3, [r3, #0]
 c006922:	430a      	orrs	r2, r1
 c006924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 c006926:	687b      	ldr	r3, [r7, #4]
 c006928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00692a:	f003 0301 	and.w	r3, r3, #1
 c00692e:	2b00      	cmp	r3, #0
 c006930:	d00a      	beq.n	c006948 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 c006932:	687b      	ldr	r3, [r7, #4]
 c006934:	681b      	ldr	r3, [r3, #0]
 c006936:	685b      	ldr	r3, [r3, #4]
 c006938:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 c00693c:	687b      	ldr	r3, [r7, #4]
 c00693e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 c006940:	687b      	ldr	r3, [r7, #4]
 c006942:	681b      	ldr	r3, [r3, #0]
 c006944:	430a      	orrs	r2, r1
 c006946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 c006948:	687b      	ldr	r3, [r7, #4]
 c00694a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00694c:	f003 0302 	and.w	r3, r3, #2
 c006950:	2b00      	cmp	r3, #0
 c006952:	d00a      	beq.n	c00696a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 c006954:	687b      	ldr	r3, [r7, #4]
 c006956:	681b      	ldr	r3, [r3, #0]
 c006958:	685b      	ldr	r3, [r3, #4]
 c00695a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 c00695e:	687b      	ldr	r3, [r7, #4]
 c006960:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 c006962:	687b      	ldr	r3, [r7, #4]
 c006964:	681b      	ldr	r3, [r3, #0]
 c006966:	430a      	orrs	r2, r1
 c006968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 c00696a:	687b      	ldr	r3, [r7, #4]
 c00696c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c00696e:	f003 0304 	and.w	r3, r3, #4
 c006972:	2b00      	cmp	r3, #0
 c006974:	d00a      	beq.n	c00698c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 c006976:	687b      	ldr	r3, [r7, #4]
 c006978:	681b      	ldr	r3, [r3, #0]
 c00697a:	685b      	ldr	r3, [r3, #4]
 c00697c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 c006980:	687b      	ldr	r3, [r7, #4]
 c006982:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 c006984:	687b      	ldr	r3, [r7, #4]
 c006986:	681b      	ldr	r3, [r3, #0]
 c006988:	430a      	orrs	r2, r1
 c00698a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 c00698c:	687b      	ldr	r3, [r7, #4]
 c00698e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c006990:	f003 0310 	and.w	r3, r3, #16
 c006994:	2b00      	cmp	r3, #0
 c006996:	d00a      	beq.n	c0069ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 c006998:	687b      	ldr	r3, [r7, #4]
 c00699a:	681b      	ldr	r3, [r3, #0]
 c00699c:	689b      	ldr	r3, [r3, #8]
 c00699e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 c0069a2:	687b      	ldr	r3, [r7, #4]
 c0069a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 c0069a6:	687b      	ldr	r3, [r7, #4]
 c0069a8:	681b      	ldr	r3, [r3, #0]
 c0069aa:	430a      	orrs	r2, r1
 c0069ac:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 c0069ae:	687b      	ldr	r3, [r7, #4]
 c0069b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0069b2:	f003 0320 	and.w	r3, r3, #32
 c0069b6:	2b00      	cmp	r3, #0
 c0069b8:	d00a      	beq.n	c0069d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 c0069ba:	687b      	ldr	r3, [r7, #4]
 c0069bc:	681b      	ldr	r3, [r3, #0]
 c0069be:	689b      	ldr	r3, [r3, #8]
 c0069c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 c0069c4:	687b      	ldr	r3, [r7, #4]
 c0069c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 c0069c8:	687b      	ldr	r3, [r7, #4]
 c0069ca:	681b      	ldr	r3, [r3, #0]
 c0069cc:	430a      	orrs	r2, r1
 c0069ce:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 c0069d0:	687b      	ldr	r3, [r7, #4]
 c0069d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c0069d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 c0069d8:	2b00      	cmp	r3, #0
 c0069da:	d01a      	beq.n	c006a12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 c0069dc:	687b      	ldr	r3, [r7, #4]
 c0069de:	681b      	ldr	r3, [r3, #0]
 c0069e0:	685b      	ldr	r3, [r3, #4]
 c0069e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 c0069e6:	687b      	ldr	r3, [r7, #4]
 c0069e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 c0069ea:	687b      	ldr	r3, [r7, #4]
 c0069ec:	681b      	ldr	r3, [r3, #0]
 c0069ee:	430a      	orrs	r2, r1
 c0069f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 c0069f2:	687b      	ldr	r3, [r7, #4]
 c0069f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 c0069f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 c0069fa:	d10a      	bne.n	c006a12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 c0069fc:	687b      	ldr	r3, [r7, #4]
 c0069fe:	681b      	ldr	r3, [r3, #0]
 c006a00:	685b      	ldr	r3, [r3, #4]
 c006a02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 c006a06:	687b      	ldr	r3, [r7, #4]
 c006a08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 c006a0a:	687b      	ldr	r3, [r7, #4]
 c006a0c:	681b      	ldr	r3, [r3, #0]
 c006a0e:	430a      	orrs	r2, r1
 c006a10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 c006a12:	687b      	ldr	r3, [r7, #4]
 c006a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 c006a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 c006a1a:	2b00      	cmp	r3, #0
 c006a1c:	d00a      	beq.n	c006a34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 c006a1e:	687b      	ldr	r3, [r7, #4]
 c006a20:	681b      	ldr	r3, [r3, #0]
 c006a22:	685b      	ldr	r3, [r3, #4]
 c006a24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 c006a28:	687b      	ldr	r3, [r7, #4]
 c006a2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 c006a2c:	687b      	ldr	r3, [r7, #4]
 c006a2e:	681b      	ldr	r3, [r3, #0]
 c006a30:	430a      	orrs	r2, r1
 c006a32:	605a      	str	r2, [r3, #4]
  }
}
 c006a34:	bf00      	nop
 c006a36:	370c      	adds	r7, #12
 c006a38:	46bd      	mov	sp, r7
 c006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006a3e:	4770      	bx	lr

0c006a40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 c006a40:	b580      	push	{r7, lr}
 c006a42:	b098      	sub	sp, #96	@ 0x60
 c006a44:	af02      	add	r7, sp, #8
 c006a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 c006a48:	687b      	ldr	r3, [r7, #4]
 c006a4a:	2200      	movs	r2, #0
 c006a4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 c006a50:	f7fa fdc6 	bl	c0015e0 <HAL_GetTick>
 c006a54:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 c006a56:	687b      	ldr	r3, [r7, #4]
 c006a58:	681b      	ldr	r3, [r3, #0]
 c006a5a:	681b      	ldr	r3, [r3, #0]
 c006a5c:	f003 0308 	and.w	r3, r3, #8
 c006a60:	2b08      	cmp	r3, #8
 c006a62:	d12f      	bne.n	c006ac4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c006a64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 c006a68:	9300      	str	r3, [sp, #0]
 c006a6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 c006a6c:	2200      	movs	r2, #0
 c006a6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 c006a72:	6878      	ldr	r0, [r7, #4]
 c006a74:	f000 f88e 	bl	c006b94 <UART_WaitOnFlagUntilTimeout>
 c006a78:	4603      	mov	r3, r0
 c006a7a:	2b00      	cmp	r3, #0
 c006a7c:	d022      	beq.n	c006ac4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 c006a7e:	687b      	ldr	r3, [r7, #4]
 c006a80:	681b      	ldr	r3, [r3, #0]
 c006a82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c006a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 c006a86:	e853 3f00 	ldrex	r3, [r3]
 c006a8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 c006a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 c006a8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 c006a92:	653b      	str	r3, [r7, #80]	@ 0x50
 c006a94:	687b      	ldr	r3, [r7, #4]
 c006a96:	681b      	ldr	r3, [r3, #0]
 c006a98:	461a      	mov	r2, r3
 c006a9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 c006a9c:	647b      	str	r3, [r7, #68]	@ 0x44
 c006a9e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c006aa0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 c006aa2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 c006aa4:	e841 2300 	strex	r3, r2, [r1]
 c006aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 c006aaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 c006aac:	2b00      	cmp	r3, #0
 c006aae:	d1e6      	bne.n	c006a7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 c006ab0:	687b      	ldr	r3, [r7, #4]
 c006ab2:	2220      	movs	r2, #32
 c006ab4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 c006ab8:	687b      	ldr	r3, [r7, #4]
 c006aba:	2200      	movs	r2, #0
 c006abc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 c006ac0:	2303      	movs	r3, #3
 c006ac2:	e063      	b.n	c006b8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 c006ac4:	687b      	ldr	r3, [r7, #4]
 c006ac6:	681b      	ldr	r3, [r3, #0]
 c006ac8:	681b      	ldr	r3, [r3, #0]
 c006aca:	f003 0304 	and.w	r3, r3, #4
 c006ace:	2b04      	cmp	r3, #4
 c006ad0:	d149      	bne.n	c006b66 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c006ad2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 c006ad6:	9300      	str	r3, [sp, #0]
 c006ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 c006ada:	2200      	movs	r2, #0
 c006adc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 c006ae0:	6878      	ldr	r0, [r7, #4]
 c006ae2:	f000 f857 	bl	c006b94 <UART_WaitOnFlagUntilTimeout>
 c006ae6:	4603      	mov	r3, r0
 c006ae8:	2b00      	cmp	r3, #0
 c006aea:	d03c      	beq.n	c006b66 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 c006aec:	687b      	ldr	r3, [r7, #4]
 c006aee:	681b      	ldr	r3, [r3, #0]
 c006af0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c006af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c006af4:	e853 3f00 	ldrex	r3, [r3]
 c006af8:	623b      	str	r3, [r7, #32]
   return(result);
 c006afa:	6a3b      	ldr	r3, [r7, #32]
 c006afc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 c006b00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 c006b02:	687b      	ldr	r3, [r7, #4]
 c006b04:	681b      	ldr	r3, [r3, #0]
 c006b06:	461a      	mov	r2, r3
 c006b08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 c006b0a:	633b      	str	r3, [r7, #48]	@ 0x30
 c006b0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c006b0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 c006b10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 c006b12:	e841 2300 	strex	r3, r2, [r1]
 c006b16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 c006b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 c006b1a:	2b00      	cmp	r3, #0
 c006b1c:	d1e6      	bne.n	c006aec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c006b1e:	687b      	ldr	r3, [r7, #4]
 c006b20:	681b      	ldr	r3, [r3, #0]
 c006b22:	3308      	adds	r3, #8
 c006b24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c006b26:	693b      	ldr	r3, [r7, #16]
 c006b28:	e853 3f00 	ldrex	r3, [r3]
 c006b2c:	60fb      	str	r3, [r7, #12]
   return(result);
 c006b2e:	68fb      	ldr	r3, [r7, #12]
 c006b30:	f023 0301 	bic.w	r3, r3, #1
 c006b34:	64bb      	str	r3, [r7, #72]	@ 0x48
 c006b36:	687b      	ldr	r3, [r7, #4]
 c006b38:	681b      	ldr	r3, [r3, #0]
 c006b3a:	3308      	adds	r3, #8
 c006b3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 c006b3e:	61fa      	str	r2, [r7, #28]
 c006b40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c006b42:	69b9      	ldr	r1, [r7, #24]
 c006b44:	69fa      	ldr	r2, [r7, #28]
 c006b46:	e841 2300 	strex	r3, r2, [r1]
 c006b4a:	617b      	str	r3, [r7, #20]
   return(result);
 c006b4c:	697b      	ldr	r3, [r7, #20]
 c006b4e:	2b00      	cmp	r3, #0
 c006b50:	d1e5      	bne.n	c006b1e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 c006b52:	687b      	ldr	r3, [r7, #4]
 c006b54:	2220      	movs	r2, #32
 c006b56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 c006b5a:	687b      	ldr	r3, [r7, #4]
 c006b5c:	2200      	movs	r2, #0
 c006b5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 c006b62:	2303      	movs	r3, #3
 c006b64:	e012      	b.n	c006b8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 c006b66:	687b      	ldr	r3, [r7, #4]
 c006b68:	2220      	movs	r2, #32
 c006b6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 c006b6e:	687b      	ldr	r3, [r7, #4]
 c006b70:	2220      	movs	r2, #32
 c006b72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c006b76:	687b      	ldr	r3, [r7, #4]
 c006b78:	2200      	movs	r2, #0
 c006b7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 c006b7c:	687b      	ldr	r3, [r7, #4]
 c006b7e:	2200      	movs	r2, #0
 c006b80:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 c006b82:	687b      	ldr	r3, [r7, #4]
 c006b84:	2200      	movs	r2, #0
 c006b86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 c006b8a:	2300      	movs	r3, #0
}
 c006b8c:	4618      	mov	r0, r3
 c006b8e:	3758      	adds	r7, #88	@ 0x58
 c006b90:	46bd      	mov	sp, r7
 c006b92:	bd80      	pop	{r7, pc}

0c006b94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 c006b94:	b580      	push	{r7, lr}
 c006b96:	b084      	sub	sp, #16
 c006b98:	af00      	add	r7, sp, #0
 c006b9a:	60f8      	str	r0, [r7, #12]
 c006b9c:	60b9      	str	r1, [r7, #8]
 c006b9e:	603b      	str	r3, [r7, #0]
 c006ba0:	4613      	mov	r3, r2
 c006ba2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c006ba4:	e04f      	b.n	c006c46 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 c006ba6:	69bb      	ldr	r3, [r7, #24]
 c006ba8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 c006bac:	d04b      	beq.n	c006c46 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c006bae:	f7fa fd17 	bl	c0015e0 <HAL_GetTick>
 c006bb2:	4602      	mov	r2, r0
 c006bb4:	683b      	ldr	r3, [r7, #0]
 c006bb6:	1ad3      	subs	r3, r2, r3
 c006bb8:	69ba      	ldr	r2, [r7, #24]
 c006bba:	429a      	cmp	r2, r3
 c006bbc:	d302      	bcc.n	c006bc4 <UART_WaitOnFlagUntilTimeout+0x30>
 c006bbe:	69bb      	ldr	r3, [r7, #24]
 c006bc0:	2b00      	cmp	r3, #0
 c006bc2:	d101      	bne.n	c006bc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 c006bc4:	2303      	movs	r3, #3
 c006bc6:	e04e      	b.n	c006c66 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 c006bc8:	68fb      	ldr	r3, [r7, #12]
 c006bca:	681b      	ldr	r3, [r3, #0]
 c006bcc:	681b      	ldr	r3, [r3, #0]
 c006bce:	f003 0304 	and.w	r3, r3, #4
 c006bd2:	2b00      	cmp	r3, #0
 c006bd4:	d037      	beq.n	c006c46 <UART_WaitOnFlagUntilTimeout+0xb2>
 c006bd6:	68bb      	ldr	r3, [r7, #8]
 c006bd8:	2b80      	cmp	r3, #128	@ 0x80
 c006bda:	d034      	beq.n	c006c46 <UART_WaitOnFlagUntilTimeout+0xb2>
 c006bdc:	68bb      	ldr	r3, [r7, #8]
 c006bde:	2b40      	cmp	r3, #64	@ 0x40
 c006be0:	d031      	beq.n	c006c46 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 c006be2:	68fb      	ldr	r3, [r7, #12]
 c006be4:	681b      	ldr	r3, [r3, #0]
 c006be6:	69db      	ldr	r3, [r3, #28]
 c006be8:	f003 0308 	and.w	r3, r3, #8
 c006bec:	2b08      	cmp	r3, #8
 c006bee:	d110      	bne.n	c006c12 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 c006bf0:	68fb      	ldr	r3, [r7, #12]
 c006bf2:	681b      	ldr	r3, [r3, #0]
 c006bf4:	2208      	movs	r2, #8
 c006bf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 c006bf8:	68f8      	ldr	r0, [r7, #12]
 c006bfa:	f000 f838 	bl	c006c6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 c006bfe:	68fb      	ldr	r3, [r7, #12]
 c006c00:	2208      	movs	r2, #8
 c006c02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 c006c06:	68fb      	ldr	r3, [r7, #12]
 c006c08:	2200      	movs	r2, #0
 c006c0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 c006c0e:	2301      	movs	r3, #1
 c006c10:	e029      	b.n	c006c66 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 c006c12:	68fb      	ldr	r3, [r7, #12]
 c006c14:	681b      	ldr	r3, [r3, #0]
 c006c16:	69db      	ldr	r3, [r3, #28]
 c006c18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 c006c1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 c006c20:	d111      	bne.n	c006c46 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c006c22:	68fb      	ldr	r3, [r7, #12]
 c006c24:	681b      	ldr	r3, [r3, #0]
 c006c26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 c006c2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 c006c2c:	68f8      	ldr	r0, [r7, #12]
 c006c2e:	f000 f81e 	bl	c006c6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 c006c32:	68fb      	ldr	r3, [r7, #12]
 c006c34:	2220      	movs	r2, #32
 c006c36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 c006c3a:	68fb      	ldr	r3, [r7, #12]
 c006c3c:	2200      	movs	r2, #0
 c006c3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 c006c42:	2303      	movs	r3, #3
 c006c44:	e00f      	b.n	c006c66 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c006c46:	68fb      	ldr	r3, [r7, #12]
 c006c48:	681b      	ldr	r3, [r3, #0]
 c006c4a:	69da      	ldr	r2, [r3, #28]
 c006c4c:	68bb      	ldr	r3, [r7, #8]
 c006c4e:	4013      	ands	r3, r2
 c006c50:	68ba      	ldr	r2, [r7, #8]
 c006c52:	429a      	cmp	r2, r3
 c006c54:	bf0c      	ite	eq
 c006c56:	2301      	moveq	r3, #1
 c006c58:	2300      	movne	r3, #0
 c006c5a:	b2db      	uxtb	r3, r3
 c006c5c:	461a      	mov	r2, r3
 c006c5e:	79fb      	ldrb	r3, [r7, #7]
 c006c60:	429a      	cmp	r2, r3
 c006c62:	d0a0      	beq.n	c006ba6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 c006c64:	2300      	movs	r3, #0
}
 c006c66:	4618      	mov	r0, r3
 c006c68:	3710      	adds	r7, #16
 c006c6a:	46bd      	mov	sp, r7
 c006c6c:	bd80      	pop	{r7, pc}

0c006c6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 c006c6e:	b480      	push	{r7}
 c006c70:	b095      	sub	sp, #84	@ 0x54
 c006c72:	af00      	add	r7, sp, #0
 c006c74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 c006c76:	687b      	ldr	r3, [r7, #4]
 c006c78:	681b      	ldr	r3, [r3, #0]
 c006c7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c006c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 c006c7e:	e853 3f00 	ldrex	r3, [r3]
 c006c82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 c006c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 c006c86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 c006c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 c006c8c:	687b      	ldr	r3, [r7, #4]
 c006c8e:	681b      	ldr	r3, [r3, #0]
 c006c90:	461a      	mov	r2, r3
 c006c92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 c006c94:	643b      	str	r3, [r7, #64]	@ 0x40
 c006c96:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c006c98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 c006c9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 c006c9c:	e841 2300 	strex	r3, r2, [r1]
 c006ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 c006ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 c006ca4:	2b00      	cmp	r3, #0
 c006ca6:	d1e6      	bne.n	c006c76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 c006ca8:	687b      	ldr	r3, [r7, #4]
 c006caa:	681b      	ldr	r3, [r3, #0]
 c006cac:	3308      	adds	r3, #8
 c006cae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c006cb0:	6a3b      	ldr	r3, [r7, #32]
 c006cb2:	e853 3f00 	ldrex	r3, [r3]
 c006cb6:	61fb      	str	r3, [r7, #28]
   return(result);
 c006cb8:	69fb      	ldr	r3, [r7, #28]
 c006cba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 c006cbe:	f023 0301 	bic.w	r3, r3, #1
 c006cc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 c006cc4:	687b      	ldr	r3, [r7, #4]
 c006cc6:	681b      	ldr	r3, [r3, #0]
 c006cc8:	3308      	adds	r3, #8
 c006cca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 c006ccc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 c006cce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c006cd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 c006cd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 c006cd4:	e841 2300 	strex	r3, r2, [r1]
 c006cd8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 c006cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 c006cdc:	2b00      	cmp	r3, #0
 c006cde:	d1e3      	bne.n	c006ca8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 c006ce0:	687b      	ldr	r3, [r7, #4]
 c006ce2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 c006ce4:	2b01      	cmp	r3, #1
 c006ce6:	d118      	bne.n	c006d1a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 c006ce8:	687b      	ldr	r3, [r7, #4]
 c006cea:	681b      	ldr	r3, [r3, #0]
 c006cec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c006cee:	68fb      	ldr	r3, [r7, #12]
 c006cf0:	e853 3f00 	ldrex	r3, [r3]
 c006cf4:	60bb      	str	r3, [r7, #8]
   return(result);
 c006cf6:	68bb      	ldr	r3, [r7, #8]
 c006cf8:	f023 0310 	bic.w	r3, r3, #16
 c006cfc:	647b      	str	r3, [r7, #68]	@ 0x44
 c006cfe:	687b      	ldr	r3, [r7, #4]
 c006d00:	681b      	ldr	r3, [r3, #0]
 c006d02:	461a      	mov	r2, r3
 c006d04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 c006d06:	61bb      	str	r3, [r7, #24]
 c006d08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c006d0a:	6979      	ldr	r1, [r7, #20]
 c006d0c:	69ba      	ldr	r2, [r7, #24]
 c006d0e:	e841 2300 	strex	r3, r2, [r1]
 c006d12:	613b      	str	r3, [r7, #16]
   return(result);
 c006d14:	693b      	ldr	r3, [r7, #16]
 c006d16:	2b00      	cmp	r3, #0
 c006d18:	d1e6      	bne.n	c006ce8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 c006d1a:	687b      	ldr	r3, [r7, #4]
 c006d1c:	2220      	movs	r2, #32
 c006d1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c006d22:	687b      	ldr	r3, [r7, #4]
 c006d24:	2200      	movs	r2, #0
 c006d26:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 c006d28:	687b      	ldr	r3, [r7, #4]
 c006d2a:	2200      	movs	r2, #0
 c006d2c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 c006d2e:	bf00      	nop
 c006d30:	3754      	adds	r7, #84	@ 0x54
 c006d32:	46bd      	mov	sp, r7
 c006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006d38:	4770      	bx	lr

0c006d3a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 c006d3a:	b480      	push	{r7}
 c006d3c:	b085      	sub	sp, #20
 c006d3e:	af00      	add	r7, sp, #0
 c006d40:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 c006d42:	687b      	ldr	r3, [r7, #4]
 c006d44:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 c006d48:	2b01      	cmp	r3, #1
 c006d4a:	d101      	bne.n	c006d50 <HAL_UARTEx_DisableFifoMode+0x16>
 c006d4c:	2302      	movs	r3, #2
 c006d4e:	e027      	b.n	c006da0 <HAL_UARTEx_DisableFifoMode+0x66>
 c006d50:	687b      	ldr	r3, [r7, #4]
 c006d52:	2201      	movs	r2, #1
 c006d54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 c006d58:	687b      	ldr	r3, [r7, #4]
 c006d5a:	2224      	movs	r2, #36	@ 0x24
 c006d5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c006d60:	687b      	ldr	r3, [r7, #4]
 c006d62:	681b      	ldr	r3, [r3, #0]
 c006d64:	681b      	ldr	r3, [r3, #0]
 c006d66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c006d68:	687b      	ldr	r3, [r7, #4]
 c006d6a:	681b      	ldr	r3, [r3, #0]
 c006d6c:	681a      	ldr	r2, [r3, #0]
 c006d6e:	687b      	ldr	r3, [r7, #4]
 c006d70:	681b      	ldr	r3, [r3, #0]
 c006d72:	f022 0201 	bic.w	r2, r2, #1
 c006d76:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 c006d78:	68fb      	ldr	r3, [r7, #12]
 c006d7a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 c006d7e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 c006d80:	687b      	ldr	r3, [r7, #4]
 c006d82:	2200      	movs	r2, #0
 c006d84:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c006d86:	687b      	ldr	r3, [r7, #4]
 c006d88:	681b      	ldr	r3, [r3, #0]
 c006d8a:	68fa      	ldr	r2, [r7, #12]
 c006d8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c006d8e:	687b      	ldr	r3, [r7, #4]
 c006d90:	2220      	movs	r2, #32
 c006d92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c006d96:	687b      	ldr	r3, [r7, #4]
 c006d98:	2200      	movs	r2, #0
 c006d9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 c006d9e:	2300      	movs	r3, #0
}
 c006da0:	4618      	mov	r0, r3
 c006da2:	3714      	adds	r7, #20
 c006da4:	46bd      	mov	sp, r7
 c006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006daa:	4770      	bx	lr

0c006dac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c006dac:	b580      	push	{r7, lr}
 c006dae:	b084      	sub	sp, #16
 c006db0:	af00      	add	r7, sp, #0
 c006db2:	6078      	str	r0, [r7, #4]
 c006db4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c006db6:	687b      	ldr	r3, [r7, #4]
 c006db8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 c006dbc:	2b01      	cmp	r3, #1
 c006dbe:	d101      	bne.n	c006dc4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 c006dc0:	2302      	movs	r3, #2
 c006dc2:	e02d      	b.n	c006e20 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 c006dc4:	687b      	ldr	r3, [r7, #4]
 c006dc6:	2201      	movs	r2, #1
 c006dc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 c006dcc:	687b      	ldr	r3, [r7, #4]
 c006dce:	2224      	movs	r2, #36	@ 0x24
 c006dd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c006dd4:	687b      	ldr	r3, [r7, #4]
 c006dd6:	681b      	ldr	r3, [r3, #0]
 c006dd8:	681b      	ldr	r3, [r3, #0]
 c006dda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c006ddc:	687b      	ldr	r3, [r7, #4]
 c006dde:	681b      	ldr	r3, [r3, #0]
 c006de0:	681a      	ldr	r2, [r3, #0]
 c006de2:	687b      	ldr	r3, [r7, #4]
 c006de4:	681b      	ldr	r3, [r3, #0]
 c006de6:	f022 0201 	bic.w	r2, r2, #1
 c006dea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 c006dec:	687b      	ldr	r3, [r7, #4]
 c006dee:	681b      	ldr	r3, [r3, #0]
 c006df0:	689b      	ldr	r3, [r3, #8]
 c006df2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 c006df6:	687b      	ldr	r3, [r7, #4]
 c006df8:	681b      	ldr	r3, [r3, #0]
 c006dfa:	683a      	ldr	r2, [r7, #0]
 c006dfc:	430a      	orrs	r2, r1
 c006dfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c006e00:	6878      	ldr	r0, [r7, #4]
 c006e02:	f000 f84f 	bl	c006ea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c006e06:	687b      	ldr	r3, [r7, #4]
 c006e08:	681b      	ldr	r3, [r3, #0]
 c006e0a:	68fa      	ldr	r2, [r7, #12]
 c006e0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c006e0e:	687b      	ldr	r3, [r7, #4]
 c006e10:	2220      	movs	r2, #32
 c006e12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c006e16:	687b      	ldr	r3, [r7, #4]
 c006e18:	2200      	movs	r2, #0
 c006e1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 c006e1e:	2300      	movs	r3, #0
}
 c006e20:	4618      	mov	r0, r3
 c006e22:	3710      	adds	r7, #16
 c006e24:	46bd      	mov	sp, r7
 c006e26:	bd80      	pop	{r7, pc}

0c006e28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c006e28:	b580      	push	{r7, lr}
 c006e2a:	b084      	sub	sp, #16
 c006e2c:	af00      	add	r7, sp, #0
 c006e2e:	6078      	str	r0, [r7, #4]
 c006e30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c006e32:	687b      	ldr	r3, [r7, #4]
 c006e34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 c006e38:	2b01      	cmp	r3, #1
 c006e3a:	d101      	bne.n	c006e40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 c006e3c:	2302      	movs	r3, #2
 c006e3e:	e02d      	b.n	c006e9c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 c006e40:	687b      	ldr	r3, [r7, #4]
 c006e42:	2201      	movs	r2, #1
 c006e44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 c006e48:	687b      	ldr	r3, [r7, #4]
 c006e4a:	2224      	movs	r2, #36	@ 0x24
 c006e4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c006e50:	687b      	ldr	r3, [r7, #4]
 c006e52:	681b      	ldr	r3, [r3, #0]
 c006e54:	681b      	ldr	r3, [r3, #0]
 c006e56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c006e58:	687b      	ldr	r3, [r7, #4]
 c006e5a:	681b      	ldr	r3, [r3, #0]
 c006e5c:	681a      	ldr	r2, [r3, #0]
 c006e5e:	687b      	ldr	r3, [r7, #4]
 c006e60:	681b      	ldr	r3, [r3, #0]
 c006e62:	f022 0201 	bic.w	r2, r2, #1
 c006e66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 c006e68:	687b      	ldr	r3, [r7, #4]
 c006e6a:	681b      	ldr	r3, [r3, #0]
 c006e6c:	689b      	ldr	r3, [r3, #8]
 c006e6e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 c006e72:	687b      	ldr	r3, [r7, #4]
 c006e74:	681b      	ldr	r3, [r3, #0]
 c006e76:	683a      	ldr	r2, [r7, #0]
 c006e78:	430a      	orrs	r2, r1
 c006e7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c006e7c:	6878      	ldr	r0, [r7, #4]
 c006e7e:	f000 f811 	bl	c006ea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c006e82:	687b      	ldr	r3, [r7, #4]
 c006e84:	681b      	ldr	r3, [r3, #0]
 c006e86:	68fa      	ldr	r2, [r7, #12]
 c006e88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c006e8a:	687b      	ldr	r3, [r7, #4]
 c006e8c:	2220      	movs	r2, #32
 c006e8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c006e92:	687b      	ldr	r3, [r7, #4]
 c006e94:	2200      	movs	r2, #0
 c006e96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 c006e9a:	2300      	movs	r3, #0
}
 c006e9c:	4618      	mov	r0, r3
 c006e9e:	3710      	adds	r7, #16
 c006ea0:	46bd      	mov	sp, r7
 c006ea2:	bd80      	pop	{r7, pc}

0c006ea4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 c006ea4:	b480      	push	{r7}
 c006ea6:	b085      	sub	sp, #20
 c006ea8:	af00      	add	r7, sp, #0
 c006eaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 c006eac:	687b      	ldr	r3, [r7, #4]
 c006eae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 c006eb0:	2b00      	cmp	r3, #0
 c006eb2:	d108      	bne.n	c006ec6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 c006eb4:	687b      	ldr	r3, [r7, #4]
 c006eb6:	2201      	movs	r2, #1
 c006eb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 c006ebc:	687b      	ldr	r3, [r7, #4]
 c006ebe:	2201      	movs	r2, #1
 c006ec0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 c006ec4:	e031      	b.n	c006f2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 c006ec6:	2308      	movs	r3, #8
 c006ec8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 c006eca:	2308      	movs	r3, #8
 c006ecc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 c006ece:	687b      	ldr	r3, [r7, #4]
 c006ed0:	681b      	ldr	r3, [r3, #0]
 c006ed2:	689b      	ldr	r3, [r3, #8]
 c006ed4:	0e5b      	lsrs	r3, r3, #25
 c006ed6:	b2db      	uxtb	r3, r3
 c006ed8:	f003 0307 	and.w	r3, r3, #7
 c006edc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 c006ede:	687b      	ldr	r3, [r7, #4]
 c006ee0:	681b      	ldr	r3, [r3, #0]
 c006ee2:	689b      	ldr	r3, [r3, #8]
 c006ee4:	0f5b      	lsrs	r3, r3, #29
 c006ee6:	b2db      	uxtb	r3, r3
 c006ee8:	f003 0307 	and.w	r3, r3, #7
 c006eec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 c006eee:	7bbb      	ldrb	r3, [r7, #14]
 c006ef0:	7b3a      	ldrb	r2, [r7, #12]
 c006ef2:	4911      	ldr	r1, [pc, #68]	@ (c006f38 <UARTEx_SetNbDataToProcess+0x94>)
 c006ef4:	5c8a      	ldrb	r2, [r1, r2]
 c006ef6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 c006efa:	7b3a      	ldrb	r2, [r7, #12]
 c006efc:	490f      	ldr	r1, [pc, #60]	@ (c006f3c <UARTEx_SetNbDataToProcess+0x98>)
 c006efe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 c006f00:	fb93 f3f2 	sdiv	r3, r3, r2
 c006f04:	b29a      	uxth	r2, r3
 c006f06:	687b      	ldr	r3, [r7, #4]
 c006f08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 c006f0c:	7bfb      	ldrb	r3, [r7, #15]
 c006f0e:	7b7a      	ldrb	r2, [r7, #13]
 c006f10:	4909      	ldr	r1, [pc, #36]	@ (c006f38 <UARTEx_SetNbDataToProcess+0x94>)
 c006f12:	5c8a      	ldrb	r2, [r1, r2]
 c006f14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 c006f18:	7b7a      	ldrb	r2, [r7, #13]
 c006f1a:	4908      	ldr	r1, [pc, #32]	@ (c006f3c <UARTEx_SetNbDataToProcess+0x98>)
 c006f1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 c006f1e:	fb93 f3f2 	sdiv	r3, r3, r2
 c006f22:	b29a      	uxth	r2, r3
 c006f24:	687b      	ldr	r3, [r7, #4]
 c006f26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 c006f2a:	bf00      	nop
 c006f2c:	3714      	adds	r7, #20
 c006f2e:	46bd      	mov	sp, r7
 c006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006f34:	4770      	bx	lr
 c006f36:	bf00      	nop
 c006f38:	0c0070a0 	.word	0x0c0070a0
 c006f3c:	0c0070a8 	.word	0x0c0070a8

0c006f40 <memset>:
 c006f40:	4402      	add	r2, r0
 c006f42:	4603      	mov	r3, r0
 c006f44:	4293      	cmp	r3, r2
 c006f46:	d100      	bne.n	c006f4a <memset+0xa>
 c006f48:	4770      	bx	lr
 c006f4a:	f803 1b01 	strb.w	r1, [r3], #1
 c006f4e:	e7f9      	b.n	c006f44 <memset+0x4>

0c006f50 <__libc_init_array>:
 c006f50:	b570      	push	{r4, r5, r6, lr}
 c006f52:	4d0d      	ldr	r5, [pc, #52]	@ (c006f88 <__libc_init_array+0x38>)
 c006f54:	2600      	movs	r6, #0
 c006f56:	4c0d      	ldr	r4, [pc, #52]	@ (c006f8c <__libc_init_array+0x3c>)
 c006f58:	1b64      	subs	r4, r4, r5
 c006f5a:	10a4      	asrs	r4, r4, #2
 c006f5c:	42a6      	cmp	r6, r4
 c006f5e:	d109      	bne.n	c006f74 <__libc_init_array+0x24>
 c006f60:	4d0b      	ldr	r5, [pc, #44]	@ (c006f90 <__libc_init_array+0x40>)
 c006f62:	2600      	movs	r6, #0
 c006f64:	4c0b      	ldr	r4, [pc, #44]	@ (c006f94 <__libc_init_array+0x44>)
 c006f66:	f000 f817 	bl	c006f98 <_init>
 c006f6a:	1b64      	subs	r4, r4, r5
 c006f6c:	10a4      	asrs	r4, r4, #2
 c006f6e:	42a6      	cmp	r6, r4
 c006f70:	d105      	bne.n	c006f7e <__libc_init_array+0x2e>
 c006f72:	bd70      	pop	{r4, r5, r6, pc}
 c006f74:	f855 3b04 	ldr.w	r3, [r5], #4
 c006f78:	3601      	adds	r6, #1
 c006f7a:	4798      	blx	r3
 c006f7c:	e7ee      	b.n	c006f5c <__libc_init_array+0xc>
 c006f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 c006f82:	3601      	adds	r6, #1
 c006f84:	4798      	blx	r3
 c006f86:	e7f2      	b.n	c006f6e <__libc_init_array+0x1e>
 c006f88:	0c0070b8 	.word	0x0c0070b8
 c006f8c:	0c0070b8 	.word	0x0c0070b8
 c006f90:	0c0070b8 	.word	0x0c0070b8
 c006f94:	0c0070bc 	.word	0x0c0070bc

0c006f98 <_init>:
 c006f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c006f9a:	bf00      	nop
 c006f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c006f9e:	bc08      	pop	{r3}
 c006fa0:	469e      	mov	lr, r3
 c006fa2:	4770      	bx	lr

0c006fa4 <_fini>:
 c006fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c006fa6:	bf00      	nop
 c006fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c006faa:	bc08      	pop	{r3}
 c006fac:	469e      	mov	lr, r3
 c006fae:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c0fe000 <SECURE_SystemCoreClockUpdate>:
 c0fe000:	e97f e97f 	sg
 c0fe004:	f703 b9c8 	b.w	c001398 <__acle_se_SECURE_SystemCoreClockUpdate>

0c0fe008 <SECURE_RegisterCallback>:
 c0fe008:	e97f e97f 	sg
 c0fe00c:	f702 bf34 	b.w	c000e78 <__acle_se_SECURE_RegisterCallback>
	...
